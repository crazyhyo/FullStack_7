2021.08.23
<이론>
Stack => 후입선출(LIFO)의 자료구조
Queue => 선입선출(FIFO)의 자료구조
Stack과 Queue는 LinkedList를 이용하여 사용할 수 있다.

stack의 명령
1) 자료입력 : push(저장할 값)
2) 자료출력 : pop() => 자료를 꺼내온 후 꺼내온 자료를 stack에서 삭제한다.

Queue의 명령
1) 자료입력 : offer(저장할 값)
2) 자료출력 : poll() => 자료를 Queue에서 꺼내온 후 꺼내온 자료는 Queue에서 삭제한다.


정렬과 관련된 interface는 Comparable과 Comparator 이렇게 두가지가 있다.
-보통 객체 자체에 정렬기능을 넣기 위해서는 Comparable을 구현하고, 
정렬기준을 별도로 구현하고 싶은 경우에는 Comparator를 구현하여 사용하면 된다.

-Comparable에서는 compareTo()로 구현해야 하고,
Comparator에서는 compare()메서드를 구현해야 한다.

정렬은 Collections.sort()메서드를 이용하여 정렬한다.
정렬은 기본적으로 '오름차순'정렬을 수행한다.
 
정렬방식을 변경하려면 정렬방식을 결정하는 객체를 만들어서
Collections.sort()메서드에 인수를 넘겨주면 된다.
정렬방식을 결정하는 class는 Comparator라는 인터페이스를 구현해야 한다.
compare()메서드의 반환값을 결정하는 방법
=> 이 메서드가 양수를 반환하면 두 값의 순서가 바뀐다.(오름차순이 기본임)
 
-오름차순 정렬인 경우
=> 앞의 값이 크면 양수, 같으면 0, 앞의 값이 작으면 음수를 반환하도록 한다.
 
 - String객체에는 정렬을 위해 Comparable()메서드가 구현되어 있는데
 이 메서드의 반환값은 오름차순에 맞게 반환되도록 구현되어 있다.
 (Wrapper클래스와 Date, File클래스에도 구현되어 있다.)

<실습>
// DEFAULT_CAPACITY = 10
//		List list1 = new ArrayList();
		List list1 = new LinkedList();
			
		//add()메서드를 사용해서 데이터를 추가한다.
		list1.add("aaa");
		list1.add("bbb");
		list1.add(111);
//		list1.add(new Integer(111));
		list1.add('k');
		list1.add(true);
		list1.add(12.34);
		list1.add(0);
		
		//size() => 데이터 개수
		System.out.println("Size => " + list1.size());
		System.out.println("list " + list1);
		
		// get()으로 데이터 꺼내오기
		System.out.println("1번째 자료 : " + list1.get(0));
		
		// 데이터 끼워 넣기도 같다.
		list1.add(0,"zzz");
		System.out.println("list1 => " + list1);
		
		// 데이터 변경하기(set메서드)
		String temp = (String) list1.set(0,"yyy");
		System.out.println("temp => " + temp);
		System.out.println("list1 => " + list1);
		
		//삭제하기
//		list1.remove(0);	//파라미터가 int값이므로 index로 판단한다.
		list1.remove("bbb");//파라미터가 int가 아니면 값이 일치하는 것을 삭제한다.
		list1.remove(new Integer(0));	//값이 0인 데이터를 list에서 삭제하고 싶으면  이렇게 객체를 파라미터로 넣어야 한다.
		
		System.out.println("bbb 삭제 후 : " + list1);
		System.out.println("list1 => " + list1);
		System.out.println("=======================");
		
		// 제네릭을 지정하여 선언할 수 있다.
		List<String> list2 = new ArrayList<String>();
		// 제네릭의 사용이유 :  리스트의 내용물을 String으로 제한
		list2.add("AAA");
		list2.add("BBB");
		list2.add("CCC");
		list2.add("DDD");
		list2.add("EEE");
//		list2.add(2222);	//	제네릭 제한으로 인한 컴파일오류
		
		for(int i = 0; i < list2.size(); i++) {
			System.out.println(i + " : " + list2.get(i));
		}
		System.out.println("-------------------------------");
		
		// contains(비교객체) => 리스트에 '비교객체'가 있으면 true
		//						그렇지 않으면 false
		
		System.out.println(list2.contains("DDD"));
		System.out.println(list2.contains("ZZZ"));
		
		// indexOf(비교객체) => 리스트에 '비교객체'를 찾아 '비교객체가 있는
		//						index값을 반환한다.
		//						리스트에 '비교객체'가 없으면 -1을 반환한다.
		System.out.println("DDD의 index값 : " + list2.indexOf("DDD"));
		System.out.println("ZZZ의 index값 : " + list2.indexOf("ZZZ"));
		System.out.println("---------------------------------------");
		
		// toArray() => 리스트 안의 데이터들을 배열로 변환하여 반환한다.
		//				기본적으로 Object형 배열로 반환한다.
		Object[] strArr = list2.toArray();
		System.out.println("배열의 개수 : " + strArr.length);
		
		// ArrayList 순차적으로 지우기
		for(int i = 0; i < list2.size(); i++) {
			list2.remove(i);
		}
		/*for(int i = list2.size() - 1; i >= 0; i--) {
			list2.remove(i);
		}*/
		
		System.out.println("삭제후 크기 => " + list2.size());
LinkedList<String> stack = new LinkedList<>();
stack.push("홍길동");
		stack.push("일지매");
		stack.push("변학도");
		stack.push("강감찬");
		System.out.println("현재 stack값들 : " + stack);
		
		String data = stack.pop();
		System.out.println("꺼내온 자료 : " + data);
		System.out.println("꺼내온 자료 : " + stack.pop());
		System.out.println("현재 stack값들 : " + stack);
		
		stack.push("성춘향");
		System.out.println("현재 stack값들 : " + stack);
		System.out.println("꺼내온 자료 : " + stack.pop());
		System.out.println("===========================");
		System.out.println();
		
		LinkedList<String> queue = new LinkedList<>();
queue.offer("홍길동");
		queue.offer("일지매");
		queue.offer("변학도");
		queue.offer("강감찬");
		
		System.out.println("현재 queue값들 : " + queue);
		
		String temp = queue.poll();
		System.out.println("꺼내온 자료 : " + temp);
		System.out.println("꺼내온 자료 : " + queue.poll());
		System.out.println("현재 queue값들 : " + queue);
	
		if(queue.offer("성춘향")) {
			System.out.println("신규 등록 자료 : 성춘향");
		}
		
		System.out.println("현재 queue의 값 : " + queue);
		System.out.println("꺼내온 자료 : " + queue.poll());

List<String> list = new ArrayList<String>();
		
		list.add("일지매");
		list.add("홍길동");
		list.add("성춘형");
		list.add("변학도");
		list.add("이순신");
		System.out.println("정렬 전 : " + list);
		Collections.sort(list);	//	오름차순 정렬하기
		 System.out.println("정렬 후 : " + list);
		 
		 Collections.shuffle(list);	//	데이터 섞기
		 System.out.println("자료 섞기 후 : " + list);
		 
		 // 정렬방식을 결정하는 객체를 이용하여 정렬하기
		 Collections.sort(list, new Desc());
		 System.out.println("정렬 후 : " + list);
class Desc implements Comparator<String>{
	@Override
	public int compare(String str1, String str2) {
		return str1.compareTo(str2) * -1;
	}
	
}
		List<Member> memList = new ArrayList<Member>();
		
		memList.add(new Member(1, "홍길동", "010-1111-1111"));
		memList.add(new Member(5, "변학도", "010-2222-2222"));
		memList.add(new Member(9, "성춘향", "010-3333-3333"));
		memList.add(new Member(3, "이순식", "010-4444-4444"));
		memList.add(new Member(6, "강감찬", "010-5555-5555"));
		memList.add(new Member(2, "일지매", "010-6666-6666"));
		
		System.out.println("정렬 전");
		for(Member mem : memList) {
			System.out.println(mem);
		}
		
		System.out.println("------------------------");
		
		Collections.sort(memList);
		
		System.out.println("이름으로 오름차순 정렬 후");
		for(Member mem : memList) {
			System.out.println(mem);
		}

class Member implements Comparable<Member> {
	private int num; // 번호
	private String name; // 이름
	private String tel; // 전화번호

	public int getNum() {
		return num;
	}

	public void setNum(int num) {
		this.num = num;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getTel() {
		return tel;
	}

	public void setTel(String tel) {
		this.tel = tel;
	}

	public Member(int num, String name, String tel) {
		super();
		this.num = num;
		this.name = name;
		this.tel = tel;
	}

	@Override
	public int compareTo(Member mem) {
		
		return this.getName().compareTo(mem.getName());
	}

	@Override
	public String toString() {
		return "Member [num=" + num + ", name=" + name + ", tel=" + tel + "]";
	}
	
}

<!DOCTYPE html>
<html>
	<head>
		<title>안녕하세요</title>

		<style>
		div{
			border-width : 5px;
			border-style : outset;
			border-color : red;
			margin : 5px;
			
			border-top : 3px dotted blue;

		}
		</style>

	</head>
	
	<body>
		<div>
		Hello HTML5 <br><br>
		반갑습니다 CSS <br>
		공부합시다 JavaScript <br>
		열심히 jQuery <br>
		</div>
		
		<div>
		<h1>Hello HTML5</h1>
		<h2>Hello HTML5</h2>
		<h3>Hello HTML5</h3>
		<h4>Hello HTML5</h4>
		<h5>Hello HTML5</h5>
		<h6>Hello HTML5</h6>
		</div>
		
		<div>
		html요소에는 block요소와 inline요소가 있다.<br>
		block 요소는 자동으로 줄이 바뀌는 것이고<br>
		inline요소는 자동으로 줄이 바뀌지 않는다.<br>
		<br>
		</div>

		강제 줄바꿈을 위해서 &lt;br&gt;태그를 사용한다.
		
		solid, dotted, double, inset, outset
	</body>
	
</html>

<!DOCTYPE html>
<html>
	<head>
		<title>Web Programming</title>
	<style>
		body * {
			/*// border : 2px solid blue;	*/
			width : 80%;
			margin-left : 300px;
		}
		img{
			width : 400px;
			height : 300px;
		}
		p{
			font-size : 20px;
		}
		span{
			font-style : italic;
			margin-left : 0px;
			font-size : 1.5em;
			color : red;
			font-weight : bold;
			
		}
	</style>

	</head>
	

	<body>
		<!-- html body 주석처리-->
		<h1>Welcome to the Web Programming</h1>
		<img src = "./images/img2.jpg" alt = "이미지">
		<img src = "./images/img3.jpg" alt = "이미지">

		<p>언제든지 오셔서 질문이 있으시면 올려주세요! <span>여러분을 환영합니다.</span></p>

		<h2>내용</h2>

		<p>HTML5, CSS, Javascript, jQuery, SQL, JSP, ...</p>

	</body>
	
</html>


<TMI>
기업에서는 java 1.7버전을 많이 사용하고 있음
우리는 java 1.8에서 지원하는 문법을 사용할 것이라 새로운 버전 다운받음
eclipse.org->download->other versions->older versions->eclipse oxygen으로 다운


1.컬렉션프레임워크
2.람다식,enum
3.스레드
4.JDBC, IBATIS, LOG4J
5.JAVA IO
등등을 배울 것임

ArrayList, HashMap

Array vs ArrayList : Array can't vary its size but arraylist can by using
add method(with index for specific position, without index for the end position)

Collection Framework has 3 interfacese :
List 
	ArrayList	LinkedList	Vector
Set 
	
Map 
	HashMap

interface : 
어떤 클래스는 반드시 이런 기능을 가지고 특정  조건을 충족했으면 좋겠다
-> 인터페이스를 먼저 설계하는 것이 맞음
내가 원하는 것은 객체임. 결국 객체인 class를 만들되 특정제약을 주려고 사용

collection interface에서는 List와 Set이 있음
List의 특징 :
1.인덱스가 있다 =  순서가 있다.
2.중복을 허용한다.

Set의 특징 :
interface

ArrayList
	삽입과 삭제가 자주 일어나는 데이터를 핸들링 할 때는 내부적으로
	index를 맞추는 작업이 많이 수행되므로 적절하지 않음
LinkedList
	하나하나의 노드가 pre와 next의 주소를 참조할 수 있어서 삽입과
	삭제가 경제적으로 처리된다.

interface기반 코딩은 더 적은 비용으로 코드변경이 가능하다(코드의 유지보수가 수월함).

comparable, comparator --interface

Collection 은 interface이지만 Collections는 class이다
comparable : compareTo 메서드가 구현되어 있는 interface



배미숙

웹프로그램
html : 1
css : 1
javascript : 2
jQuery : 4

평가 2회
1. html, css
2. javascript, jquery
실제로 만드는 평가는 과제로 나올 예정

교재 
ppt로 배포할 것, 종이교재는 제목만 있음
7번과 11번에서 평가 나온다고 함

보기좋게 만드는건 css
글자만 쓰는건 html
내부 동작은 javascript

markup 언어 : 시작태그와 종료태그를 사용하는 언어
element는 시작태그 + 내용물 + 종료태그

xhtml은 융통성이 없음. 문법에 맞지 않는 코드들을 모두 에러띄움
근데 xhtml은 모두 폐기되었음
html은 형식에 민감하지 않고 실행이 된다.

