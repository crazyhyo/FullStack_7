2021.07.28

<이론>
집합연산자
  - 집합연산자는 SELECT문의 결과를 대상으로 연산을 수행
  - 복잡한 서브쿼리나 조인을 줄일 수 있음
  - 여러 개의 SELECT문을 하나로 묶는 역할 수행
  - UNION ALL, UNION, INTERSECT, MINUS 제공
  ** 주의사항
  - 각 SELECT문은 같은 수와 타입의 컬럼을 조회해야 함(집합연산의 대상은 같은 스키마를 가지고 있어야 한다)
  - 각 SELECT문들이 여러 개의 컬럼을 조회하는 경우 모든 컬럼에 대한 집합연산 수행
  - ORDER BY는 사용할 수 있으나 마지막 SELECT문에서만 사용 가능
  - 출력은 첫 번째 SELECT문에 의하여 결정 됨

UNION ALL : 교집합부분에 존재하는 데이터를 중복되는 수만큼 출력
UNION : 교집합부분에 존재하는 데이터를 한번만 출력

 1) UNION
  - 합집합의 결과를 반환
  - 교집합 부분의 중복은 배제됨

 2) UNION ALL
  - 합집합의 결과를 반환
  - 교집합 부분(공통부분)이 중복되어 출력

 3) INTERSECT
  - 교집합(공통부분)의 결과를 반환

=================================================================================

/*
		 * 런타임 에러
		 * - 런타임 에러 발생시 발생한 위치에서 프로그램이 비정상적을 종료된다.
		 * - 에러 : 프로그램 코드에 의해 수습될 수 없는 심각한 오류(처리 불가)
		 * - 예외 : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류(처리 가능)
		 * 
		 * 예외
		 * - 모든 예외는 Exception 클래스의 자식 클래스이다.
		 * - RuntimeException 클래스와 그 자식들은 예외처리가 강제되지 않는다.
		 * - [RuntimeException 클래스와 그 자식들을 제외한] Exception 클래스의 자식들은 예외처리가 강제된다.
		 * 
		 * 예외처리(try-catch)
		 * - 예외처리를 통해 프로그램이 비정상적으로 종료되는 것을 방지할 수 있다.
		 * - try{} catch(Exception e) {}
		 * - try 블럭 안의 내용을 실행 중 예외가 발생하면 catch로 넘어간다.
		 * - catch의 ()안에는 처리할 예외를 지정해줄 수 있다.
		 * - 여러 종류의 예외를 처리할 수 있도록 catch는 하나 이상 올 수 있다.
		 * - 발생한 예외와 일치하는 catch 블럭안의 내용이 수행된 후 try-catch를 빠져나간다.
		 * - 발생한 예외와 일치하는 catch가 없는 경우 예외는 처리되지 않는다.
		 */

catch(Exception e){
			//모든 예외는 Exception의 자식 클래스, 다형성을 이용하여 모든 예외를 처리한 예시
			e.printStackTrace();
		}

//예외처리는 형식적인 경우가 많음
		//잘 돌아가게 코드를 고치자.
		//보통 예외처리가 강제되는 경우에 예외처리를 한다(런타임예외 이외의 경우)
		//코드작성하고 문제가 없어보이는데 컴파일에러가 보인다면 Ctrl+1누르고 예외처리 하라고 하면 해주자.
		//예외 메세지를 읽는 법
		//어디서 어떤 예외가 왜 발생했는지 아는 것이 이번 시간의 내용
		//Exception in thread "main" 메인이라는 쓰레드에서 예외가 발생했다
		// java.lang.ArithmeticException: / by zero 예외의 종류는 이렇다
		// at h_exception.ExceptionHandling.main(ExceptionHandling.java:29) 예외 발생된 위치는 h_exception패키지의
		// ExceptionHandling 클래스의 main안에 있는 29번째 라인에서 발생한 것이다.

/*
	at h_exception.ExceptionHandling.test2(ExceptionHandling.java:62)
	at h_exception.ExceptionHandling.test1(ExceptionHandling.java:58)
	at h_exception.ExceptionHandling.main(ExceptionHandling.java:53)
	가장 위에서 나온 위치가 문제가 아닌 경우도 있다.
	가장 위에 있는 곳이 내가 만든 것이 아닌 경우가 보통 그렇다.
	
	콜스택 : 실행되는 메서드가 저장되는 곳
	CallStack
	|___________|
	|___________|
	|___________|
	|___________|
	|__test2()__|
	|__test1()__|
	|___main()__|
	위는 뚫려있고 아래는 막혀있음 Stack구조 pop & push
	맨 위에는 가장 최근에 들어온, 가장 최근에 실행된 코드. 가장 오류가 발생했을 가능성이 높음
	*/

/*
		 * finally
		 * - 필요에 따라 try-catch 뒤에 finally를 추가할 수 있다.
		 * - finally는 예외의 발생여부와 상관없이 가장 마지막에 수행된다.
		 * 
		 * 자동 자원 반환(자바 1.7부터 사용가능)
		 * - try(변수 선언;변수 선언) {} catch(Exception e) {}
		 * - 사용 후 반환이 필요한 객체를 try의 () 안에서 선언하면 try 블럭 종료시 자동으로 반환된다. 자동으로 close된다.
		 */

//fileIO는 운영체제의 도움을 받아야 한다. 
			//운영체제의 도움을 받는 메소드는 반드시 사용후 close로 운영체제에게 빌려온 Stream을 반납해야 함

/*
		 * 메서드에 예외 선언하기
		 * - 메서드 호출시 발생할 수 잇는 예외를 선언해줄 수 있다.
		 * - void methods() throws IOException {}
		 * - 메서드의 구현부 끝에 throws 예약어와 클래스명으로 예외를 선언할 수 있다.
		 * - 예외를 선언하면 예외처리를 하지 않고 자신을 호출한 메서드로 예외처리를 넘겨준다.
		 */

//ctrl1을 실행했을 때 메서드에 surround with try-catch가 옵션이 있는 경우는
		//사용하려는 메서드에 throws 구문이 있는 경우이다.

<실습>
회원들의 자료에서 성별 평균마일리지를 구하고 자신의 성별 평균마일리지보다 많은 마일리지를 보유한 회원의
      2005년 4~6월 구매현황을 조회하시오.
      ALIAS회원번호, 회원명, 구매금액합계
SELECT TBLA.MEM_ID AS "회원번호",
       TBLA.MEM_NAME AS "회원명",
       SUM(B.CART_QTY * C.PROD_PRICE) AS "구매금액 합계"
  FROM (SELECT C.MEM_ID,
               C.MEM_NAME,
               C.GEN,
               C.MEM_MILEAGE,
               ROUND(B.AMILE)
          FROM (SELECT A.GEN AS G1,
                       AVG(MEM_MILEAGE) AS AMILE
                  FROM (SELECT MEM_ID, MEM_NAME,
                               CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN '남'
                                    WHEN SUBSTR(MEM_REGNO2,1,1) IN('2','4') THEN '여'
                               END AS GEN,
                               MEM_MILEAGE
                          FROM MEMBER) A
                 GROUP BY A.GEN) B,
               (SELECT MEM_ID, MEM_NAME,
                       CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN '남'
                            WHEN SUBSTR(MEM_REGNO2,1,1) IN('2','4') THEN '여'
                       END AS GEN,
                       MEM_MILEAGE
                  FROM MEMBER) C
         WHERE C.GEN = B.G1
               AND C.MEM_MILEAGE >= B.AMILE
         ORDER BY 3, 4) TBLA,
       CART B, PROD C
 WHERE TBLA.MEM_ID = B.CART_MEMBER
       AND B.CART_PROD = C.PROD_ID
       AND SUBSTR(B.CART_NO,1,6) BETWEEN '200504' AND '200506'
 GROUP BY TBLA.MEM_ID, TBLA.MEM_NAME
 ORDER BY 1;

CREATE OR REPLACE VIEW V_MEM01 AS
          SELECT MEM_ID, MEM_NAME,
                       CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN '남'
                            WHEN SUBSTR(MEM_REGNO2,1,1) IN('2','4') THEN '여'
                       END AS GEN,
                       MEM_MILEAGE
                  FROM MEMBER;

SELECT TBLA.MEM_ID AS "회원번호",
       TBLA.MEM_NAME AS "회원명",
       SUM(B.CART_QTY * C.PROD_PRICE) AS "구매금액 합계"
  FROM (SELECT C.MEM_ID,
               C.MEM_NAME,
               C.GEN,
               C.MEM_MILEAGE,
               ROUND(B.AMILE)
          FROM (SELECT A.GEN AS G1,
                       AVG(MEM_MILEAGE) AS AMILE
                  FROM V_MEM01 A
                 GROUP BY A.GEN) B,
               V_MEM01 C
         WHERE C.GEN = B.G1
               AND C.MEM_MILEAGE >= B.AMILE
         ORDER BY 3, 4) TBLA,
       CART B, PROD C
 WHERE TBLA.MEM_ID = B.CART_MEMBER
       AND B.CART_PROD = C.PROD_ID
       AND SUBSTR(B.CART_NO,1,6) BETWEEN '200504' AND '200506'
 GROUP BY TBLA.MEM_ID, TBLA.MEM_NAME
 ORDER BY 1;

VIEW는 항상 원본과 참조무결성 관계를 만족한다(원본이 바뀌면 그 원본을 참조하는 뷰의 데이터는 자동으로 업데이트된다)
VIEW를 수정하거나 삭제하면 원본 테이블이 수정되거나 삭제된다
->이는 우리가 원하는 결과가 아니므로 WITH READ ONLY 나 WITH CHECK ONLY등의 예약어를 통해 뷰에서의 데이터 변경이
원본 테이블의 변경을 가져오지 못하도록 설정 할 수 있다.

이미 만들어진 VIEW는 READ ONLY 옵션을 부여할 수 없다!!!

집합연산 : 합집합은 UNION 교집합은 INTERSECT 차집합은 MINUS / 실무에서 굉장히 많이 쓴다.

사용예)사원테이블에서 'Seattle'에 근무하는 사원과 'IT'부서에 근무하는 사원의
      사원번호, 사원명, 부서명, 직무명을 조회하시오

(1)'Seattle'에 근무하는 사원의 사원번호, 사원명, 소재지, 부서명, 직무명
SELECT A.EMPLOYEE_ID AS "사원번호",
       A.EMP_NAME AS "사원명",
       C.CITY AS "소재지",
       B.DEPARTMENT_NAME AS "부서명",
       D.JOB_TITLE AS "직무명"
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B, HR.LOCATIONS C, HR.JOBS D
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND B.LOCATION_ID = C.LOCATION_ID
       AND A.JOB_ID = D.JOB_ID
       AND C.CITY = 'Seattle';
(2)'Administration'부서에 근무하는 사원의 사원번호, 사원명, 소재지, 부서명, 직무명
SELECT A.EMPLOYEE_ID AS "사원번호",
       A.EMP_NAME AS "사원명",
       D.CITY AS "소재지",
       B.DEPARTMENT_NAME AS "부서명",
       C.JOB_ID AS "직무명"
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B, HR.JOBS C, HR.LOCATIONS D
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND A.JOB_ID = C.JOB_ID
       AND B.LOCATION_ID = D.LOCATION_ID
       AND B.DEPARTMENT_NAME = 'Administration';

(결합);
SELECT A.EMPLOYEE_ID AS "사원번호",
       A.EMP_NAME AS "사원명",
       C.CITY AS "소재지",
       B.DEPARTMENT_NAME AS "부서명",
       D.JOB_TITLE AS "직무명"
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B, HR.LOCATIONS C, HR.JOBS D
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND B.LOCATION_ID = C.LOCATION_ID
       AND A.JOB_ID = D.JOB_ID
       AND C.CITY = 'Seattle'
UNION
--UNION ALL : 2개의 중복을 그대로 출력하여 20개의 행 출력
SELECT A.EMPLOYEE_ID,
       A.EMP_NAME,
       D.CITY,
       B.DEPARTMENT_NAME,
       C.JOB_TITLE
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B, HR.JOBS C, HR.LOCATIONS D
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND A.JOB_ID = C.JOB_ID
       AND B.LOCATION_ID = D.LOCATION_ID
       AND B.DEPARTMENT_NAME = 'Accounting'
 ORDER BY 1;

사용예)회원테이블에서 마일리지가 3000이상인 회원과 직업이 공무원인 회원의 
      회원번호, 회원명, 주소, 마일리지를 조회하시오

SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_ADD1 || ' ' || MEM_ADD2 AS "주소",
       MEM_MILEAGE AS "마일리지"
  FROM MEMBER
 WHERE MEM_MILEAGE >= 3000
       OR MEM_JOB = '공무원'

SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_ADD1 || ' ' || MEM_ADD2 AS "주소",
       MEM_MILEAGE AS "마일리지"
  FROM MEMBER
 WHERE MEM_MILEAGE >= 3000
UNION       
SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_ADD1 || ' ' || MEM_ADD2 AS "주소",
--       TO_NUMBER(MEM_REGNO1) AS "주민번호1"
       MEM_MILEAGE AS "마일리지"
  FROM MEMBER
 WHERE MEM_JOB = '공무원'
 
UNION은 각각의 컬럼에 대하여 UNION이 실행된다.

사용예)회원테이블에서 마일리지가 2000이상인 회원과 직업이 주부인 회원의 
      회원번호, 회원명, 주소, 마일리지를 조회하시오
SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_ADD1 || ' ' || MEM_ADD2 AS "주소",
       MEM_MILEAGE AS "마일리지"
  FROM MEMBER
 WHERE MEM_MILEAGE >= 2000
UNION ALL
--UNIION
SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_ADD1 || ' ' || MEM_ADD2 AS "주소",
       MEM_MILEAGE AS "마일리지"
  FROM MEMBER
 WHERE MEM_JOB = '주부'

사용예)2005년 4월과 7월에 팔린 상품정보를 조회하시오
      ALIAS 상품코드, 상품명, 판매가, 거래처명

SELECT DISTINCT B.PROD_ID AS 상품코드,
       B.PROD_NAME AS 상품명,
       B.PROD_PRICE AS 판매가,
       C.BUYER_NAME AS 거래처명
  FROM CART A, PROD B, BUYER C
 WHERE A.CART_PROD = B.PROD_ID
       AND B.PROD_BUYER = C.BUYER_ID
       AND SUBSTR(A.CART_NO,1,6) IN('200504','200507')
 ORDER BY 1;
       
SELECT DISTINCT B.PROD_ID AS 상품코드,
       B.PROD_NAME AS 상품명,
       B.PROD_PRICE AS 판매가,
       C.BUYER_NAME AS 거래처명
  FROM CART A, PROD B, BUYER C
 WHERE A.CART_PROD = B.PROD_ID
       AND B.PROD_BUYER = C.BUYER_ID
       AND A.CART_NO LIKE '200504%'
UNION
SELECT DISTINCT B.PROD_ID AS 상품코드,
       B.PROD_NAME AS 상품명,
       B.PROD_PRICE AS 판매가,
       C.BUYER_NAME AS 거래처명
  FROM CART A, PROD B, BUYER C
 WHERE A.CART_PROD = B.PROD_ID
       AND B.PROD_BUYER = C.BUYER_ID
       AND A.CART_NO LIKE '200507%'
 ORDER BY 1;

사용예)2005년 4월에 판매된 상품 중 7월에도 팔린 상품정보를 조회하시오
      ALIAS 상품코드, 상품명, 판매가, 거래처명
SELECT DISTINCT B.PROD_ID AS 상품코드,
       B.PROD_NAME AS 상품명,
       B.PROD_PRICE AS 판매가,
       C.BUYER_NAME AS 거래처명
  FROM CART A, PROD B, BUYER C
 WHERE A.CART_PROD = B.PROD_ID
       AND B.PROD_BUYER = C.BUYER_ID
       AND A.CART_NO LIKE '200504%'
INTERSECT
SELECT DISTINCT B.PROD_ID AS 상품코드,
       B.PROD_NAME AS 상품명,
       B.PROD_PRICE AS 판매가,
       C.BUYER_NAME AS 거래처명
  FROM CART A, PROD B, BUYER C
 WHERE A.CART_PROD = B.PROD_ID
       AND B.PROD_BUYER = C.BUYER_ID
       AND A.CART_NO LIKE '200507%'
 ORDER BY 1;

DELETE CART
WHERE CART_NO IN (SELECT CART_NO
  FROM CART
 WHERE CART_MEMBER = 'p001'
       AND SUBSTR(CART_NO, 1, 6) = '200505')

DELETE CART C
 WHERE C.CART_MEMBER = 'p001'
       AND SUBSTR(C.CART_NO,1,6) = '200505'
       
DELETE CART A
WHERE EXISTS (SELECT CART_MEMBER
  FROM CART B
 WHERE UPPER(CART_PROD) = 'P302000001'
       AND SUBSTR(CART_NO,1,6) = '200506'
       AND CART_QTY >= 5
       AND A.CART_NO = B.CART_NO
       AND A.CART_PROD = B.CART_PROD)

DELETE CART A
 WHERE EXISTS (SELECT 1
                 FROM PROD
                WHERE A.CART_PROD = PROD_ID
                      AND A.CART_QTY * PROD_PRICE <= 50000
                      AND A.CART_NO LIKE '200504%');       

ROLLBACK;

사용예)부서명이 'Shipping'에 속한 사원 중 'Matthew Weiss'사원의 팀에 소속된 사원을 조회하시오
      사원번호, 사원명, 부서명, 입사일, 급여
SELECT B.EMPLOYEE_ID AS "사원번호",
       B.EMP_NAME AS "사원명",
       A.DEPARTMENT_NAME AS "부서명",
       B.HIRE_DATE AS "입사일",
       B.SALARY AS "급여"
  FROM HR.DEPARTMENTS A, HR.EMPLOYEES B,
       (SELECT MANAGER_ID AS MID
          FROM HR.EMPLOYEES
         WHERE EMP_NAME = 'Matthew Weiss') C
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND A.DEPARTMENT_NAME = 'Shipping'
       AND B.MANAGER_ID = C.MID;

SELECT B.EMPLOYEE_ID AS "사원번호",
       B.EMP_NAME AS "사원명",
       A.DEPARTMENT_NAME AS "부서명",
       B.HIRE_DATE AS "입사일",
       B.SALARY AS "급여"
  FROM HR.DEPARTMENTS A, HR.EMPLOYEES B,
       (SELECT B.MANAGER_ID AS MID,
               B.EMPLOYEE_ID AS EID
          FROM HR.EMPLOYEES A, HR.EMPLOYEES B
         WHERE A.EMP_NAME = 'Matthew Weiss'
               AND A.EMPLOYEE_ID = B.MANAGER_ID) C
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND A.DEPARTMENT_NAME = 'Shipping'
       AND B.EMPLOYEE_ID = C.EID
       AND B.MANAGER_ID = C.MID;
       
SELECT A.EMPLOYEE_ID AS "사원번호",
       A.EMP_NAME AS "사원명",
       B.DEPARTMENT_NAME AS "부서명",
       A.HIRE_DATE AS "입사일",
       A.SALARY AS "급여"
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND B.DEPARTMENT_NAME = 'Shipping'
INTERSECT
SELECT A.EMPLOYEE_ID AS "사원번호",
       A.EMP_NAME AS "사원명",
       B.DEPARTMENT_NAME AS "부서명",
       A.HIRE_DATE AS "입사일",
       A.SALARY AS "급여"
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
 WHERE A.EMP_NAME = 'Matthew Weiss'
       AND B.DEPARTMENT_NAME = 'Shipping'
       


CREATE OR REPLACE VIEW V_TEST AS
SELECT *
  FROM MEMBER
-- ORDER BY 1
UNION
SELECT *
  FROM MEMBER
WITH READ ONLY;

SELECT * FROM V_TEST;
DROP VIEW V_TEST;

=================================================================================


try{
			int result = 10 / 0;
			//정수는 0으로 나눌 때 예외가 발생됨
			System.out.println(result);
			
		}catch(ArithmeticException | IndexOutOfBoundsException e){
			e.printStackTrace();
		}catch(NullPointerException e){
		}catch(Exception e){
			//모든 예외는 Exception의 자식 클래스, 다형성을 이용하여 모든 예외를 처리한 예시
			e.printStackTrace();
		}
		System.out.println("abcd");

test1();
		System.out.println("Outside of test1");
private static void test1() {
		test2();
	}
private static void test2() {
//		System.out.println(10 / 0);
		/*try {
			new FileInputStream("");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}*/
		try {
			ScanUtil.nextInt();
			
		//} catch (NumberFormatException e) {
			//e.printStackTrace();
		} catch (NumberFormatException e) {
			e.printStackTrace();
			System.out.println("this");
		}
		System.out.println("Outside of TryCatch1");
	}
FileInputStream fis = null; //파일 읽기
		
		try {
			fis = new FileInputStream("d:/file.txt");
			//fileIO는 운영체제의 도움을 받아야 한다. 
			//운영체제의 도움을 받는 메소드는 반드시 사용후 close로 운영체제에게 빌려온 Stream을 반납해야 함
		} catch (FileNotFoundException e) {
			e.printStackTrace();
//		} catch (ArithmeticException e){
//			e.printStackTrace();
		} finally{
			try {
				fis.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		//자동 자원 반환
		try(FileOutputStream fos = new FileOutputStream("d:/file.txt")) {
			String str = "asdfAsdfaSdfasDfasdFASdfAsDfAsdFaSDfaSdFasDFaSDFAsDFASdFASDfASDF";
			byte[] bytes = str.getBytes();
			
			for(int i = 0; i < bytes.length; i++){
				fos.write(bytes[i]);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}

try {
			method();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//ctrl1을 실행했을 때 메서드에 surround with try-catch가 옵션이 있는 경우는
		//사용하려는 메서드에 throws 구문이 있는 경우이다.
	}

	private static void method() throws IOException {
		throw new IOException();
	}

<TMI>