2021.07.19

<이론>
  2. AVG(expr)
   - 'expr'로 정의된 컬럼이나 수식의 값에 대한 산술평균 값을 반환

  3. COUNT(column명|*)
   - 그룹내의 행의 수(자료의 수)를 반환
   - 외부조인연산에 사용되는 경우 '*'를 사용하면 부정확한 결과를 반환하기 때문에 해당 테이블의 컬럼명을 기술해야 함
   
외부조인에서는 조건에 맞지 않는 데이터까지 세는 방법으로 작동하기 때문에 자신이 의도한 바와 같은지 확인해야 한다.


<실습>
문제] 사원테이블에서 근무국가별 급여합계를 구하시오.
    SELECT D.COUNTRY_ID                     AS  "근무국가코드",
           D.COUNTRY_NAME                   AS  "국가명",
           COUNT(*)                         AS  "사원수",
           TO_CHAR(SUM(A.SALARY),'999,999') AS  "급여합계"
      FROM HR.EMPLOYEES A, HR.DEPARTMENTS B, HR.LOCATIONS C, HR.COUNTRIES D
     WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
       AND B.LOCATION_ID = C.LOCATION_ID
       AND C.COUNTRY_ID = D.COUNTRY_ID
     GROUP BY D.COUNTRY_ID, D.COUNTRY_NAME
     ORDER BY 3 DESC;

사용예)사원테이블에서 각 부서별 보너스 합계를 구하시오
      출력은 부서코드, 부서명, 보너스 합계이고, 보너스는 영업실적(COMMISION_PCT)과
      급여를 곱한 결과의 30%를 지급한다.

UPDATE HR.EMPLOYEES
   SET COMMISSION_PCT = 0.2
 WHERE EMPLOYEE_ID = 107;
 
 COMMIT;
      
    SELECT A.DEPARTMENT_ID                                  AS  "부서코드",
           B.DEPARTMENT_NAME                                AS  "부서명",
           SUM(A.SALARY * NVL(A.COMMISSION_PCT, 1) * 0.3)    AS  "보너스 합계"
      FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
     WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
     GROUP BY A.DEPARTMENT_ID, B.DEPARTMENT_NAME
     ORDER BY 1;

사용예)모든 회원들의 평균 마일리지를 조회하시오

    SELECT ROUND(AVG(MEM_MILEAGE))     "평균 마일리지"
      FROM MEMBER;

사용예)모든 여성회원들의 평균 마일리지를 조회하시오

    SELECT ROUND(AVG(MEM_MILEAGE))     "여성 평균 마일리지"
      FROM MEMBER
     WHERE SUBSTR(MEM_REGNO2,1,1) IN('2', '4');

사용예)회원들의 성별 평균 마일리지를 조회하시오

    SELECT CASE WHEN SUBSTR(MEM_REGNO2,1,1) = '2'
                  OR SUBSTR(MEM_REGNO2,1,1) = '4' THEN '여성회원'
                ELSE
                     '남성회원' END AS     "구분",
           ROUND(AVG(MEM_MILEAGE))  AS  "평균마일리지"
      FROM MEMBER
     GROUP BY CASE WHEN SUBSTR(MEM_REGNO2,1,1) = '2'
                  OR SUBSTR(MEM_REGNO2,1,1) = '4' THEN '여성회원'
                ELSE
                     '남성회원' END;
    
    SELECT CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('2', '4') THEN '여성회원'
                   ELSE
                     '남성회원' END AS     "구분",
           ROUND(AVG(MEM_MILEAGE))  AS  "평균마일리지"
      FROM MEMBER
     GROUP BY CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('2', '4') THEN '여성회원'
                   ELSE
                     '남성회원' END;

사용예)사원테이블에서 각 부서별 평균급여를 조회하시오.

    SELECT --0B.DEPARTMENT_ID          AS  "부서코드",
    --       B.DEPARTMENT_NAME        AS  "부서명",
           ROUND(AVG(A.SALARY))     AS  "평균급여"
      FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
     WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;
     --GROUP BY B.DEPARTMENT_NAME, B.DEPARTMENT_ID
     
     SELECT *
      FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
     WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
     ORDER BY A.EMPLOYEE_ID;
     --GROUP BY B.DEPARTMENT_NAME, B.DEPARTMENT_ID
 
사용예)2005년 1~6월 월별 평균매입액을 조회하시오.

    SELECT EXTRACT(MONTH FROM BUY_DATE) || '월'                                 AS  "월",
           TO_CHAR(ROUND(AVG(BUY_COST * BUY_QTY)),'999,999,999L')        AS  "평균매입액"
      FROM BUYPROD
     WHERE BUY_DATE BETWEEN TO_DATE('20050101') AND LAST_DAY(TO_DATE('20050601'))
     GROUP BY EXTRACT(MONTH FROM BUY_DATE)
     ORDER BY 1;

사용예)2005년 1~6월 월별 매입건수, 평균매입액과 매입액합을 조회하되 매입액이 400만원 이상인 월만 조회하시오.
    SELECT COUNT(*)                                                        AS  "매입건수",
           EXTRACT(MONTH FROM BUY_DATE) || '월'                                 AS  "월",
           TO_CHAR(ROUND(AVG(BUY_COST * BUY_QTY)),'999,999,999')         AS  "평균매입액",
           TO_CHAR(SUM(BUY_COST * BUY_QTY),'999,999,999')                AS "매입액 합계"
      FROM BUYPROD
     WHERE BUY_DATE BETWEEN TO_DATE('20050101') AND LAST_DAY(TO_DATE('20050601'))
     GROUP BY EXTRACT(MONTH FROM BUY_DATE)
    HAVING AVG(BUY_COST * BUY_QTY) >= 4000000
     ORDER BY 1;
     
HAVING이 사용되는 경우 : 집계함수에 조건이 부여될 때 사용

사용예)2005년 회원별 평균매입금액을 조회하시오.

    SELECT  B.MEM_ID AS "회원번호",
            B.MEM_NAME  AS  "회원명",
            ROUND(AVG(A.CART_QTY * C.PROD_SALE)) AS "평균매입금액"
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO,1,4) = '2005'
     GROUP BY B.MEM_ID, B.MEM_NAME
     ORDER BY 1;
     
     SELECT  *
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID;
    --       AND SUBSTR(A.CART_NO,1,4) = '2005'
    -- GROUP BY B.MEM_ID, B.MEM_NAME;
 

사용예)2005년 회원별 구매건수을 조회하시오.
    SELECT  B.MEM_ID AS "회원번호",
            B.MEM_NAME  AS  "회원명",
            COUNT(*) AS "구매건수"
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO,1,4) = '2005'
     GROUP BY B.MEM_ID, B.MEM_NAME
     ORDER BY 1;

사용예)2005년 분류별 평균구매금액을 조회하시오.
    SELECT  B.LPROD_ID                              AS  "분류번호",
            B.LPROD_NM                              AS  "분류명",
            ROUND(AVG(A.CART_QTY * C.PROD_SALE))    AS  "평균판매금액"
      FROM CART A, LPROD B, PROD C
     WHERE B.LPROD_GU = C.PROD_LGU
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO,1,4) = '2005'
     GROUP BY B.LPROD_ID, B.LPROD_NM
     ORDER BY 1;


사용예)2005년 회원의 연령대별 평균구매금액을 조회하시오.

    --SELECT EXTRACT(YEAR FROM B.MEM_BIR)    AS  "출생년도",
    --       ROUND(AVG(A.CART_QTY * C.PROD_SALE)) AS "평균구매금액"
    --  FROM CART A, MEMBER B, PROD C
    -- WHERE A.CART_MEMBER = B.MEM_ID
    --       AND A.CART_PROD = C.PROD_ID
    --       AND SUBSTR(A.CART_NO, 1, 4) = '2005'
    -- GROUP BY EXTRACT(YEAR FROM B.MEM_BIR)
    -- ORDER BY 1;
    
    --SELECT WIDTH_BUCKET(EXTRACT(YEAR FROM B.MEM_BIR),1960,2010,5)    AS  "연령대",
    --       ROUND(AVG(A.CART_QTY * C.PROD_SALE)) AS "평균구매금액"
    --  FROM CART A, MEMBER B, PROD C
    -- WHERE A.CART_MEMBER = B.MEM_ID
    --       AND A.CART_PROD = C.PROD_ID
    --       AND SUBSTR(A.CART_NO, 1, 4) = '2005'
    -- GROUP BY EXTRACT(YEAR FROM B.MEM_BIR)
    -- ORDER BY 1;
    
    SELECT (7 - WIDTH_BUCKET(EXTRACT(YEAR FROM B.MEM_BIR),1960,2010,5)) * 10 || '대'    AS  "연령대",
           ROUND(AVG(A.CART_QTY * C.PROD_SALE)) AS "평균구매금액"
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO, 1, 4) = '2005'
     GROUP BY WIDTH_BUCKET(EXTRACT(YEAR FROM B.MEM_BIR),1960,2010,5)
     ORDER BY 1;
    
    SELECT (WIDTH_BUCKET(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM B.MEM_BIR),10,100,10)-1) * 10  || '대'    AS  "연령대",
           COUNT(*)                                                                                         AS  "구매건수",
           TO_CHAR(ROUND(AVG(A.CART_QTY * C.PROD_SALE)), '9,999,999')                                       AS  "평균구매금액"
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO, 1, 4) = '2005'
     GROUP BY (WIDTH_BUCKET(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM B.MEM_BIR),10,100,10)-1) 
     ORDER BY 1;

SELECT TRUNC((EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM B.MEM_BIR))/10) * 10 || '대'    AS  "연령대",
           COUNT(*)                                                                                         AS  "구매건수",
           TO_CHAR(ROUND(AVG(A.CART_QTY * C.PROD_SALE)), '9,999,999')                                       AS  "평균구매금액"
      FROM CART A, MEMBER B, PROD C
     WHERE A.CART_MEMBER = B.MEM_ID
           AND A.CART_PROD = C.PROD_ID
           AND SUBSTR(A.CART_NO, 1, 4) = '2005'
     GROUP BY TRUNC((EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM B.MEM_BIR))/10) * 10
     ORDER BY 1;

숙제)사원들 중 자기가 속한 부서의 평균 급여보다 적은 급여를 받는 사원정보를 조회하시오.
    Alias는 사원번호, 사원명, 부서번호, 부서명, 급여, 부서평균급여
    
    제출일자 : 7월 31일까지
    제출방법 : 교사용 PC 공유폴더에 전송(SEM-PC D:\공유폴더\Oracle\homework1
    문서타입 : 메모장에서 저장된 TEXT문서
    문서명 : 본인이름_0731.TXT

 SELECT B.EMPLOYEE_ID               AS  "사원번호",
        B.EMP_NAME                  AS  "사원명",
        A.DEPTID                    AS  "부서번호",
        A.DEPTNAME                  AS  "부서명",
        B.SALARY                    AS  "급여",
        A.DEPTAVG                   AS  "부서평균급여"
   FROM (SELECT B.DEPARTMENT_ID       AS  DEPTID,
               B.DEPARTMENT_NAME      AS  DEPTNAME,
               ROUND(AVG(A.SALARY))   AS  DEPTAVG
          FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
         WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
         GROUP BY B.DEPARTMENT_ID, B.DEPARTMENT_NAME) A,
         HR.EMPLOYEES B
  WHERE A.DEPTID = B.DEPARTMENT_ID
        AND B.SALARY < A.DEPTAVG
  ORDER BY 3;
  

SELECT B.DEPARTMENT_ID       AS  "부서번호",
       B.DEPARTMENT_NAME       AS  "부서명"
  FROM HR.EMPLOYEES A, HR.DEPARTMENTS B
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

사용예)사원테이블에서 각 부서별 사원수를 조회하시오
    
    SELECT DEPARTMENT_ID    AS "부서코드",
           COUNT(*)         AS "사원수1",
           COUNT(LAST_NAME) AS "사원수2"
      FROM HR.EMPLOYEES
     GROUP BY DEPARTMENT_ID
     ORDER BY 1;
    
    SELECT DEPARTMENT_ID    AS "부서코드",
           COUNT(*)         AS "사원수1",
           COUNT(LAST_NAME) AS "사원수2"
      FROM HR.EMPLOYEES
     GROUP BY ROLLUP(DEPARTMENT_ID)
     ORDER BY 1;

사용예)2005년 5월 분류별 판매건수를 조회하시오

    SELECT B.PROD_LGU               AS  "분류코드",
           C.LPROD_NM               AS  "분류명",
           COUNT(*)                 AS  "판매건수"
      FROM CART A, PROD B, LPROD C
     WHERE A.CART_PROD = B.PROD_ID 
           AND B.PROD_LGU = C.LPROD_GU
           AND SUBSTR(A.CART_NO,1,6) = '200505'
     GROUP BY B.PROD_LGU, C.LPROD_NM;
     
사용예)2005년 5~6월 회원별 매입회수를 조회하시오
    Alias는 회원번호, 매입회수
    
SELECT  A.MEMBERID                  AS  "회원번호",
        COUNT(*)                    AS  "매입회수"
FROM    (SELECT CART_MEMBER          AS  MEMBERID,
                CART_NO              AS  CARTNO
           FROM CART
          WHERE SUBSTR(CART_NO, 1, 6) IN('200505', '200506')
          GROUP BY CART_MEMBER, CART_NO
          ORDER BY 1)    A
GROUP BY A.MEMBERID
ORDER BY 1;

SELECT  A.MEMBERID                  AS  "회원번호",
        COUNT(*)                    AS  "매입회수"
FROM    (SELECT DISTINCT CART_NO                    AS  CARTNO,
                CART_MEMBER                         AS  MEMBERID
           FROM CART
          WHERE SUBSTR(CART_NO, 1, 6) IN('200505', '200506'))    A
GROUP BY A.MEMBERID
ORDER BY 1;
     
--  DISTINCT에 영향을 받는 컬럼값들이 같은 행들은 한번만 출력된다.

    SELECT CART_MEMBER          AS  "회원번호"
      FROM CART
     WHERE SUBSTR(CART_NO, 1, 6) IN('200505', '200506')
     ORDER BY 1;

===================================================================================

package e_oop;

import java.util.Scanner;

public class UserDefinedDataType {

	public static void main(String[] args) {
		/*
		 * 사용자 정의 데이터 타입
		 * - 데이터의 최종 진화 형태이다.(기본형 -> 배열 -> 클라스)
		 * - 서로 다른 타입의 데이터를 묶어서 사용하는 것이다.
		 * - 변수와 메서드로 구성할 수 있다.
		 */
		
		//기본형(1개의 변수에 1개의 데이터만 저장)
		int kor;
		int eng;
		int math;
		int sum;
		double avg;
		
		//배열(같은 타입의 데이터를 여러개 저장)
		
		int[] scores;
		int sum2;
		double avg2;
		
		//클래스(관련된 변수를 다 묶어서 저장)
		//Scanner s = new Scanner(System.in);
		Student student = new Student();	//객체생성(인스턴스화)
		
		student.kor = 80;
		student.eng = 90;
		student.math = 75;
		student.sum = student.kor +	student.eng + student.math;
		student.avg = student.sum / 3.0;
		student.name = "홍길동";
		student.rank = 1;
		
		System.out.println(student.name);
		System.out.println(student.avg);
		
	}

}

class Student{
	int kor;
	int eng;
	int math;
	int sum;
	double avg;
	String name;
	int rank;
}



package e_oop.score;			//	e_oop패키지의 하위 패키지!

public class Student {
	int kor;
	int eng;
	int math;
	int sum;
	double avg;
	String name;
	int rank;
}


package e_oop.score;

public class Score {

	public static void main(String[] args) {
		/*
		 * 403호 모두의 국어, 영어, 수학, 사회, 과학, Oracle, Java 점수를
		 * 0~100까지 랜덤으로 생성해 주시고, 아래와 같이 출력해주세요.
		 * 
		 * 이름		국어		영어		수학		사회		과학		Oracle	Java	합계		평균		석차
		 * 홍길동		90		90		90		90		90		90		90		630		90.00	1
		 * 
		 * 
		 * 과목합계	450		450		450		450		450		450		450
		 * 과목평균	90.00	90.00	90.00	90.00	90.00	90.00	90.00
		 */
		String[] studentNames = {"이단비","김노을","정현욱","박소현","김수진","이희현","강건","이민영","하기재",
								"이윤우","김미희","김혜윤","신승철","이광효","김진혁","마창수","양기욱","이동근",
								"석기현","류인성","이미정","임나리","송민섭","김지윤","조명석"};
		
		Student[] students = new Student[studentNames.length];		//참조형 타입의 기본값인 null이 들어간다., 25개의 null생성 
		for(int i = 0; i < studentNames.length; i++){
			Student student = new Student();			//int, double타입은 모두 0으로, String 타입인 name 만 null로 초기화 된 Student 클래스 인스턴스 생성
			
			student.name = studentNames[i];
			student.rank = 1;
			student.kor = (int)(Math.random() * 101);
			student.eng = (int)(Math.random() * 101);
			student.math = (int)(Math.random() * 101);
			student.sum = student.kor + student.eng + student.math;
			student.avg = Math.round(student.sum / 3.0 * 100) / 100.0;
			
			students[i] = student;
		}
		
		int korSum = 0;
		int engSum = 0;
		int mathSum = 0;
		double korAvg = 0;
		double engAvg = 0;
		double mathAvg = 0;
		
		for(int i = 0; i < studentNames.length; i++)		korSum += students[i].kor;
		korAvg = Math.round(korSum / 3.0 * 100) / 100.0;
		for(int i = 0; i < studentNames.length; i++)		engSum += students[i].eng;
		engAvg = Math.round(engSum / 3.0 * 100) / 100.0;
		for(int i = 0; i < studentNames.length; i++)		mathSum += students[i].math;
		mathAvg = Math.round(mathSum / 3.0 * 100) / 100.0;
		
		for(int i = 0; i < studentNames.length; i++){
			for(int j = 0; j < studentNames.length; j++){
				if(students[i].sum < students[j].sum)		students[i].rank++;
			}
		}
		
//		{
//			int j = 0;
//			for(int i = 1; i < studentNames.length; i++){
//				Student insert = new Student();
//				insert = students[i];
//				for(j = i - 1; j >= 0; j--){
//					if(insert.sum > students[j].sum){
//						students[j + 1] = students[j]; 
//					}else			break;
//				}
//				students[j + 1] = insert;
//			}
//		}

		{
			int j = 0;
			for(int i = 1; i < studentNames.length; i++){
				Student insert = new Student();
				insert = students[i];
				for(j = i - 1; j >= 0; j--){
					if(insert.rank < students[j].rank){
						students[j + 1] = students[j]; 
					}else			break;
				}
				students[j + 1] = insert;
			}
		}

		System.out.println("이름\t국어\t영어\t수학\t합계\t평균\t석차");
		for(int i = 0; i < studentNames.length; i++){
			System.out.println(students[i].name + "\t" + students[i].kor + "\t"
								+ students[i].eng + "\t" + students[i].math + "\t"
								+ students[i].sum + "\t" + students[i].avg + "\t"
								+ students[i].rank);
		}
		System.out.println("과목합계\t" + korSum + "\t" + engSum + "\t" + mathSum);
		System.out.println("과목합계\t" + korAvg + "\t" + engAvg + "\t" + mathAvg);

	}

}

<TMI>

