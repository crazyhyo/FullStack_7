package com.spring.compass.service;

import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.spring.compass.command.DgnssListSearchCommand;
import com.spring.compass.command.DgnssListVO;
import com.spring.compass.command.InptntListSearchCommand;
import com.spring.compass.command.InptntListVO;
import com.spring.compass.command.PageMaker;
import com.spring.compass.command.ReqInptntListCommand;
import com.spring.compass.command.SckbdreqLtctListCommand;
import com.spring.compass.dao.HsptDAO;
import com.spring.compass.dao.LtctDAO;
import com.spring.compass.dao.PbhtDAO;
import com.spring.compass.dao.PstiDAO;
import com.spring.compass.util.ErrorCodeUtil;
import com.spring.compass.vo.DgnssResultVO;
import com.spring.compass.vo.HsptVO;
import com.spring.compass.vo.InptntVO;
import com.spring.compass.vo.IsoptntVO;
import com.spring.compass.vo.LtctVO;
import com.spring.compass.vo.ManageVO;
import com.spring.compass.vo.PbhtVO;
import com.spring.compass.vo.PstiVO;
import com.spring.compass.vo.SckbdreqVO;
import com.spring.compass.vo.SlfptntVO;
import com.spring.compass.vo.SmplResultVO;
import com.spring.compass.vo.SmplVO;

public class HsptServiceImplLKH extends HsptServiceImpl implements HsptSerivceLKH{
	
	private static final Logger LOGGER = LoggerFactory.getLogger(HsptServiceImplLKH.class);	
	
	private PbhtDAO pbhtDAO;
	private LtctDAO ltctDAO;
	private HsptDAO hsptDAO;
	
	private PstiDAO pstiDAO;
	
	public void setPstiDAO(PstiDAO pstiDAO) {
		this.pstiDAO = pstiDAO;
	}
	
	public void setHsptDAO(HsptDAO hsptDAO) {
		this.hsptDAO = hsptDAO;
	}
	public void setPbhtDAO(PbhtDAO pbhtDAO) {
		this.pbhtDAO = pbhtDAO;
	}
	public void setLtctDAO(LtctDAO ltctDAO) {
		this.ltctDAO = ltctDAO;
	}
	@Override
	public Map<String, Object> getDgnssList(DgnssListSearchCommand cri) throws SQLException {
		Map<String, Object> dataMap = null;
		
		PageMaker pageMaker = null;
		
		pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = hsptDAO.selectDgnssListCount(cri);
		
		LOGGER.debug("{}",totalCount);
		
		pageMaker.setTotalCount(totalCount);
		
		List<DgnssListVO> dgnssList = hsptDAO.selectDgnssList(cri);
		
		dataMap = new HashMap<String, Object>();
		
		LOGGER.debug("{}",pageMaker);
		
		for(int i = 0; i < dgnssList.size(); i++) {
			
			DgnssListVO dgnss = dgnssList.get(i);
			if(dgnss.getType().equals("A")) {
				String pbhtNo = dgnss.getChildNo();
				PbhtVO pbht = pbhtDAO.selectPbhtByPbhtNo(pbhtNo);
				dgnss.setPbhtNm(pbht.getInstNm());
				
				dgnss.setPbht(true);
				
			}else if(dgnss.getType().equals("B")) {
				String ltctNo = dgnss.getChildNo();
				LtctVO ltct = ltctDAO.selectLtctByLtctNo(ltctNo);
				dgnss.setLtctNm(ltct.getInstNm());
				dgnss.setPbht(false);
			}
			
			dgnssList.set(i, dgnss);
		}
		for(DgnssListVO dgnss : dgnssList) {
			LOGGER.debug("{}",dgnss);
		}
		dataMap.put("dgnssList", dgnssList);
		dataMap.put("pageMaker", pageMaker);
		return dataMap;
	}
	@Override
	public Map<String, Object> getReqInptntList(InptntListSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = null;
		
		PageMaker pageMaker = null;
		
		pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = hsptDAO.selectReqInptntListCount(cri);
		
		LOGGER.debug("{}",totalCount);
		
		pageMaker.setTotalCount(totalCount);
		
		List<ReqInptntListCommand> reqInptntList = hsptDAO.selectReqInptntList(cri);
		dataMap = new HashMap<String, Object>();
		
		for(ReqInptntListCommand reqInptnt : reqInptntList) {
			LOGGER.debug("{}",reqInptnt);
		}
		
		dataMap.put("reqInptntList", reqInptntList);
		dataMap.put("pageMaker", pageMaker);
		return dataMap;
	}
	@Override
	public Map<String, Object> getInptntList(InptntListSearchCommand cri) throws Exception {

		Map<String, Object> dataMap = null;

		PageMaker pageMaker = null;

		pageMaker = new PageMaker();
		pageMaker.setCri(cri);


		LOGGER.debug(String.valueOf(hsptDAO == null));


		int totalCount = hsptDAO.selectInptntListCount(cri);

		LOGGER.debug("{}",totalCount);

		pageMaker.setTotalCount(totalCount);

		List<InptntListVO> inptntList = hsptDAO.selectInptntList(cri);

		dataMap = new HashMap<String, Object>();

		dataMap.put("inptntList", inptntList);
		dataMap.put("pageMaker", pageMaker);

		LOGGER.debug("{}",pageMaker);

		for(InptntListVO inptnt : inptntList) {
			LOGGER.debug("{}",inptnt);
		}

		return dataMap;
	}
	@Override
	public Map<String, Object> getSckbdreqHsptList(InptntListSearchCommand cri) throws Exception {

		Map<String, Object> dataMap = null;

		PageMaker pageMaker = null;

		pageMaker = new PageMaker();
		pageMaker.setCri(cri);

		int totalCount = hsptDAO.selectSckbdReqHsptListCount(cri);

		LOGGER.debug("{}",totalCount);

		pageMaker.setTotalCount(totalCount);

		List<ReqInptntListCommand> sckbdreqList = hsptDAO.selectSckbdReqHsptList(cri);

		dataMap = new HashMap<String, Object>();

		dataMap.put("sckbdreqList", sckbdreqList);
		dataMap.put("pageMaker", pageMaker);

		LOGGER.debug("{}",pageMaker);

		for(ReqInptntListCommand sckbdreq : sckbdreqList) {
			LOGGER.debug("{}",sckbdreq);
		}

		return dataMap;
	}
	@Override
	public Map<String, Object> getSckbdreqLtctList(InptntListSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = null;

		PageMaker pageMaker = null;

		pageMaker = new PageMaker();
		pageMaker.setCri(cri);

		int totalCount = hsptDAO.selectSckbdReqLtctListCount(cri);

		LOGGER.debug("{}",totalCount);

		pageMaker.setTotalCount(totalCount);

		List<SckbdreqLtctListCommand> sckbdreqList = hsptDAO.selectSckbdReqLtctList(cri);

		dataMap = new HashMap<String, Object>();

		dataMap.put("sckbdreqList", sckbdreqList);
		dataMap.put("pageMaker", pageMaker);

		LOGGER.debug("{}",pageMaker);

		for(SckbdreqLtctListCommand sckbdreq : sckbdreqList) {
			LOGGER.debug("{}",sckbdreq);
		}

		return dataMap;
	}
	
	@Override
	public HsptVO getHsptByHsptNo(String hsptNo) throws Exception {
		HsptVO hspt = hsptDAO.selectHsptByHsptNo(hsptNo);
		return hspt;
	}

	@Override
	public String registInptntByDgnss(DgnssResultVO dgnssResult, HsptVO hspt) throws Exception {
		// 보건소에서 요청한 신규환자를 진료하고 바로 입원시키는 메서드
		//-------------------------------------------------
		// insert	inptnt				|	#{inpntNo} #{hsptNo} #{manageNo}
		//			dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	manage				|	#{sttusCode} #{instNm} #{instNo} #{manageNo}
		//			dgnss				|	#{dgnssNo}
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String manageNo = dgnssResult.getManageNo();
		String dgnssNo = dgnssResult.getDgnssNo();
		
		LOGGER.debug("manageNo : {}, dgnssNo : {}", manageNo, dgnssNo);
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");
		
		// 4. 입원환자 등록 #{inptntNo} #{hsptNo} #{manageNo}
		String inptntNo = pstiDAO.selectInptntNextVal();
	    String hsptNo = hspt.getHsptNo();
		InptntVO inptnt = new InptntVO();
		
		inptnt.setInptntNo(inptntNo);
		inptnt.setHsptNo(hsptNo);
		inptnt.setManageNo(manageNo);
		
		LOGGER.debug("{}",inptnt);
		
		test = hsptDAO.insertInptnt(inptnt);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_05");
		
		
		// 5. manage 테이블 수정 #{sttusCode} #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A105");
		manage.setInstNm(hspt.getInstNm());
		manage.setInstNo(hspt.getInstNo());
		manage.setManageNo(manageNo);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registSckbdreqInptntByDgnss(DgnssResultVO dgnssResult, HsptVO loginHspt, String toHsptNo)
			throws Exception {
		// 보건소에서 요청한 신규환자를 진료하고 이원신청하는 메서드
		//-------------------------------------------------
		// insert	sckbdreq			|	#{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		//			dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	manage				|	#{sttusCode} #{instNm} #{instNo} #{manageNo}
		//			dgnss				|	#{dgnssNo}
		//			hspt				|	#{hsptNo}
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String manageNo = dgnssResult.getManageNo();
		String dgnssNo = dgnssResult.getDgnssNo();
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");
		
		// 4. 병상신청 등록 #{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		String sckbdreqNo = pstiDAO.selectSckbdreqNextVal();
		String type = "A";
		String childNo = toHsptNo;
	    String hsptNo = loginHspt.getHsptNo();
	    String requestCode = "M101";

	    SckbdreqVO sckbdreq = new SckbdreqVO();
	    sckbdreq.setSckbdreqNo(sckbdreqNo);
	    sckbdreq.setType(type);
	    sckbdreq.setChildNo(childNo);
	    sckbdreq.setHsptNo(hsptNo);
	    sckbdreq.setManageNo(manageNo);
	    sckbdreq.setRequestCode(requestCode);
	    
	    LOGGER.debug("{}",sckbdreq);
	    
		test = hsptDAO.insertSckbdreq(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_07");
		
		// 5. 이원대상 병원 잔여병상 수정
		test = hsptDAO.updateDecreaseRmndSckbdCntByHsptNo(toHsptNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		// 6. manage 테이블 수정  #{sttusCode} #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A110");
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		LOGGER.debug("{}",manage);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registSckbdreqIsoptntByDgnss(DgnssResultVO dgnssResult, HsptVO loginHspt, String toLtctNo)
			throws Exception {
		// 보건소에서 요청한 신규환자를 진료하고 입소신청하는 메서드
		//-------------------------------------------------
		// insert	sckbdreq			|	#{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		//			dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	manage				|	#{sttusCode} #{instNm} #{instNo} #{manageNo}
		//			dgnss				|	#{dgnssNo}
		//			ltct				|	#{ltctNo}
		//--------------------------------------------------	
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String manageNo = dgnssResult.getManageNo();
		String dgnssNo = dgnssResult.getDgnssNo();
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");
		
		// 4. 병상신청 등록 #{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		String sckbdreqNo = pstiDAO.selectSckbdreqNextVal();
		String type = "B";
		String childNo = toLtctNo;
	    String hsptNo = loginHspt.getHsptNo();
	    String requestCode = "M101";

	    SckbdreqVO sckbdreq = new SckbdreqVO();
	    sckbdreq.setSckbdreqNo(sckbdreqNo);
	    sckbdreq.setType(type);
	    sckbdreq.setChildNo(childNo);
	    sckbdreq.setHsptNo(hsptNo);
	    sckbdreq.setManageNo(manageNo);
	    sckbdreq.setRequestCode(requestCode);
	    
	    LOGGER.debug("{}",sckbdreq);
	    
		test = hsptDAO.insertSckbdreq(sckbdreq);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_07");
		
		// 5. 입소대상 생활치료센터 잔여병상 수정
		test = hsptDAO.updateDecreaseRmndSckbdCntByLtctNo(toLtctNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		// 6. manage 테이블 수정  #{sttusCode} #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A111");
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registSlfptntByDgnss(DgnssResultVO dgnssResult, HsptVO loginHspt) throws Exception {
		// 보건소에서 요청한 신규환자를 진료하고 자가격리처리하는 메서드
		//-------------------------------------------------
		// insert	slfptnt				|	#{slfptntNo} #{pbhtNo} #{manageNo}
		//			dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	manage				|	#{sttusCode} #{manageNo}
		//			dgnss				|	#{dgnssNo}
		//			hspt				|	#{hsptNo}		
		//--------------------------------------------------	
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String manageNo = dgnssResult.getManageNo();
		String dgnssNo = dgnssResult.getDgnssNo();
		SmplResultVO smplResult = pstiDAO.selectVSmplResultByManageNo(manageNo);
		String pbhtNo = smplResult.getPbhtNo();
		String hsptNo = loginHspt.getHsptNo();
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");
		
		// 4. 자가격리자 등록 #{slfptntNo} #{pbhtNo} #{manageNo}
		String slfptntNo = pstiDAO.selectSlfptntNextVal();
		SlfptntVO slfptnt = new SlfptntVO();
		slfptnt.setSlfptntNo(slfptntNo);
		slfptnt.setPbhtNo(pbhtNo);
		slfptnt.setManageNo(manageNo);
		
		test = hsptDAO.insertSlfptnt(slfptnt);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_09");

		// 5. 병원 잔여병상 수정 #{hsptNo}
	    test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(hsptNo);
	    if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
	    
		// 6. manage 테이블 수정 #{sttusCode} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A107");
		manage.setManageNo(manageNo);
		
		test = hsptDAO.updateManageChangeStatus(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registDgnssResultByIsoptnt(DgnssResultVO dgnssResult, HsptVO loginHspt) throws Exception {
		// 생활치료센터에서 요청한 환자를 진료하고 별도의 사후처리를 하지 않는 메서드
		//-------------------------------------------------
		// insert	dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	dgnss				|	#{dgnssNo}
		//			hspt				|	#{hsptNo}		
		//--------------------------------------------------	
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String dgnssNo = dgnssResult.getDgnssNo();
		String hsptNo = loginHspt.getHsptNo();
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");

		// 4. 병원 잔여병상 수정 #{hsptNo}
	    test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(hsptNo);
	    if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		return msg;
	}

	@Override
	public String registSckbdreqInptntByIsoptnt(DgnssResultVO dgnssResult, HsptVO loginHspt, String toHsptNo,
			String fromLtctNo) throws Exception {
		// 생활치료센터에서 요청한 환자를 진료하고 이원신청하는 메서드
		//-------------------------------------------------
		// insert	sckbdreq			|	#{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		//			dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	manage				|	#{sttusCode} #{instNm} #{instNo} #{manageNo}
		//			dgnss				|	#{dgnssNo}
		//			hspt				|	#{hsptNo}
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String manageNo = dgnssResult.getManageNo();
		String dgnssNo = dgnssResult.getDgnssNo();
		String hsptNo = loginHspt.getHsptNo();
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");
		
		// 4. 병상신청 등록 #{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		String sckbdreqNo = pstiDAO.selectSckbdreqNextVal();
		String type = "A";
		String childNo = toHsptNo;
	    String requestCode = "M103";

	    SckbdreqVO sckbdreq = new SckbdreqVO();
	    
	    sckbdreq.setSckbdreqNo(sckbdreqNo);
	    sckbdreq.setType(type);
	    sckbdreq.setChildNo(childNo);
	    sckbdreq.setHsptNo(hsptNo);
	    sckbdreq.setManageNo(manageNo);
	    sckbdreq.setRequestCode(requestCode);
	    
	    LOGGER.debug("{}",sckbdreq);
	    
	    test = hsptDAO.insertSckbdreq(sckbdreq);
	    if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_07");
	    
		// 5. 이원대상 병원 잔여병상 수정 #{hsptNo}
	    test = hsptDAO.updateDecreaseRmndSckbdCntByHsptNo(toHsptNo);
	    if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
	    
		// 6. manage 테이블 수정  #{sttusCode} #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A110");
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		LOGGER.debug("{}",manage);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registInptntByIsoptnt(DgnssResultVO dgnssResult, HsptVO loginHspt, String fromLtctNo)
			throws Exception {
		// 생활치료센터에서 진료요청한 환자를 진료하고 입원처리하는 메서드
		//-------------------------------------------------
		// insert	inptnt				|	#{inpntNo} #{hsptNo} #{manageNo}
		//			dgnss_result		|	#{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		// update	manage				|	#{sttusCode} #{instNm} #{instNo} #{manageNo}
		//			dgnss				|	#{dgnssNo}
		//			ltct				|	#{ltctNo}
		//			isoptnt				|	#{hsptlzCode} #{isoptntNo}
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전준비
		String manageNo = dgnssResult.getManageNo();
		String dgnssNo = dgnssResult.getDgnssNo();
		
		// 2. 진료 테이블 수정 #{dgnssNo}
		test = hsptDAO.updateDgnssCodeChkd(dgnssNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_03");
		
		// 3. 진료결과 등록 #{dgnssNo} #{dgnssResultCode} #{dgnssNote}
		test = hsptDAO.insertDgnssResult(dgnssResult);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_04");
		
		// 4. 입원환자 등록 #{inpntNo} #{hsptNo} #{manageNo}
		String inptntNo = pstiDAO.selectInptntNextVal();
	    String hsptNo = loginHspt.getHsptNo();
	    
		InptntVO inptnt = new InptntVO();
		
		inptnt.setInptntNo(inptntNo);
		inptnt.setHsptNo(hsptNo);
		inptnt.setManageNo(manageNo);
		
		LOGGER.debug("{}",inptnt);
		
		test = hsptDAO.insertInptnt(inptnt);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_05");
		
		// 5. 생활치료센터 잔여병상 수정 #{ltctNo}
		test = hsptDAO.updateIncreaseRmndSckbdCntByLtctNo(fromLtctNo);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		// 6. 입소자 상태 변경(퇴원처리) #{hsptlzCode} #{isoptntNo}
		String hsptlzCode = "E103";
		IsoptntVO isoptnt = pstiDAO.selectIsoptntByManageNo(manageNo);
		String isoptntNo = isoptnt.getIsoptntNo();
		
		isoptnt.setHsptlzCode(hsptlzCode);
		isoptnt.setIsoptntNo(isoptntNo);
		
		LOGGER.debug("{}",isoptnt);
		
		test = hsptDAO.updateIsoptntExit(isoptnt);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_10");
		
		// 7. manage 테이블 수정 #{sttusCode} #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A105");
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		LOGGER.debug("{}",manage);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registSmplByInptnt(String hsptNo, String pbhtNo, String manageNo) throws Exception {
		// 입원환자를 재검신청하는 메서드
		//-------------------------------------------------
		// insert	smpl				|	#{smplNo} #{manageNo} #{pbhtNo} #{instNo}
		//--------------------------------------------------	
		
		String msg = "success";
		int test = -1;
		
		// 1. 사전작업
		String smplNo = pstiDAO.selectSmplNextVal();
		
		// 2. 시료 입력 #{smplNo} #{manageNo} #{pbhtNo} #{instNo}
		String instNo = hsptNo;
		
		SmplVO smpl = new SmplVO();
		
		smpl.setSmplNo(smplNo);
		smpl.setInstNo(instNo);
		smpl.setManageNo(manageNo);
		smpl.setPbhtNo(pbhtNo);
		
		test = hsptDAO.insertSmpl(smpl);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_11");
		
		return msg;
	}

	@Override
	public String registSmplByInptnt(String hsptNo, String pbhtNo, List<String> manageNoList) throws Exception {
		// 입원환자를 재검신청하는 메서드(일괄처리)
		//-------------------------------------------------
		// insert	smpl				|	#{smplNo} #{manageNo} #{pbhtNo} #{instNo}
		//--------------------------------------------------	
		
		String msg = "success";
		int test = 0;
		
		for(String manageNo : manageNoList) {
			// 1. 시료 입력 #{smplNo} #{manageNo} #{pbhtNo} #{instNo}
			msg = registSmplByInptnt(hsptNo, pbhtNo, manageNo);
			test = msg.equals("success") ? test + 1 : test;
		}
		
		if(test != manageNoList.size()) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_12");
		
		return msg;
	}
	
	@Override
	public String registSckbdreqInptntByInptnt(String toHsptNo, HsptVO loginHspt, String manageNo) throws Exception{
		// 입원중 환자를 이원신청하는 메서드
		//-------------------------------------------------
		// insert	sckbdreq			|	#{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		// update	hspt				|	#{hsptNo}
		//--------------------------------------------------	
		String msg = "success";
		int test = -1;
		
		// 1. 병상신청 등록 #{sckbdreqNo} #{type} #{childNo} #{hsptNo} #{manageNo} #{requestCode}
		String sckbdreqNo = pstiDAO.selectSckbdreqNextVal();
		String type = "A";
		String childNo = toHsptNo;
	    String hsptNo = loginHspt.getHsptNo();
	    String requestCode = "M102";

	    SckbdreqVO sckbdreq = new SckbdreqVO();
	    
	    sckbdreq.setSckbdreqNo(sckbdreqNo);
	    sckbdreq.setType(type);
	    sckbdreq.setChildNo(childNo);
	    sckbdreq.setHsptNo(hsptNo);
	    sckbdreq.setManageNo(manageNo);
	    sckbdreq.setRequestCode(requestCode);
	    
	    LOGGER.debug("{}",sckbdreq);
	    
	    test = hsptDAO.insertSckbdreq(sckbdreq);
	    if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_07");
	    
		// 2. 이원대상 병원 잔여병상 수정 #{hsptNo}
	    test = hsptDAO.updateDecreaseRmndSckbdCntByHsptNo(toHsptNo);
	    if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
	    
		return msg;
	}
	
	@Override
	public String modifyInptntInfo(PstiVO psti) throws Exception {
		// 입원환자를 수정하는 메서드, Controller단에서 필요한 모든 내용을 받아서(InptntUpdateCommand -> toPsti()) PstiVO를 생성하여 서비스에 넘겨준다.
		//-------------------------------------------------
		// update	psti				|	#{pstiNm} #{pstiTelno} #{pstiAdres} #{symptms} #{areaNo} #{pstiNo}
		//--------------------------------------------------	
		
		String msg = "success";
		int test = -1;
		
		LOGGER.debug("{}",psti);
		
		test = hsptDAO.updateInptntInfo(psti);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_02");
		
		return msg;
	}

	@Override
	public String registInptntAcceptedByDgnss(String manageNo, String sckbdreqNo, HsptVO loginHspt) throws Exception {
		// 입원중이나 입소중이 아닌 확진자의 (보건소 - 진료완료 - 이원신청 flow) 병상신청을 승인하는 메서드 
		//-------------------------------------------------
		// insert	inptnt				|	#{inpntNo} #{hsptNo} #{manageNo}
		// update	manage				|	#{sttusCode} #{instNm} #{instNo} #{manageNo}
		//			sckbdreq			|	#{sckbdreqNo} #{sckbdreqCode} #{acceptYmd}
		// 			hspt				|	#{hsptNo}			
		//--------------------------------------------------	
		String msg = "success";
		int test = -1;
		
		// 1. 사전작업
		String hsptNo = loginHspt.getHsptNo();
		SckbdreqVO sckbdreqTemp = pstiDAO.selectSckbdreqBySckbdreqNo(sckbdreqNo);
		String fromHsptNo = sckbdreqTemp.getHsptNo(); 
		
		// 2. 입원환자 등록 #{inpntNo} #{hsptNo} #{manageNo}
		String inptntNo = pstiDAO.selectInptntNextVal();
		
		InptntVO inptnt = new InptntVO();
		
		inptnt.setInptntNo(inptntNo);
		inptnt.setHsptNo(hsptNo);
		inptnt.setManageNo(manageNo);
		
		LOGGER.debug("{}", inptnt);
		
		test = hsptDAO.insertInptnt(inptnt);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_05");
		
		// 3. 병상신청 정보 변경 #{sckbdreqNo} #{sckbdreqCode} #{acceptYmd}
		String sckbdreqCode = "H103";
		Date acceptYmd = new Date();
		
		SckbdreqVO sckbdreq = new SckbdreqVO();
		sckbdreq.setSckbdreqNo(sckbdreqNo);
		sckbdreq.setSckbdreqCode(sckbdreqCode);
		sckbdreq.setAcceptYmd(acceptYmd);
		
		LOGGER.debug("{}", sckbdreq);
		
		test = hsptDAO.updateSckbdreqAccept(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_13");
		
		// 4. 진료병원(이원신청병원)의 잔여병상수 +1 #{hsptNo}
		test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(fromHsptNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		// 5. manage 테이블 수정 #{sttusCode} #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setSttusCode("A105");
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		LOGGER.debug("{}",manage);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registInptntAcceptedByInptnt(String manageNo, String sckbdreqNo, HsptVO loginHspt)
			throws Exception {
		// 입원환자의 이원신청을 승인하는 메서드 
		//-------------------------------------------------
		// insert	inptnt				|	#{inpntNo} #{hsptNo} #{manageNo}
		// update	manage				|	#{instNm} #{instNo} #{manageNo}
		//			sckbdreq			|	#{sckbdreqNo} #{sckbdreqCode} #{acceptYmd}
		//			inptnt				|	#{hsptlzCode} #{inptntNo}
		//			hspt				|	#{hsptNo}	
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전작업
		String hsptNo = loginHspt.getHsptNo();
		InptntVO inptntTemp = pstiDAO.selectInptntByManageNo(manageNo);
		String inptntNoOrigin = inptntTemp.getInptntNo();
		SckbdreqVO sckbdreqTemp = pstiDAO.selectSckbdreqBySckbdreqNo(sckbdreqNo);
		String fromHsptNo = sckbdreqTemp.getHsptNo();
		
		// 2. 입원환자 등록 #{inpntNo} #{hsptNo} #{manageNo}
		String inptntNoInsert = pstiDAO.selectInptntNextVal();
		
		InptntVO inptntInsert = new InptntVO();
		
		inptntInsert.setInptntNo(inptntNoInsert);
		inptntInsert.setHsptNo(hsptNo);
		inptntInsert.setManageNo(manageNo);
		
		LOGGER.debug("{}", inptntInsert);
		
		test = hsptDAO.insertInptnt(inptntInsert);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_05");
		
		// 3. 병상신청 정보 변경 #{sckbdreqNo} #{sckbdreqCode} #{acceptYmd}
		String sckbdreqCode = "H103";
		Date acceptYmd = new Date();
		
		SckbdreqVO sckbdreq = new SckbdreqVO();
		sckbdreq.setSckbdreqNo(sckbdreqNo);
		sckbdreq.setSckbdreqCode(sckbdreqCode);
		sckbdreq.setAcceptYmd(acceptYmd);
		
		LOGGER.debug("{}", sckbdreq);
		
		test = hsptDAO.updateSckbdreqAccept(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_13");
		 
		// 4. 이원신청 병원의 입원환자 퇴원처리(퇴원-이원상태) #{hsptlzCode} #{inptntNo}
		String hsptlzCode = "E103";
		InptntVO inptntOrigin = new InptntVO();
		
		inptntOrigin.setHsptlzCode(hsptlzCode);
		inptntOrigin.setInptntNo(inptntNoOrigin);
		
		LOGGER.debug("{}", inptntOrigin);
		
		test = hsptDAO.updateInptntExit(inptntOrigin);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_14");
		
		// 5. 이원신청 병원의 잔여병상수 +1 #{hsptNo}
		test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(fromHsptNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		// 6. manage 테이블 수정 #{instNm} #{instNo} #{manageNo}
		ManageVO manage = new ManageVO();
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		LOGGER.debug("{}",manage);
		
		test = hsptDAO.updateManageChangeInst(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String registInptntAccetedByIsoptnt(String manageNo, String sckbdreqNo, HsptVO loginHspt, String fromLtctNo)
			throws Exception {
		// 입소중환자의 이원신청을 승인하는 메서드, (생활치료센터 - 진료 - 진료완료 후 이원신청 - 이원대상병원 입원처리 flow) 
		//-------------------------------------------------
		// insert	inptnt				|	#{inpntNo} #{hsptNo} #{manageNo}
		// update	manage				|	#{instNm} #{instNo} #{manageNo}
		//			sckbdreq			|	#{sckbdreqNo} #{sckbdreqCode} #{acceptYmd}
		//			isoptnt				|	#{hsptlzCode} #{isoptntNo}
		//			hspt				|	#{hsptNo}	
		//			ltct				|	#{ltctNo}	
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전작업
		String hsptNo = loginHspt.getHsptNo();
		IsoptntVO isoptntTemp = pstiDAO.selectIsoptntByManageNo(manageNo);
		String isoptntNo = isoptntTemp.getIsoptntNo();
		SckbdreqVO sckbdreqTemp = pstiDAO.selectSckbdreqBySckbdreqNo(sckbdreqNo);
		String fromHsptNo = sckbdreqTemp.getHsptNo();
		
		// 2. 입원환자 등록 #{inpntNo} #{hsptNo} #{manageNo}
		String inptntNo = pstiDAO.selectInptntNextVal();
		
		InptntVO inptnt = new InptntVO();
		
		inptnt.setInptntNo(inptntNo);
		inptnt.setHsptNo(hsptNo);
		inptnt.setManageNo(manageNo);
		
		LOGGER.debug("{}", inptnt);
		
		test = hsptDAO.insertInptnt(inptnt);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_05");
		
		// 3. 병상신청 정보 변경 #{sckbdreqNo} #{sckbdreqCode} #{acceptYmd}
		String sckbdreqCode = "H103";
		Date acceptYmd = new Date();
		
		SckbdreqVO sckbdreq = new SckbdreqVO();
		sckbdreq.setSckbdreqNo(sckbdreqNo);
		sckbdreq.setSckbdreqCode(sckbdreqCode);
		sckbdreq.setAcceptYmd(acceptYmd);
		
		LOGGER.debug("{}", sckbdreq);
		
		test = hsptDAO.updateSckbdreqAccept(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_13");
		 
		// 4. 진료신청 생활치료센터의 입소환자 퇴원처리(퇴원-이원상태) #{hsptlzCode} #{isoptntNo}
		String hsptlzCode = "E103";
		IsoptntVO isoptntOrigin = new IsoptntVO();
		
		isoptntOrigin.setHsptlzCode(hsptlzCode);
		isoptntOrigin.setIsoptntNo(isoptntNo);
		
		LOGGER.debug("{}", isoptntOrigin);
		
		test = hsptDAO.updateIsoptntExit(isoptntOrigin);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_15");
		
		// 5. 진료신청 생활치료센터의 잔여병상수 +1 #{ltctNo}	
		test = hsptDAO.updateIncreaseRmndSckbdCntByLtctNo(fromLtctNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");

		// 6. 진료병원의 잔여병상수 +1 #{hsptNo}	
		test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(fromHsptNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		// 7. manage 테이블 수정 #{sttusCode} #{instNm} #{instNo} #{manageNo}
		String sttusCode = "A105";
		
		ManageVO manage = new ManageVO();
		manage.setSttusCode(sttusCode);
		manage.setInstNm(loginHspt.getInstNm());
		manage.setInstNo(loginHspt.getInstNo());
		manage.setManageNo(manageNo);
		
		LOGGER.debug("{}",manage);
		
		test = hsptDAO.updateManageChangeAll(manage);
		if(test == 0) 	msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_06");
		
		return msg;
	}

	@Override
	public String updateSckbdreqRejectByAll(String sckbdreqNo, HsptVO loginHspt) throws Exception {
		// 이원신청을 반려하는 메서드
		// (보건소 - 진료 - 진료완료 후 이원신청 - 반려 flow)
		// (생활치료센터 - 진료 - 진료완료 후 이원신청 - 반려 flow)
		// (입원환자 - 이원신청 - 반려 flow)
		//-------------------------------------------------
		// update	sckbdreq			|	#{sckbdreqNo} #{sckbdreqCode}
		//			hspt				|	#{hsptNo}	
		//--------------------------------------------------
		String msg = "success";
		int test = -1;
		
		// 1. 사전작업
		String hsptNo = loginHspt.getHsptNo();
		
		// 2. 병상신청 상태변경 (반려) #{sckbdreqNo} #{sckbdreqCode}
		String sckbdreqCode = "H105";
		
		SckbdreqVO sckbdreq = new SckbdreqVO();
		
		sckbdreq.setSckbdreqCode(sckbdreqCode);
		sckbdreq.setSckbdreqNo(sckbdreqNo);
		
		LOGGER.debug("{}", sckbdreq);
		
		test = hsptDAO.updateSckbdreqCodeOnly(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_16");
		
		// 3. 로그인병원의 잔여병상수 +1 #{hsptNo}	
		test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(hsptNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		return msg;
	}

	@Override
	public String updateSckbdreqCancleToInptnt(String sckbdreqNo, String toHsptNo) throws Exception {
		// 병원으로 신청한 이원신청을 취소하는 메서드
		//-------------------------------------------------
		// update	sckbdreq			|	#{sckbdreqNo} #{sckbdreqCode}
		//			hspt				|	#{hsptNo}	
		//--------------------------------------------------
		
		// 1. 사전작업
		String msg = "success";
		int test = -1;
		
		
		// 2. 병상신청 상태변경 (취소) #{sckbdreqNo} #{sckbdreqCode}
		String sckbdreqCode = "H104";
		
		SckbdreqVO sckbdreq = new SckbdreqVO();
		
		sckbdreq.setSckbdreqCode(sckbdreqCode);
		sckbdreq.setSckbdreqNo(sckbdreqNo);
		
		LOGGER.debug("{}", sckbdreq);
		
		test = hsptDAO.updateSckbdreqCodeOnly(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_16");
		
		// 3. 이원대상 병원의 잔여병상수 +1 #{hsptNo}	
		test = hsptDAO.updateIncreaseRmndSckbdCntByHsptNo(toHsptNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		return msg;
		
	}

	@Override
	public String updateSckbdreqCancleToIsoptnt(String sckbdreqNo, String toLtctNo) throws Exception {
		// 생활치료센터로 신청한 입소신청을 취소하는 메서드
		//-------------------------------------------------
		// update	sckbdreq			|	#{sckbdreqNo} #{sckbdreqCode}
		//			ltct				|	#{ltctNo}	
		//--------------------------------------------------
		// 1. 사전작업
		String msg = "success";
		int test = -1;
		
		
		// 2. 병상신청 상태변경 (취소) #{sckbdreqNo} #{sckbdreqCode}
		String sckbdreqCode = "H104";
		
		SckbdreqVO sckbdreq = new SckbdreqVO();
		
		sckbdreq.setSckbdreqCode(sckbdreqCode);
		sckbdreq.setSckbdreqNo(sckbdreqNo);
		
		LOGGER.debug("{}", sckbdreq);
		
		test = hsptDAO.updateSckbdreqCodeOnly(sckbdreq);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_16");
		
		// 3. 입소대상 생활치료센터의 잔여병상수 +1 #{hsptNo}	
		test = hsptDAO.updateIncreaseRmndSckbdCntByLtctNo(toLtctNo);
		if(test == 0) msg = ErrorCodeUtil.getCodeName("HSPT_ERROR_08");
		
		return msg;
	}
	

}
