2021.09.01
<이론>
// 동기화 처리하는 방법1 : synchronized
// 단점 : 동기화처리할 필요가 없는 영역도 동기화처리됨
//        동기화는 성능문제를 유발하므로 임계영역에만 
//        처리하고 싶을 때는 메서드를 동기화하는 방법을
//        사용하지 않음
// 동기화 처리하는 방법2 : 동기화 블럭으로 설정하기

// 동기화처리된 메서드 안에서 사용하는 메서드는
// 동기화가 되어있지 않기 때문에 예기치 못한 일이 일어날 수 있다
// 그러므로 동기화를 꼼꼼하게 하기 위해서는 동기화처리된 메서드에서 사용하는 메서드를 찾아서
// 동기화해 주어야 한다(여기서는 getBalance())

/*
 * 락 기능을 제공하는 클래스
 *
 * ReentrantLock : Read 및 Write 구분 없이 사용하기 위한 락 클래스로 동기화
 *                 처리를 위해 사용된다.
 *                 (Synchronized를 이용한 동기화 처리보다 부가적인 기능이
 *                 제공됨. ex) Fairness 설정등.
 * ReenterantReadWriteLock : Read 및 Write 락을 구분하여 사용가능함.
 */

// Lock객체의 lock()메서드가 동기화 시작이고, unlock()메서드가
// 동기화의 끝을 나타낸다.
// lock()메서드로 동기화를 설정한 곳에서는 반드시 unlock()메서드로
// 해제해 주어야 한다.

        lock.lock(); // 시작(락을 획득하기 전까지 BLOCKED됨)
        balance += money; // 동기화 처리 부분
        lock.unlock(); // 해제

Vector, Hashtable등의 예전부터 존재하던 Collection 클래스들은 내부에
 * 동기화 처리가 되어 있다. 그런데, 최근엧 새로 구성된 Collection클래스들은
 * 동기화 처리가 되어있지 않다. 그래서 동기화가 필요한 프로그램에서 이런 Collection
 * 클래스들을 사용하려면 동기화 처리를 한 후에 사용해야 한다.

// 동기화 처리를 하지 않을 경우...
    private static List<Integer> list1 = new ArrayList<Integer>();

// 동기화 처리를 하는 경우...
    private static List<Integer> list2 =
        Collections.synchronizedList(new ArrayList<Integer>());
<실습>
    public static void main(String[] args) {
        ShareObject so = new ShareObject();
        WorkThread wt1 = new WorkThread(so);
        WorkThread wt2 = new WorkThread(so);

        wt1.start();
        wt2.start();
    } 

// 공통으로 사용할 객체
class ShareObject {
    private int sum = 0;
    // synchronized public void add(){
    public void add(){
        synchronized (this){
            for(int i=0; i<1000000000; i++) {} //동기화 전까지 시간 벌기용

            int n = sum;
            n += 10;
            sum = n;
            System.out.println(Thread.currentThread().getName()
        		+ "합계 : " + sum);

        }
    }

    public int getSum(){
        return sum;
    }
}
// 작업을 수행하는 메서드
class WorkThread extends Thread{
    ShareObject sObj;

    @Override
    public void run(){
        for(int i=1; i<=10; i++){
            synchronized (sObj){
                sObj.add();
            }
        }
    }

    WorkThread(ShareObject sObj){
        this.sObj = sObj;
    }
}

은행의 입출금을 스레드로 처리하는 예제
 * (Synchronized를 이용한 동기화 처리)

public static void main(String[] args) {
        SyncAccount sAcc = new SyncAccount();
        sAcc.setBalance(10000);

        BankThread bt1 = new BankThread(sAcc);
        BankThread bt2 = new BankThread(sAcc);

        bt1.start();
        bt2.start();
    }

// 은행의 입출금을 관리하는 클래스 정의
class SyncAccount {
    private int balance; // 잔액이 저장될 변수

    public synchronized int getBalance(){
        return balance;
    }
    public void setBalance(int balance){
        this.balance = balance;
    }

    // 입금 처리를 수행하는 메서드
    public void deposit(int money){
        this.balance += money;
    }

    // 출금을 처리하는 메서드 (출금 성공 : true, 출금 실패 : false 반환)
    // 동기화 영역에서 호출하는 메서드도 동기화 처리를 해 주어야 한다.
    public synchronized boolean withdraw(int money){
        if(balance >= money){
            for(int i=1; i<1000000000; i++){} // 시간 때우기용

            balance -= money; // 출금하기

            System.out.println("메서드 안에서 balance = "
                    + getBalance());
            return true; // 출금성공
        }else{
            return false; // 출금 실패
        }
    }
}

// 은행 업무를 처리하는 스레드
class BankThread extends Thread {
    private SyncAccount sAcc;

    @Override
    public void run(){
        boolean result = sAcc.withdraw(6000); // 6000원 인출
        System.out.println("스레드 안에서 result = " + result
                + ", balance = " + sAcc.getBalance());
    }

    BankThread(SyncAccount sAcc){
        this.sAcc = sAcc;
    }
}

은행의 입출금을 스레드로 처리하는 예제
 * (Lock객체를 이용한 동기화 처리)
    public static void main(String[] args) {
        // 락객체 생성
        ReentrantLock lock = new ReentrantLock(true);

        // 공유객체 생성
        LockAccount lAcc = new LockAccount(lock);
        lAcc.deposit(10000); // 입금처리

        BankThread2 bth1 = new BankThread2(lAcc);
        BankThread2 bth2 = new BankThread2(lAcc);

        bth1.start();
        bth2.start();
    }

    public static void main(String[] args) {
        // 락객체 생성
        ReentrantLock lock = new ReentrantLock(true);

        // 공유객체 생성
        LockAccount lAcc = new LockAccount(lock);
        lAcc.deposit(10000); // 입금처리

        BankThread2 bth1 = new BankThread2(lAcc);
        BankThread2 bth2 = new BankThread2(lAcc);

        bth1.start();
        bth2.start();
    }

}

// 입출금을 담당하는 클래스
class LockAccount {
    private int balance;

    // Lock객체 생성=> 되도록이면 private final로 만든다.
    private final Lock lock;

    public LockAccount(Lock lock){
        this.lock = lock;
    }
    public int getBalance(){
        return balance;
    }

    // 입금하는 메서드
    public void deposit(int money){
        lock.lock(); // 시작(락을 획득하기 전까지 BLOCKED됨)
        balance += money; // 동기화 처리 부분
        lock.unlock(); // 해제
    }

    // 출금하는 메서드(출금 성공: true, 출금 실패 : false 반환)
    public boolean withdraw(int money){
        lock.lock(); // 시작
        boolean chk = false;

        // try ~ catch 블럭을 사용할 경우에는
        // unlock()메서드 호출은 finally 블럭에서 하도록 한다.
        try{
            if(balance >= money){
                for(int i=1;i<=1000000000; i++){} // 시간때우기 용
                balance -= money;
                System.out.println("메서드 안에서 balance = "
                        + getBalance());
                chk = true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }finally{
            lock.unlock(); // 해제
        }
        return true;
    }
}

// 은행 업무를 처리하는 스레드
class BankThread2 extends Thread {
    private LockAccount lAcc;

    public BankThread2(LockAccount lAcc){
        this.lAcc = lAcc;
    }

    @Override
    public void run(){
        boolean result = lAcc.withdraw(6000);
        System.out.println("스레드 안에서 result = " + result
                + ", balance = " + lAcc.getBalance());
    }
}

    public static void main(String[] args) {
        // 익명 클래스로 스레드 구현
        Runnable r = new Runnable(){
            @Override
            public void run(){
                for(int i=1; i<=10000; i++){
                    //list1.add(i);
                    list2.add(i);
                }
            }
        };

        Thread[] ths = new Thread[]{
            new Thread(r), new Thread(r),
            new Thread(r), new Thread(r), new Thread(r)
        };
        
        for(Thread th : ths){
            th.start();
        }
        for(Thread th : ths){
            try{
                th.join();
            }catch(InterruptedException ex){
                ex.printStackTrace();
            }
        }
        //System.out.println("list1의 개수 : " + list1.size());
        System.out.println("list2의 개수 : " + list2.size());
    }

   public static void main(String[] args) {
        WorkObject workObj = new WorkObject();

        Thread thA = new ThreadA(workObj);
        Thread thB = new ThreadB(workObj);
        Thread thC = new ThreadC(workObj);

        thA.start();
        thB.start();
        thC.start();
    }

// 공통으로 사용할 객체
class WorkObject{
    public synchronized void methodA(){
        System.out.println("methodA() 메서드 작업 중...");

        notify();

        try{
            wait();
        }catch(InterruptedException ex){
            ex.printStackTrace();
        }
    }
    public synchronized void methodB(){
        System.out.println("methodB() 메서드 작업 중...");

        notify();

        try{
            wait();
        }catch(InterruptedException ex){
            ex.printStackTrace();
        }
    }
    public synchronized void methodC(){
        System.out.println("methodC() 메서드 작업 중...");

        notify();

        try{
            wait();
        }catch(InterruptedException ex){
            ex.printStackTrace();
        }
    }
}

// WorkObject의 methodA()메서드만 호출하는 스레드
class ThreadA extends Thread{
    private WorkObject workObj;

    public ThreadA(WorkObject workObj){
        this.workObj = workObj;
    }

    @Override
    public void run(){
        for(int i=1; i<=10; i++){
            workObj.methodA();
        }
        System.out.println("ThreadA 종료");
    }
}

//WorkObject의 methodB()메서드만 호출하는 스레드
class ThreadB extends Thread{
    private WorkObject workObj;

    public ThreadB(WorkObject workObj){
        this.workObj = workObj;
    }

    @Override
    public void run(){
        for(int i=1; i<=10; i++){
            workObj.methodB();
        }
        System.out.println("ThreadB 종료");
    }
}
//WorkObject의 methodC()메서드만 호출하는 스레드
class ThreadC extends Thread{
  private WorkObject workObj;

  public ThreadC(WorkObject workObj){
      this.workObj = workObj;
  }

  @Override
  public void run(){
      for(int i=1; i<=10; i++){
          workObj.methodC();
      }
      System.out.println("ThreadC 종료");
  }
}

public static void main(String[] args) {
        DataBox dataBox = new DataBox();

        ProducerThread pth = new ProducerThread(dataBox);
        ConsumerThread cth = new ConsumerThread(dataBox);

        pth.start();
        cth.start();

    }

// 데이터를 공통으로 사용하는 클래스
class DataBox{
    private String data;

    // data가 null이 아닐 때 data값을 반환하는 메서드
    public synchronized String getData(){
        if(data == null){
            try{
            	System.out.println("===getData wating===");
                wait();
                System.out.println("===getData 깨어났음===");
            }catch(InterruptedException ex){
                ex.printStackTrace();
            }
        }

        String returnData = data;
        System.out.println("읽어온 데이터 : " + returnData);
        data = null;
        System.out.println(Thread.currentThread().getName()
                + " notify() 호출");
        notify();

        return returnData;
    }
    public synchronized void setData(String data){
        if(this.data != null){
            try{
            	System.out.println("===setData wating===");
                wait();
                System.out.println("===setData 깨어났음===");
            }catch(InterruptedException ex){
                ex.printStackTrace();
            }
        }
        this.data = data;
        System.out.println("세팅한 데이터 : " + this.data);
        System.out.println(Thread.currentThread().getName()
                + " notify() 호출");
        notify();
    }
}

// 데이터를 세팅만 하는 스레드
class ProducerThread extends Thread{
    private DataBox dataBox;

    public ProducerThread(DataBox dataBox){
        super("ProducerThread");
        this.dataBox = dataBox;
    }

    @Override
    public void run(){
        for(int i=1; i<=10; i++){
            String data = "data-" + i;
            System.out.println("dataBox.setData(" + data + ") 호출");

            dataBox.setData(data);
        }
    }

}

// 데이터를 읽어만 오는 스레드
class ConsumerThread extends Thread{
    private DataBox dataBox;

    public ConsumerThread(DataBox dataBox){
        super("ConsumerThread");
        this.dataBox = dataBox;
    }

    @Override
    public void run(){
        for(int i=1; i<=10; i++){
            String data = dataBox.getData(); 
            System.out.println("dataBox.getData() 호출");
        }	
    }
}

<TMI>
동기화
동기화가 필요한 영역 = 임계영역 = critical section
: 여러 스레드가 동시에 작업하는 영역으로 예기치 못한 일이 일어나는 영역
  동기화의 대상영역이 됨
공유객체에 여러개의 스레드가 동시에 작업하기 때문에 동기화의 필요성 발생
-> 하나의 공유객체에는 동시에 최대 하나의 스레드만 작업할 수 있게 만드는
과정 = 동기화, synchronize

람다식을 쓰면 소스가 짧아진다 - 가독성이 좋아진다고 함.
근데 짧다고 가독성이 항상 좋은 건 아닌데...

