2021.09.23
<이론>
<실습>
public static void main(String[] args) {
        File file = new File("d:/D_Other/Tulips.jpg");

        DatagramSocket ds = null;

        if(!file.exists()){
            System.out.println("파일이 존재하지 않습니다.");
            System.exit(0);
        }

        long fileSize = file.length();
        long totalReadBytes = 0;

        long startTime = System.currentTimeMillis();

        int port = 8888;

        try{
            ds = new DatagramSocket();
            InetAddress receiveAddr = InetAddress.getByName("192.168.43.141");

            String str = "start"; // 전송 시작을 알려주기 위한 문자열
            DatagramPacket dp = new DatagramPacket(
                    str.getBytes(), str.getBytes().length,
                    receiveAddr, port);

            ds.send(dp);

            FileInputStream fis = new FileInputStream(file);
            byte[] buffer = new byte[1000];

            str = file.getName(); // 파일명
            dp = new DatagramPacket(
                    str.getBytes(), str.getBytes().length,
                    receiveAddr, port);
            ds.send(dp);

            str = String.valueOf(fileSize); // 파일크기
            dp = new DatagramPacket(
                    str.getBytes(), str.getBytes().length,
                    receiveAddr, port);
            ds.send(dp);

            while(true) {	// 버퍼단위로 읽는 메서드를 사용하기 때문에 fis.read(buffer,...); 다 읽으면 break로 빠져나옴
                Thread.sleep(10); // 패킷 전송간의 간격을 주기 위해서...
                int readBytes = fis.read(buffer, 0 ,buffer.length);
                if(readBytes == -1) {
                    break;
                }
                dp = new DatagramPacket(buffer, readBytes, receiveAddr, port);
                ds.send(dp);
                totalReadBytes += readBytes;

                System.out.println(" 진행 상태 : " + totalReadBytes
                        + "/" + fileSize + " Bytes"
                        + (totalReadBytes * 100 / fileSize) + "%)");
            }

            long endTime = System.currentTimeMillis();
            long diffTime = endTime - startTime;
            double transferSpeed = fileSize / diffTime;

            System.out.println("걸린 시간 : " + diffTime + "(ms)");
            System.out.println("평균 전송 속도 : " + transferSpeed
                    + " Bytes/ms");
            System.out.println("전송 완료");

            fis.close();
            ds.close();

        }catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) throws IOException {
        int port = 8888;
        long fileSize = 0;
        long totalReadBytes = 0;
        byte[] buffer = new byte[1000];
        int readBytes = 0;

        System.out.println("파일 수신 준비중");
        
        DatagramSocket ds = new DatagramSocket(port);
        FileOutputStream fos = null;
        DatagramPacket dp = new DatagramPacket(buffer, buffer.length);
        ds.receive(dp); // start 받기

        String str = new String(dp.getData()).trim();

        if(str.equals("start")){
            // 전송 파일명 받기
            buffer = new byte[1000]; // 초기화
            dp = new DatagramPacket(buffer, buffer.length);
            ds.receive(dp);

            str = new String(dp.getData()).trim();
            fos = new FileOutputStream("d:/" + str);

            // 전송 파일 크기 받기
            buffer = new byte[1000];
            dp = new DatagramPacket(buffer, buffer.length);
            ds.receive(dp);

            str = new String(dp.getData()).trim();
            fileSize = Long.parseLong(str);

            long startTime = System.currentTimeMillis();

            while(true){
                ds.receive(dp);
                readBytes = dp.getLength();
                fos.write(dp.getData(), 0, readBytes);
                totalReadBytes += readBytes;

                System.out.println(" 진행 상태 : " + totalReadBytes
                        + "/" + fileSize + " Bytes"
                        + (totalReadBytes * 100 / fileSize) + "%)");

                if(totalReadBytes >= fileSize) {
                    break;
                }
            }

            long endTime = System.currentTimeMillis();
            long diffTime = endTime - startTime;
            double transferSpeed = fileSize / diffTime;

            System.out.println("걸린 시간 : " + diffTime + "(ms)");
            System.out.println("평균 수신속도 : " + transferSpeed
                    + " Bytes/ms");
            System.out.println("수신 완료");

            fos.close();
            ds.close();
        }
    }

    private final int port = 80;
    private final String encoding = "UTF-8";

    /**
     *  서버 시작
     */

    public void start(){

        System.out.println("HTTP 서버가 시작되었습니다.");

        try(ServerSocket server = new ServerSocket(port)){
            while(true){
                try{
                    Socket socket = server.accept();

                    HttpHandler handler = new HttpHandler(socket);

                    new Thread(handler).start(); // 요청 처리 시작...

                }catch(IOException ex){
                    System.err.println("커넥션 오류!!");
                    ex.printStackTrace();
                }catch(RuntimeException ex) {
                    System.err.println("알 수 없는 오류!!");
                    ex.printStackTrace();
                }
            }
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }

    /**
     * HTTP 요청 처리를 위한 Runnable 클래스
     */

    private class HttpHandler implements Runnable{
        private final Socket socket;

        public HttpHandler(Socket socket){
            this.socket = socket;
        }

        @Override
        public void run(){

            OutputStream out = null;
            BufferedReader br = null;


            try{
                out = new BufferedOutputStream(
                        socket.getOutputStream());
                br = new BufferedReader(
                        new InputStreamReader(
                            socket.getInputStream()));

                // 요청헤더 정보 파싱하기
                StringBuilder request = new StringBuilder();	//	String에 += 같은 연산이 반복 될 때 전용클래스의 메서드를 이용하면 성능향상
                while(true){
                    String str = br.readLine();

                    if(str.equals("")) break; // empty line 체크

                    request.append(str + "\n");
                }

                System.out.println("요청헤더:\n" + request.toString());
                System.out.println("--------------------------------------");

                String reqPath = "";

                // 요청 페이지 정보 가져오기
                StringTokenizer st = new StringTokenizer(request.toString());	// 특정 구분자를 가지고 문자열을 토큰화시키는 전용 클래스
                while(st.hasMoreTokens()){
                    String token = st.nextToken();
                    if(token.startsWith("/")){
                    	reqPath = token;
                    }
                }
                
                // 경로 디코딩
                reqPath = URLDecoder.decode(reqPath, "utf-8");
                
                // 상대경로(프로젝트 폴더기준) 설정
                String filePath = "./WebContent" + reqPath;

                // 해당 파일이름을 이용하여 Content-type 정보 추출하기
                String contentType = URLConnection
                    .getFileNameMap().getContentTypeFor(filePath);

                // CSS파일인 경우 인식이 안되서 추가함
                if(contentType == null && filePath.endsWith(".css")){
                    contentType = "text/css";
                }

                System.out.println("ContentType => " + contentType);

                File file = new File(filePath);
                if(!file.exists()) {
                    makeErrorPage(out, 404, "Not Found");
                    return;
                }

                byte[] body = makeResponseBody(filePath);

                byte[] header = makeResponseHeader(body.length, contentType);

                // 요청 헤더가 HTTP/1.0이나 그 이후의 버전을 지원할 경우 MIME 헤더를 전송한다.
                if(request.toString().indexOf("HTTP/") != -1) {
                    out.write(header); // 응답헤더 보내기
                }

                System.out.println("응답헤더:\n" + new String(header));
                System.out.println("--------------------------------------");

//                System.out.println("응답바디:\n" + new String(body));
//                System.out.println("--------------------------------------");

                out.write(body); // 응답내용 보내기
                out.flush();

            }catch(IOException ex){
                System.err.println("입출력 오류!!");
                ex.printStackTrace();
            }finally {
                try{
                    socket.close(); // 소켓 닫기(연결 끊기)
                }catch(IOException ex){
                    ex.printStackTrace();
                }
            }

        }
    }

    /**
     * 응답 헤더 생성하기
     * @param length 응답내용 크기
     * @param contentType 마임타입
     * @return 바이트배열
     */
    private byte[] makeResponseHeader(
    		int length, String contentType) {
    	String header = "HTTP/1.1 200 OK\r\n"
    			+ "Server: MyHTTPServer 1.0\r\n"
    			+ "Content-length: " + length + "\r\n"
    			+ "Content-Type: " + contentType
    			+ "; charset=" + this.encoding + "\r\n\r\n";
    	
    	return header.getBytes();
    }
    
    private byte[] makeResponseBody(String filePath) {
    	
    	FileInputStream fis = null;
    	byte[] data = null;
    	
    	try{
    		File file = new File(filePath);
    		data = new byte[(int) file.length()];
    		
    		fis = new FileInputStream(file);
    		fis.read(data);
    		
    	}catch(IOException ex){
    		System.err.println("입출력 오류!!!");
    		ex.printStackTrace();
    	}finally {
    		if(fis != null) {
    			try{
    				fis.close();
    			}catch(IOException ex){
    				ex.printStackTrace();
    			}
    		}
    	}
    	return data;
    }

    /**
     * 에러페이지 생성 
     * @param out
     * @param statusCode
     * @param errMsg
     */
    private void makeErrorPage(
            OutputStream out, int statusCode, String errMsg) {
        String statusLine = "HTTP/1.1" + " " + statusCode
            + " " + errMsg;
        try{
            out.write(statusLine.getBytes());
            out.flush();
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new MyHttpServer().start();
    }


/*
 * 서블릿의 라이프사이클을 확인하기 위한 예제
 */
public class T01_ServeletLifeCycle extends HttpServlet{

	@Override
	public void init() throws ServletException {
		// 초기화 코드 작성..
		System.out.println("init() 호출 됨");
	}
	
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 실제적인 작업수행이 시작되는 지점...(자바의 메인베서드 역할)
		System.out.println("service() 호출됨...");
		super.service(req, resp);
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 메서드 방식이 GET 방식인 경우 호출됨...
		System.out.println("doGet() 호출됨...");
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 메서드 방식이 POST 방식인 경우 호출됨...
		System.out.println("doPost() 호출됨...");
	}
	
	@Override
	public void destroy() {
		// 객체 소멸시(컨테이너로부터 서블릿객체 제거시) 필요한 코드 작성...
		System.out.println("destroy() 호출됨...");
	}
}

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>servletTest</display-name>
	<servlet>
		<servlet-name>T01_ServletLifeCycle</servlet-name>
		<servlet-class>kr.or.ddit.basic.T01_ServeletLifeCycle</servlet-class>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>T01_ServletLifeCycle</servlet-name>
		<url-pattern>T01_ServletLifeCycle</url-pattern>
	</servlet-mapping>  

</web-app>

<TMI>
서블릿 프로그래밍

이제부터 실행주체는 java가 아니라 tomcat서버임
tomcat이 이해할 수 있도록 java의 코드를 작성하자 = servlet 규약에 따른 코드

브라우저를 통해서 요청한 요구를 수용할 수 있는 프로그래밍을 하게 됨
tomcat이 알아먹게 하기 위해서 servlet에 맞는 코드를 작성하자.
