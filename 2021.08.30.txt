2021.08.30

<이론>
// 멀티 스레드 프로그램

// 방법1 : Thread클래스를 상속한 클래스의 인스턴스를 생성한 후,
// 이 인스턴스의 start()메서드를 호출한다.
//

// 방법2 : Runnable 인터페이스를 구현한 class의 인스턴스를 생성한 후,
//         이 인스턴스를 Thread객체의 인서턴스를 생성할 때 생성자의
//         매개변수로 넘겨준다. 이때, 생성된 Thread객체의 인스턴스의
//         start()메서드를 호출한다.

// 방법3 : 익명클래스를 이용하는 방법 
//         Runnable 인터페이스를 구현한 익명클래스를 Thread인스턴스
//         생성시 매개변수로 넣어준다.

        // 스레드의 수행시간 체크해 보기

// Thread.sleep(시간) => 주어진 시간동안 작업을 잠시 멈춘다.
// 시간은 밀리세컨드 단위를 사용한다.
// 즉, 1000밀리세컨드는 1초를 의미한다.

        // UTC(Universal Time Coodinated 협정 세계 표준시)를 사용하여
        // 1970년 1월 1일 0시 0분 0초를 기준으로 경과한 시간을 밀리세컨드 단위로
        // 나타낸다. => 유닉스 타임스탬프
        long startTime = System.currentTimeMillis();


        try{
            th.join(); // 현재 실행중인 스레드에서 작업 중인 스레드
                       // (지금은 th스레드)가 종료될때까지 기다린다.
                       // 현재 실행중인 스레드는 mainThread임.
                       // 비직관적인 thread method 직관적이려면 MainThread.join(th)같음.
                       // 아닌가? th가 조인을 실행하면 지금 실행중인 thread로
                       // 들어오겠다는 거임. 그때동안 기다리고 있는듯
        }catch(InterruptedException ex){
            ex.printStackTrace();
        }


<실습>
class MyThread1 extends Thread {

	@Override
	public void run() {
		for (int i = 1; i <= 200; i++) {
			System.out.print("*");
			try {
				Thread.sleep(100);
			} catch (InterruptedException ex) {
				ex.printStackTrace();
			}
		}
	}
}
class MyThread2 implements Runnable {

    @Override
    public void run(){
		for (int i = 1; i <= 200; i++) {
			System.out.print("$");
			try {
				Thread.sleep(100);
			} catch (InterruptedException ex) {
				ex.printStackTrace();
			}
		}

    }
}
        Thread th3 = new Thread(new Runnable(){
            @Override
            public void run(){
            for (int i = 1; i <= 200; i++) {
                System.out.print("@");
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }

            }
        });
	MyThread1 th1 = new MyThread1();
	th1.start();
        	Runnable r1 = new MyThread2();
        	Thread th2 = new Thread(r1);
	th3.start();
    public static void main(String[] args) {
        Thread th = new Thread(new MyRunner());
        long startTime = System.currentTimeMillis();
        th.start();
        try{
            th.join(); 
        }catch(InterruptedException ex){
            ex.printStackTrace();
        }
        long endTime = System.currentTimeMillis();
        System.out.println("경과시간 : " + (endTime - startTime) + "(ms)"); 
    } 

class MyRunner implements Runnable{
    @Override
    public void run(){
        long sum = 0;
        for(long i=1L; i<=1000000000; i++){
            sum += i;
        }
        System.out.println("합계 : " + sum); 
    }
}

        // 여러 스레드가 협력해서 처리했을 때...
        SumThread[] sumThs = new SumThread[]{
            new SumThread(1L,500000000L),
            new SumThread(500000001L,1000000000L),
            new SumThread(1000000001L,1500000000L),
            new SumThread(1500000000L,2000000000L)
        };
class SumThread extends Thread {
    private long max, min;
    public SumThread(long min, long max){
        this.max = max;
        this.min = min;
    }
    @Override
    public void run(){
        long sum = 0L;
        for(long i=min; i<=max; i++){
            sum += i;
        }
        System.out.println(min + " ~ " + max + "까지의 합 : " + sum); 
    }
}


public class T06_ThreadTest {
    // 입력여부 확인하기 위한 변수 선언
    // 모든 스레드에서 공통으로 사용할 변수
    public static boolean inputCheck = false;
    public static void main(String[] args) {

        DataInput input = new DataInput();
        input.start();
        CountDown count = new CountDown();
        count.start();


    } 

}

/**
 * 데이터를 입력받기 위한 스레드
 */
class DataInput extends Thread {
    @Override
    public void run(){
        String str = JOptionPane
            .showInputDialog("아무거나 입력하세요.");
        // 입력이 완료되면 inputCheck변수를 true로 변경한다.
        T06_ThreadTest.inputCheck = true;
        System.out.println("입력한 값은 " + str + "입니다."); 

    }

}

class CountDown extends Thread {
    @Override
    public void run(){
        for(int i=10; i>=1; i--){
            // 입력이 완료되었는지 여부를 검사하고 입력이 완료되면
            // run()메서드를 종료시킨다. 즉, 현재스레드를 종료시킨다.
            if(T06_ThreadTest.inputCheck == true) {
                return; // run메서드가 종료되면 스레드도 종료된다.
            }
            System.out.println(i); 
            try{
                Thread.sleep(1000);
            }catch(InterruptedException ex){
                ex.printStackTrace();
            }
        }
        // 10초가 경과되었는데도 입력이 없으면 프로그램을 종료한다.
        System.out.println("10초가 지났습니다. 프로그램을 종료합니다."); 
        System.exit(0); // 프로그램을 종료시키는 명령
    }

}

public static void main(String[] args) {
        System.out.println("최대 우선순위 : " + Thread.MAX_PRIORITY); 
        System.out.println("최소 우선순위 : " + Thread.MIN_PRIORITY); 
        System.out.println("보통 우선순위 : " + Thread.NORM_PRIORITY); 

        Thread th1 = new ThreadTest1();
        Thread th2 = new ThreadTest1();
        Thread th3 = new ThreadTest1();
        Thread th4 = new ThreadTest1();
        Thread th5 = new ThreadTest1();
        
        Thread th6 = new ThreadTest2();

        // 우선순위는 start()메서드를 호출하기 전에 설정해야 한다.
       th1.setPriority(1); 
       th2.setPriority(1); 
       th3.setPriority(1); 
       th4.setPriority(1); 
       th5.setPriority(1); 
       th6.setPriority(10); 

       System.out.println("th1의 우선순위 : " + th1.getPriority()); 
       System.out.println("th6의 우선순위 : " + th6.getPriority()); 

       th1.start();
       th2.start();
       th3.start();
       th4.start();
       th5.start();
       th6.start();

       try{
           th1.join();
           th2.join();
           th3.join();
           th4.join();
           th5.join();
           th6.join();
       }catch(InterruptedException ex){
            ex.printStackTrace();
       }
    } 
==================================================================================
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>title</title>
<style>
a:link{
  color : green;
  text-decoration : none;
}
a:visited{
  color : red;
}
a:active{
  color : yellow;
  background : black;
  text-decoration : line-through;
}
a:hover{
  color : blue;
  font-size : 1.3em;
}
p{
  font-size : 1.5em;
  color : purple;
}
p:hover{
  background : lime;
}
p:active{
  text-decoration : underline;
}
</style>
</head>
<body>
<pre>
상태를 나타내는 의사 클래스
:link
:visited
:hover
:active
</pre>
  <div>
    <a href="http://www.naver.com" target="_blank">네이버</a>
    <a href="http://www.daum.com" target="_self">다음</a>
    <a href="http://www.w3schools.com" target="_blank">w3schools</a>
  </div>

  <p>무궁화 꽃이 피었습니다.</p>
  <p>asdfQWERzxcv</p>
  <p>ASDF</p>

</body>
</html>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>title</title>
<style>
table{
  border : 2px solid blue;
  margin : 20px auto;
}
 td{
  width : 150px;
  height : 50px;
  
}
#t1 td:nth-child(1){
  background : lime;
}
#t1 td:nth-child(2n){
  background : #129eff;
}
#t1 td:nth-child(2n+3){
  background : yellow;
}
#t2 tr:nth-child(2n+1){
  background : purple;
}
</style>
</head>
<body>
  <table id="t1" border="1">
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  </table>
  <table id="t2" border="1">
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  </table>
  <table id="t3" border="1">
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  </table>

</body>
</html>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>title</title>
<style>
label{
  display : inline-block;
  width : 100px;
}
form{
  border : 2px solid blue;
  width : 80%;
  padding : 10px;
}
h3{
  text-align : center;
  width : 80%;
}
input{
  background : lightblue;
}
input[type=text]{
  background : white;
}
input[type=reset]{
  background : yellow;
}
#f2 input[name=addr]{
  border : 2px solid blue;
}
</style>
<script>
  function proc2(){
    alert("asdf!")
  }
</script>
</head>
<body>
  <h2>연습1</h2>
  <h3>이메일 전송화면</h3>
  <form id="f1" action="" onsubmit="proc2()">
     <label>이름</label><input type="text" title="name" placeholder="홍길동" name="name"><br>
     <label>이메일</label><input type="text" title="email" placeholder="example@asdf.asd" name="email"><br>
     <label>내용</label><br>
     <textarea name="content" rows="9" cols="50"></textarea><br>
     <input type="submit" value="전송">
    <input type="reset" value="재설정">
  </form>
  <h2>연습2</h2>
  <h3>회원 가입 화면</h3>
  <form id="f2" action="" onsubmit="proc2()">
     <label>이름</label><input type="text" title="name" placeholder="홍길동" name="name"><br>
     <label>주소</label><input type="text" title="addr" name="addr"><br>
     <label>이메일</label><input type="text" title="email" placeholder="example@asdf.asd" name="email"><br>
     <input type="radio" value="Male" name="gender"><label>Male</label><br>
     <input type="radio" value="Female" name="gender"><label>Female</label><br>
     <input type="submit" value="Send">
    <input type="reset" value="원래대로">
  </form>

</body>
</html>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>title</title>
<style>
label{
  display : inline-block;
  width : 80px;
  height : 20px;
}
form{
  border : 2px dotted orange;
  width : 80%;
  margin : 10px;
  padding : 10px;
}
fieldset{
  border : 1px dotted pink;
  width : 95%;
  margin : 10px;
  padding : 10px;
}
.gend{
  width : 50px;
}
div{
  float : left;
  width : 100px;
  margin-right : 20px;
}
</style>
    <script>
      function proc1(){
              alert("asdf")
            }
    </script>
</head>
<body>
  <form action="aa.jsp" onsubmit="return false;">
    <fieldset>
      <legend>인적사항 입력</legend>
      <label>이름</label> <input autofocus required type="text" name="name" placeholder="ex)홍길동"><br>
      <label>주소</label> <input readonly value="대전" type="text" name="addr" placeholder="ex)시구동"><br>
      <label>전화번호</label> <input type="text" name="tel" title="asdf" pattern="\d{3}-\d{4}-\d{4}"><br>
      <label>성별</label>
      <input type="radio" name="gender1" value="남자">남자
      <input type="radio" name="gender1" value="여자">여자<br>
      <hr>

      <div>
        <label class="gend">남자</label>
        <input type="radio" name="gender2" value="남자">
      </div>
      <div>
        <label class="gend">여자</label>
        <input type="radio" name="gender2" value="여자">
      </div>
    </fieldset>

    <fieldset>
      <legend>경력사항 입력</legend>
      <label>회사이름</label> <input type="text" name="name"><br>
      <label>기간</label> <input type="text" name="addr"><br>
      <label>전화번호</label> <input type="text" name="tel"><br>
    </fieldset>

    <fieldset>
      <legend>봉사활동 입력</legend>
      <label>봉사단체</label> <input type="text" name="name"><br>
      <label>기간</label> <input type="text" name="addr"><br>
      <label>전화번호</label> <input type="text" name="tel"><br>
      <img src="../images/coffee1.jpg" alt="asdf" title="asdf">
    </fieldset>
    <input type="button" onclick="proc1()" value="확인">
    <input type="submit" onclick="proc1()" value="확인">
  </form>

</body>
</html>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>title</title>
<link href="../css/mystyle.css" rel="stylesheet">
<style>
span{
  border-bottom : 3px solid red;
}
</style>
</head>
<body>
  <h2>한개의 항목을 선택</h2>
  <form action="select.jsp" method="get">
    <select name="car1">
      <option value="bmw">BMW</option>
      <option value="소나타" selected>소나타</option>
      <option value="랜드로바">랜드로바</option>
      <option value="제네시스">제네시스</option>
      <option value="그랜저">그랜저</option>
    </select>

    <button type="submit">전송</button>
  </form>

  <pre>
    &lt;select name="car2" <span>multiple="multiple" size="5"</span>>
  </pre>
  <h2>여러개의 항목을 선택</h2>
  <form action="select.jsp" method="get">
    <select name="car2" multiple="multiple" size="5">
      <option value="bmw">BMW</option>
      <option value="소나타" selected>소나타</option>
      <option value="랜드로바">랜드로바</option>
      <option value="제네시스" selected>제네시스</option>
      <option value="그랜저">그랜저</option>
    </select>

    <button type="submit">전송</button>
  </form>

</body>
</html>

<body>
<%
  String car1 = request.getParameter("car1");
  String[] car2 = request.getParameterValues("car2");
  
  String str = "선택한 값 : <br>";
  if(car1 != null) {
    //out.print(car1);
    str += car1; 
  }else if(car2 != null) {
    //car2.stream().out().print();
    //out.print(car2);
    for(String car : car2){
      str += car + "<br>";
    }
  }
%>

<div><%= str %></div>

</body>

<TMI>
프로세스 : 만들어진 프로그램이 있다고 하자.(디스크에 써져있음) 그 프로그램이 실행중일 때 특별히 프로세스라고 말한다. 프로세스란 운영체제에서 실행중인 하나의 프로그램을 의미한다.
default로 제공되는 thread는 main thread, 이건 thread를 하나만 쓴다는 의미에서 single thread라고 함.

1. java프로그램을 실행시킬 때 먼저 MainThread를 위한 callstack이 구성된다
2. 만들어진 callstack에서 main을 찾아서 callstack에 쌓는다.
3. 중간에 start를 만나면 그 start를 호출한 thread를 위해 callstack을 구성한다.
4. 구성한 callstack에 run()을 쌓은 후 메인 메서드로 돌아온다.
5. 이와 같은 작업을 start()를 만날 때마다 반복한다.
6. main이 모두 종료되면 MainThread callstack을 비우고 대기한다.
7. 다른 모든 thread의 callstack이 종료되면 프로그램을 종료한다.

cf) MainThread callstack에서 run()을 호출하는 경우 새로운 thread의 callstack을
구성하지 않고 MainThread callstack에 그대로 run()이 쌓인다. -> 싱글쓰레드

Runnable interface로 thread를 만드는 방법을 사용하는 이유
: Java에서는 class를 최대 1개밖에 extends할수 없기 때문에 이미 다른
클래스를 상속받는 class에 thread의 기능을 부여하기 위해서는 runnable을 
implements하는 방법으로 구현해야 한다.

MultiThread 프로그램의 정상종료시점은 모든 Thread가 terminate될 때이다.
exit명령은 실행시점에 모든 스레드의 상태에 관계없이 프로그램이 종료된다.
setPriority를 준다고 해서 반드시 설정한 우선순위로 스레드가 작동한다고 보장할 수 없다.
