2021.07.14

<이론>
   4) RPAD(c1, n[, c2]), LPAD(c1, n[, c2])
    - RPAD : 지정된 길이 n에 c1을 저장하고 남는 오른쪽 공간에 c2를 삽입한다.
    - LPAD : 지정된 길이 n에 c1을 저장하고 남는 왼쪽 공간에 c2를 삽입한다.
    - c2가 생략되면 공백을 채움

   5) RTRIM(c1[, c2]), LTRIM(c1[, c2])
    - RTRIM : 주어진 문자열 c1 내부에 c2 문자열을 오른쪽에서 찾아 삭제
    - LTRIM : 주어진 문자열 c1 내부에 c2 문자열을 왼쪽에서 찾아 삭제
    - c2가 생략되면 공백을 제거

   6) TRIM(c1)
    - 단어 왼쪽 또는 오른쪽에 발생된 공백을 모두 제거
    - 단어 내부 공백 제거는 불가능

   7) SUBSTR(c, n1[, n2])
    - 주어진 문자열 c에서 n1번째 부터 n2 개의 문자를 추출하여 부분 문자열을 반환
    - 결과도 문자열임
    - n1, n2는 1부터 시작됨
    - n2가 생략되거나 문자의 수보다 큰 n2를 사용하면 n1이후 모든 문자열을 추출함
    - n1이 음수이면 오른쪽을 기준으로 처리됨, 그래도 그 시작문자부터 오른쪽으로 n2개의 문자 추출

   8) REPLACE(c1, c2[,c3])
    - 주어진 문자열 c1에 포함된 c2를 찾아 c3로 치환시킴
    - c3가 생략되면 찾은 c2를 삭제시킴
    - 단어 내부의 공백 제거에 사용될 수 있음

   9) INSTR(c1, c2[, m[, n]])                -- INDEX OF (IN?) STRING
    - 주어진 문자열 c1에서 c2문자열이 처음 나온 위치값을 반환
    - m은 검색 시작위치를 직접 지정할 때 사용
    - n은 c2문자열의 반복 횟수를 정하여 검색하는 경우 사용

2. 숫자함수
 1) GREATEST(n1, n2[, n3,...]), LEAST(n1, n2[, n3,...])
  - GREATEST : 주어진 수 중 가장 큰 값을 반환
  - LEAST : 주어진 수 중 가장 큰 값을 반환

 2) ROUND(n[, i]), TRUNC(n[, i])
  - ROUND : 주어진 수 n의 소수점 이하 i+1번째 자리에서 반올림하여 i번
            MEM_MILEAGE                         AS  "원본 마일리지",째 까지 출력
            i가 음수이면 정수부분 i번째에서 반올림
            i가 생략되면 0으로 간주(소수점 첫 번째 자리에서 반올림)
  - TRUNC : ROUND와 같이 수행되나 반올림이 아니라 절삭처리한다.
<실습>

사용예)    SELECT      LPAD('12345',7,'*')     AS  COL1,
                      RPAD('9876',6)          AS  COL2
          FROM        DUAL;

            SELECT      TO_CHAR(PROD_COST)                  AS  COL1,
                        LPAD(PROD_NAME,30)                  AS  COL2,
                        LPAD(TO_CHAR(PROD_COST),10)         AS  COL3,
                        LPAD(TO_CHAR(PROD_COST),10,'#')     AS  "COST"
            FROM        PROD;

SELECT  MEM_NAME, MEM_HP, MEM_JOB, MEM_MILEAGE
FROM    MEMBER
WHERE   MEM_NAME = TRIM('이혜나 ');

WHERE절에서는 자동적으로 TRIM해서 문자열 비교하지 않음
PL/SQL에서는 문자열을 비교할 때 자동으로 TRIM을 적용한 후 비교함

사용예)    SELECT    SUBSTR('대전시 중구 대홍동', 2, 5),
                    SUBSTR('대전시 중구 대홍동', 2),
                    SUBSTR('대전시 중구 대홍동', 2, 20),
                    SUBSTR('대전시 중구 대홍동', -8, 6)
          FROM      DUAL;

자바의 SUBSTR은 N1과 N2가 모두 인덱스임

사용예) 오늘이 2005년 4월 1일인 경우 CART_NO를 자동 생성하시오.
SELECT      TO_CHAR(SYSDATE, 'YYYYMMDD')||LPAD(TO_CHAR((TO_NUMBER(SUBSTR(MAX(CART_NO),-5)) + 1)),5,'0')       AS  PROCESSING
FROM        CART
WHERE       SUBSTR(CART_NO,1,8) = TO_CHAR(SYSDATE, 'YYYYMMDD');

SELECT      TO_CHAR(SYSDATE, 'YYYYMMDD')||TRIM(TO_CHAR(TO_NUMBER(SUBSTR(MAX(CART_NO),9)) + 1, '00000'))
FROM        CART
WHERE       CART_NO LIKE    '20050401%';

SELECT  MAX(CART_NO) + 1
FROM    CART
WHERE   CART_NO LIKE '20050401%';

사용예)
            SELECT  REPLACE('대전광역시 중구 대홍동', '전광역시', '전시'),
                    REPLACE('대전광역시 중구 대홍동', '광역'),
                    REPLACE('대전광역시 중구 대홍동', ' '),
                    REPLACE('대전광역시 중구 대홍동', '대')
            FROM    DUAL;

사용예)
SELECT  INSTR('APPLE PERSIMON PEAR BEAR', 'E'),
        INSTR('APPLE PERSIMON PEAR BEAR', 'P', 5),
        INSTR('APPLE PERSIMON PEAR BEAR', 'P', 5, 2),
        INSTR('APPLE PERSIMON PEAR BEAR', 'P', 5, 3)
FROM    DUAL;

오라클의 INDEX는 1번부터 시작, 정확히 일치하는 문자열을 찾음,
검색의 대상이 되는 문자열에서 찾는 문자열의 첫 글자가 나온 위치를 반환, 찾지 못했다면 0을 반환

사용예)
SELECT  GREATEST(50, 70, 90),
        LEAST(50, 70, 90)
FROM    DUAL;

사용예)  회원테이블에서 마일리지가 1000미만인 모든 회원의 마일리지를 1000으로 수정 출력하시오.
        Alias는 회원번호, 회원명, 원본 마일리지, 수정 마일리지
        
SELECT      MEM_ID                              AS  회원번호,
            MEM_NAME                            AS  회원명,
            GREATEST(MEM_MILEAGE, 1000)         AS  "수정 마일리지"
FROM        MEMBER;

SELECT      GREATEST(MEM_MILEAGE)
FROM        MEMBER;

SELECT      MAX(MEM_MILEAGE)
FROM        MEMBER;

주의>  ALIAS에 띄어쓰기가 있으면 쌍따옴표를 사용해야 한다.
      GREATEST도 COLUMN 참조가 된다

사용예)  사원테이블에서 급여의 지급액을 계산하여 출력하시오
        Alias는 사원번호, 사원명, 급여, 세금, 지급액
        세금 = 급여액의 17%
        지급액 = 급여액 - 세금
        소수점 1자리까지 출력

SELECT  EMPLOYEE_ID                     AS  사원번호,
        EMP_NAME                        AS  사원명,
        SALARY                          AS  급여,
        TRUNC(SALARY * 0.17,1)          AS  세금,
        SALARY - TRUNC(SALARY * 0.17,1) AS  지급액
FROM    HR.EMPLOYEES;

-- 세금은 요금납부의 개념이니까 깎아줄 수 있도록 TRUNC 사용

사용예)  2005년 1월~3월 제품분류별 평균매입액을 조회하시오.
        Alias 분류코드, 분류명, 평균매입금액
        평균매입금액 정수로 표현
        
        SELECT  분류코드, 분류명, 평균매입금액
        FROM    BUYPROD A, PROD B, LPROD C
        WHERE   A.BUY_PROD = B.PROD_ID
                AND B.PROD_LGU = C.LPROD_GU
                AND     A.BUY_DATE >= TO_DATE('20050101')
                AND     A.BUY_DATE <= (TO_DATE('20050331'));

        SELECT      C.PROD_LGU                              AS  분류코드,
                    B.LPROD_NM                              AS  분류명,
                    ROUND(AVG(A.BUY_QTY * C.PROD_COST),-1)  AS  평균매입금액
        FROM        BUYPROD A, LPROD B, PROD C
        WHERE       A.BUY_PROD = C.PROD_ID
                    AND     C.PROD_LGU = B.LPROD_GU
                    AND     A.BUY_DATE BETWEEN '20050101' AND '20050331'
        GROUP BY    C.PROD_LGU, B.LPROD_NM;

============================================================================

package Programmers;

import java.util.Scanner;
import java.util.Arrays;

public class quickSort{
	
	static int count = 0;
	
	public static void Swap(int[] arr, int idx1, int idx2){
		int temp = arr[idx1];
		arr[idx1] = arr[idx2];
		arr[idx2] = temp;
		count++;
//		System.out.println(Arrays.toString(arr));
	}
	
	public static int Partition(int[] arr, int left, int right){
		int pivot = arr[left];
		int low = left + 1;
		int high = right;
		
		while(true){
			while(arr[low] <= pivot && low < right)				low++;
			while(arr[high] >= pivot && high > left)			high--;
			if(low < high)										Swap(arr, low, high);			
			else												break;
		}
		
		if(left != high)										Swap(arr, left, high);
		
		return high;
	}
	
/*	public static int Partition(int[] arr, int left, int right){
		int pivot = arr[right];
		int low = left;
		int high = right - 1;
		
		while(true){

			while(arr[low] <= pivot && low < right){
				low++;
			}
			while(arr[high] >= pivot && high > left){
				high--;
			}
			if(low < high){
				Swap(arr, low, high);
//				System.out.println(Arrays.toString(arr));			
			}else{
				break;
			}
		}
		if(right != low)		Swap(arr, right, low);
//		System.out.println(Arrays.toString(arr));
		return low;
	}*/
	
	public static void QuickSort(int[] arr, int left, int right){
		
		if( left < right){
			int pivot = Partition(arr, left, right);
			QuickSort(arr, left, pivot - 1);
			QuickSort(arr, pivot + 1, right);
		}
	}
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		System.out.print("배열의 크기를 입력하세요: ");
		int len = Integer.parseInt(sc.nextLine());
		int[] arr = new int[len];

		/*
		int cnt = 0;
		int decision = 0;
		int rand;
			while(cnt != len){
			decision = 0;
			rand = (int)(Math.random() * 100) + 1;
			for(int i = 0; i < cnt; i++){
				if(arr[i] == rand){
					decision++;
				}
			}
			if(decision == 0){
				arr[cnt] = rand;
				cnt++;
			}
			
		}*/

        for(int i = 0; i < len ; i++){
            arr[i] = (int)(Math.random() * 100) + 1;
        }
/*		 for(int i = 0; i < len ; i++){
	            arr[i] = i;
	        }*/
		
/*		int len = 8;
		int[] arr = new int[len];
		arr[0] = 1;
		arr[1] = 3;
		arr[2] = 8;
		arr[3] = 4;
		arr[4] = 2;
		arr[5] = 7;
		arr[6] = 6;
		arr[7] = 5;*/
		System.out.println(Arrays.toString(arr));
		
		System.out.println();
		
		QuickSort(arr, 0, len - 1);
		
		System.out.println(Arrays.toString(arr));
		
		System.out.println(count);
		

	}

}
package d_array;

import java.util.Arrays;
import java.util.Scanner;
//컨트롤 쉬프트 o

public class Quiz {

	public static void main(String[] args) {
		
		int money = (int)(Math.random() * 500) * 10;
/*		int[] coin = {500, 100, 50, 10};
		
		System.out.println("거스름돈 : " + money);
		*/
		/*
		 * 거스름돈에 동전의 단위마다 몇개의 동전이 필요한지 출력하세요.
		 * 
		 *  거스름돈 : 2860원
		 *  500원 : 5개
		 *  100원 : 3개
		 *  50원 : 1개
		 *  10원 : 1개
		 */
		
/*		int coinCount500 = 0;
		int coinCount100 = 0;
		int coinCount50 = 0;
		int coinCount10 = 0;*/
		
/*		while(true){
			if(money - (coinCount500 + 1) * 500 >= 0)	coinCount500++;
			else{
				money -= coinCount500 * 500;
				break;
			}
		}
		while(true){
			if(money - (coinCount100 + 1) * 100 >= 0)	coinCount100++;
			else{
				money -= coinCount100 * 100;
				break;
			}
		}
		while(true){
			if(money - (coinCount50 + 1) * 50 >= 0)	coinCount50++;
			else{
				money -= coinCount50 * 50;
				break;
			}
		}
		while(true){
			if(money - (coinCount10 + 1) * 10 >= 0)	coinCount10++;
			else{
				money -= coinCount10 * 10;
				break;
			}
		}*/
		
/*		coinCount500 = money / 500;
		money -= coinCount500 * 500;
		coinCount100 = money / 100;
		money -= coinCount100 * 100;
		coinCount50 = money / 50;
		money -= coinCount50 * 50;
		coinCount10 = money / 10;
		money -= coinCount10 * 10;
		
		
		
		System.out.println("500원 : " + coinCount500 + "개");
		System.out.println("100원 : " + coinCount100 + "개");
		System.out.println("50원 : " + coinCount50 + "개");
		System.out.println("10원 : " + coinCount10 + "개");
		*/
		
/*		int[] coinArr = new int[4];
		for(int i = 0; i < 4; i++){
			coinArr[i] = money / coin[i];
			money -= coinArr[i] * coin[i];
			System.out.println(coin[i]+"원 : " + coinArr[i] + "개");
		}*/
		/*
		 * coin = {6, 4, 1}
		 * => 최소공배수 12, 주기는 12마다 반복됨
		 * input
		 * 0 -> 0
		 * 1 -> 1 * 1
		 * 2 -> 1 * 2
		 * 3 -> 1 * 3
		 * 4 -> 4 * 1
		 * 5 -> 4 * 1 + 1 * 1
		 * 6 -> 6 * 1
		 * 7 -> 6 * 1 + 1 * 1
		 * 8 -> 4 * 2
		 * 9 -> 4 * 2 + 1 * 1
		 * 10 -> 6 * 1 + 4 * 1
		 * 11 -> 6 * 1 + 4 * 1 + 1 * 1
		 * 12 -> 6 * 2
		 */
		
		Scanner sc = new Scanner(System.in);
		System.out.println("시작");
		money = Integer.parseInt(sc.nextLine());
		int one = 0;
		int four = 0;
		int six = 0;
		six = (money / 12) * 2;
		
		switch(money % 12){
		case 0:			
			break;
		case 1:
			one++;
			break;
		case 2:	
			one += 2;
			break;
		case 3:	
			one += 3;
			break;
		case 4:	
			four++;
			break;
		case 5:	
			one++;
			four++;
			break;
		case 6:	
			six++;
			break;
		case 7:	
			six++;
			one++;
			break;
		case 8:	
			four += 2;
			break;
		case 9:
			four += 2;
			one++;
			break;
		case 10:
			six++;
			four++;
			break;
		case 11:
			six++;
			four++;
			one++;
			break;
		}
		
		System.out.println("six : " + six + "four : " + four + "one : " + one);
		/*
		 * 1~5사이의 숫자가 발생된 만큼 *을 사용해 그래프를 그려주세요.
		 * 
		 * 1 : *** 3
		 * 2 : **** 4
		 * 3 : ** 2
		 * 4 : ***** 5
		 * 5 : ****** 6
		 */
		/*int[] arr = new int[20];
		int len = arr.length;
		for(int i = 0; i < len; i++){
			arr[i] = (int)(Math.random() * 5) + 1;
		}
		System.out.println(Arrays.toString(arr));
		int[] totCount = new int[5];
		
		for(int i = 0; i < len; i++){
			totCount[arr[i] - 1]++;
		}
		for(int i = 0; i < totCount.length; i++){
			System.out.print((i + 1) + " : ");
			for(int j = 0 ; j < totCount[i]; j++){
				System.out.print("*");
			}
			System.out.println("\t\t" + totCount[i]);
		}
		*/
		/*int[] arr = new int[10];
		for(int i = 0; i < arr.length; i++){
			arr[i] = (int)(Math.random() * 5) + 1;
		}
		System.out.println(Arrays.toString(arr));
		
		
		 * 1~5사이의 랜덤한 값이 10개 저장된 배열에서 중복된 값이 제거된 배열을 만들어주세요.
		 * [3, 5, 3, 2, 1, 3, 2, 1, 4, 1]
		 * [3, 5, 2, 1, 4]
		 
		int count = 0;
		int[] testArr = new int[10];
		for(int i = 0; i < arr.length; i++){
			boolean flag = true;
			for(int j = 0; j < i; j++){
				if(arr[i] == testArr[j]){
					flag = false;
					break;
					}
				}
			if(flag){
				testArr[count] = arr[i];
				count++;
			}
		}
		System.out.println(Arrays.toString(testArr));
		
		int[] noDuplicatedArr = new int[count];
		for(int i = 0; i < count; i++){
			noDuplicatedArr[i] = testArr[i];
		}
		System.out.println(Arrays.toString(noDuplicatedArr));
		
		System.out.println(114 % 12);*/
	}

}
package Programmers;

import java.util.Arrays;
import java.util.Scanner;

public class heap {
	
	static int numOfData = 0;
	
	public static boolean IsParent(int[] arr, int idx){
		if(idx * 2 <= numOfData)	return true;
		else						return false;
	}
	
	public static void Insert(int[] arr, int value){
		numOfData++;
		int temp = numOfData;
		arr[temp] = value;
		while(true){
			while(true){
				if(value < arr[temp / 2])//작으면 올라가라
				{
					arr[temp] = arr[temp / 2];
					temp /= 2;
				}//끝까지 올라옴!
				else			break;
			}
			arr[temp] = value;
			break;
		}
	}//최소힙이므로 root가 가장 작길 원한다.
	
	public static int Delete(int[] arr){
		if(numOfData >= 1){
			if(numOfData == 1){
				int pop = arr[1];
				arr[1] = 0;
				numOfData--;
				return pop;
			}
			int pop = arr[1];
			int value = arr[numOfData];
			arr[numOfData] = 0;
			numOfData--;
			//자식이 있는지 아닌지 체크
			
			int temp = 1;

			while(true){
//					System.out.println(numOfData);
				if( !IsParent(arr, temp) )	break;
				int comp;
				if(temp * 2 == numOfData)						comp = temp * 2;
				else if(arr[temp * 2] < arr[temp * 2 + 1])		comp = temp * 2;
				else											comp = temp * 2 + 1;
				
				if(value > arr[comp]){
					arr[temp] = arr[comp];
					temp = comp;
				}else	break;
			}
			arr[temp] = value;
			return pop;
		}
		System.out.println("데이터없음, 오류!");
		return -65536;
	}
	
	public static void main(String[] args) {
		
		int[] rndArr = new int[20];
		int[] arr = new int[rndArr.length + 1];
		for(int i = 0; i < rndArr.length; i++){
			rndArr[i] = (int)(Math.random() * 100) + 1;
			Insert(arr, rndArr[i]);
		}
		System.out.println(Arrays.toString(rndArr) + "\n");
		for(int i = 0; i < rndArr.length; i++){
			rndArr[i] = Delete(arr);
		}
		System.out.println(Arrays.toString(rndArr));
	}

}


<TMI>

데이터베이스는 자료를 정확하게 보관하기 위한 도구,
나중에는 데이터베이스를 고급언어에서 사용할 것임, 데이터 베이스 자체에서 예쁘게 출력하는 것이 아니라
따로 예쁘게 출력하는 기능은 고급 언어에서 사용. 그래서 RAPD, LPAD는 자주 사용하지 않음
LPAD는 문자열 자료를 오른쪽 정렬하려 할 때 사용(숫자로 된 문자열을 오른쪽 정렬하고 싶을 때)
LTRIM, RTRIM은 무효의 공백을 제거(문자열의 한 쪽 끝의 연속된 공백을 제거)
문자열의 내부 공백을 제거할 때는 다른 함수 사용

카르테시안 곱

A = {1,2}
B = {a, b, c}

A X B = {(1,a), (1,b), (1,c), (2,a), (2,b), (2,c)}

        SELECT * FROM BUYPROD;
        SELECT * FROM LPROD;
        SELECT * FROM PROD;
        SELECT * FROM BUYPROD, LPROD;
        SELECT * FROM BUYPROD, PROD;
        SELECT * FROM PROD, LPROD;
        SELECT * FROM BUYPROD, LPROD, PROD;

OO별 : 해당하는 것을 기준으로 묶어야 함 / GROUP BY 필요
매입액 = 단가 * 수량
집계함수 사용시 반드시 GROUP BY 필요, 뒤에 오는 것은 SELECT에서 선택하지 않은 모든 컬럼을 써주면 된다

GREATEST와 MAX의 차이: GREATEST는 값을 나열해야 함, MAX를 컬럼과 같이 쓰면 반드시 GROUP BY를 써야 하지만 GREATEST는 아님.
EX) GREATEST(MEM_MILEAGE) <- 문법오류는 아니네... 그냥 컬럼이 다 나오는데?

연말정산시 ROUND사용(돈을 받을 때는 반올림), 요금을 낼 때는 TRUNC 사용
돈을 줄 때는 ROUND, 돈을 받을 때는 TRUNC
데이터베이스는 정확한 자료를 제공할 의무가 있음.
데이터베이스 차원에서는 어지간하면 반올림 하지 말자. 데이터의 처리는 고급 언어에서


테이블 별칭이 반드시 쓰여져야 하는 경우 : 두 테이블에서 같은 컬럼명을 가지고 있는 경우, 소속 테이블명을 확실하게 밝혀줘야 함.
                                     그러나 그 테이블명이 너무 긴 경우 별칭을 사용하여 접근한다.
별칭부여하기 싫어서 테이블 컬럼명을 다른 이름을 썼네   <-  정신 나갔네
외래키, 관계가 있는 테이블의 관계를 구성하는 컬럼은 이름이 같아야 한다.

별칭부여방법 1. 객체를 만들어서 부여하는 방법, 동의어객체 생성, SYNONYM (CREATE SYNONYM)

테이블이 2개 이상 사용되면 JOIN이 사용되어야 함. 테이블이 N개가 사용되면 조인조건은 적어도 N-1개 이상 사용한다.
