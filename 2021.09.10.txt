2021.09.10
<이론>
/*
 * Singleton 패턴이란...
 * => 객체(인스턴스)를 한 개만 만들어지게 하는 프로그래밍 기법
 *
 * - Singleton Class를 구성하는 방법
 *   1. 자기 자신class의 참조변수를 멤버변수로 선언한다.
 *   (이 변수는 private static으로 지정한다.)
 *
 *   2. 생성자를 private으로 한다.
 *   (외부에서 생성자에 접근을 못하게 하기 위해서 즉, 외부에서 new 명령을 
 *   사용하지 못하게 하기 위해서)
 *
 *   3. 객체(인스턴스)는 내부에서 생성해서 이 생성된 객체를 반환하는 메서드를 만든다.
 *   (이 메서드의 이름은 보통 getInstance()로 지정한다. 이 메서드는 static으로 지정한다.)
 *
 *
 * class method = static method : 객체를 만들지 않아도 호출할 수 있는 메서드
 */
사용할 수 있는 기본적인 태그들...
    <select> ~~~ </select>
    <insert> ~~~ </insert>
    <update> ~~~ </update>
    <delete> ~~~ </delete>

    위 태그에서 사용되는 속성들

    1) id속성 : 해당 태그를 호출할 때 <sqlMap>태그의 namespace와 연결하여 사용하는 이름
    2) parameterClass속성 : sql문에 사용될 데이터가 들어있는 객체를 지정한다.
                            (보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
                            (typeAlias로 지정한 alias명이 사용될 수 있다.)
    3) resultClass속성 : select문을 실행한 결과를 담을 객체를 지정한다.
                            (보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
                            (typeAlias로 지정한 alias명이 사용될 수 있다.)
    4) resultMap속성 : 결과 레코드 컬럼명과 VO객체의 property명이 다를 경우에 적절한
                       매핑을 위해 사용한다.
/**
    VO에 대하여...
 * DB테이블에 있는 컬럼을 기준으로 데이터를 객체화한 클래스이다.
 * @author PC-22
 *
 * <p>
 *  DB테이블의 '컬럼'이 이 클래스의 '멤버변수'가 된다<br>
 *  DB테이블의 컬럼과 클래스의 멤버변수를 매핑하는 역할을 수행한다.<br>
 * </p>
 */

javaDoc문서 만들기:
/**
*/
로 지정된 주석 안에 @author @param @return등을 이용하여 작성한다.
보통 프로젝트 단위로 
Export -> javadoc -> Next를 반복하다가
Finish가 있는 창에서
-encoding UTF-8
를 추가한다.
설정한 경로에 javadoc으로 만든 html이 생겼다.
<실습>
// 자신의 class를 참조하는 멤버변수 선언
private static MySingleton single;

// 생성자를 private으로 지정한다.
private MySingleton() {
    System.out.println("생성자 입니다.");
}

public static MySingleton getInstance() {
    if(single == null) {
        single = new MySingleton();
    }
    return single;
}

===SqlMapConfig.xml===
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMapConfig
    PUBLIC "-//ibatis.apache.org//DTD SQL Map Config 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-config-2.dtd">

<sqlMapConfig>
	<properties resource="SqlMapConfig.properties" />
	<settings cacheModelsEnabled="true" enhancementEnabled="true"
		lazyLoadingEnabled="true" maxRequests="32" maxSessions="10"
		maxTransactions="5" useStatementNamespaces="true" />

	<typeAlias alias="memVO" type="kr.or.ddit.member.vo.MemberVO"/>

	<transactionManager type="JDBC">
		<dataSource type="SIMPLE">
			<property name="JDBC.Driver" value="${driver}" />
			<property name="JDBC.ConnectionURL" value="${url}" />
			<property name="JDBC.Username" value="${username}" />
			<property name="JDBC.Password" value="${password}" />
			<!-- 커넥션 개수를 1개로 설정함. -->
			<property name="Pool.MaximumActiveConnections" value="1"/>
			<property name="Pool.MaximumIdleConnections" value="1"/>
		</dataSource>
	</transactionManager>

    <sqlMap resource="kr/or/ddit/basic/memberTest.xml"/>
</sqlMapConfig>

# SqlMapConfig.properties
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE
username=LKH96
password=java

// iBatis를 이용하여 DB자료를 처리하는 작업 순서
// 1. iBatis의 환경설정 파일을 읽어와 실행시킨다.
try{
    // 1-1. xml설정문서 읽어오기
    // 설정파일의 인코딩 설정
    Charset charset = Charset.forName("UTF-8");
    Resources.setCharset(charset);

    Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");

    // 1-2. 위에서 읽어온 Reader객체를 이용하여 실제 작업을 진행할 객체 생성
    SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

    rd.close(); // Reader 객체 닫기

    // 2. 실행할 SQL문에 맞는 쿼리문을 호출해서 원하는 작업을 수행한다.
    // 2-1. insert작업 연습
    
    System.out.println("insert작업 시작...");

    // 1) 저장할 데이터를 VO에 담는다.
    MemberVO mv = new MemberVO();
    mv.setMemId("d002");
    mv.setMemName("강감찬");
    mv.setMemTel("333-3333");
    mv.setMemAddr("경남 전주시");

    // 2) SqlMapClient객체 변수를 이용하여 해당 쿼리문을 실행한다.
    // 형식) smc.insert("namespace값.id값", 파라미터클래스);
    //       반환값 : 성공하면 null이 반환된다.
    //
    Object obj = smc.insert("memberTest.insertMember", mv);
//            int cnt2 = smc.update("memberTest.insertMember", mv);

//            if(cnt2 > 0) {
//            	System.out.println(cnt2);
    if(obj == null) {
        System.out.println("insert작업 성공!");
    }else {
        System.out.println("insert작업 실패!");
    }

    System.out.println("------------------------------------------------");
    // 2-2. update 연습
    System.out.println("update작업 시작..."); 
    MemberVO mv2 = new MemberVO();
    mv2.setMemId("d001");
    mv2.setMemName("조명석");
    mv2.setMemTel("444-3333");
    mv2.setMemAddr("대전시 중구");

    // update()메서드의 반환값은 성공한 레크드 수이다.
    int cnt = smc.update("memberTest.updateMember", mv2);

    if(cnt > 0) {
        System.out.println("update 작업 성공!");
    }else {
        System.out.println("update작업 실패!");
    }

    // 2-3. delete 연습
    System.out.println("delete연습 시작...");

    // delete()메서드의 반환값 : 성공한 레코드 수

    cnt = smc.delete("memberTest.deleteMember","d001");

    if(cnt > 0) {
        System.out.println("delete 작업 성공!");
    }else {
        System.out.println("delete작업 실패!");
    }
    System.out.println("------------------------------------------------");

    // 2-4. select 연습
    // 1) 응답의 결과가 여러개인 경우...
    
    System.out.println("select연습(결과가 여러개인 경우...)");

    // 응답결과가 여러개일 경우에는 queryForList메서드 사용한다.
    // 이 메서드는 어래개의 레코드를 VO에 담은 후 이 VO데이터를 List에
    // 추가해 주는 작업을 자동으로 수행한다.
    List<MemberVO> memList =
        smc.queryForList("memberTest.selectAllMember");
    for(MemberVO memVO : memList){
        System.out.println("ID : " + memVO.getMemId());
        System.out.println("이름 : " + memVO.getMemName());
        System.out.println("전화 : " + memVO.getMemTel());
        System.out.println("주소 : " + memVO.getMemAddr());
    }
    System.out.println("출력 끝...");
}catch(IOException ex){
    ex.printStackTrace();
}catch(SQLException ex){
    ex.printStackTrace();
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
			PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
			"http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="memberTest">

    <insert id="insertMember" parameterClass="kr.or.ddit.member.vo.MemberVO">
        insert into mymember 
        (mem_id, mem_name, mem_tel, mem_addr)
        values (#memId#, #memName#, #memTel#, #memAddr#)
    </insert>
    <update id="updateMember" parameterClass="memVO">
        update mymember
        set mem_name = #memName#,
            mem_tel = #memTel#,
            mem_addr = #memAddr#
        where mem_id = #memId#
    </update>
    <delete id="deleteMember">

        delete from mymember where mem_id = #memId#

    </delete>
    <select id="selectAllMember" resultClass="memVO">
    	select mem_id memId
    		   ,mem_name memName
    		   ,mem_tel memTel
    		   ,mem_addr memAddr
    	  from mymember
    </select>
</sqlMap>			






<TMI>
singleton pattern - 객체를 인스턴스로 만들어야 되는상황에서
객체를 단 하나만 생성해야 할 필요가 있을 때 사용한다.

ibatis
Framework를 통해서 보일러플레이트 코드(Boilerplate code)를 줄일 수 있다.
주) 최소한의 변경으로 여러 곳에서 재사용되며, 반복적으로 비슷한 형태를 띄는 코드

쿼리와 자바코드를 분리시킬 수 있다.

Framework가 편하다 = 그 Framework에 익숙할 때

Framework는 약속이기 때문에 유지보수가 좋아진다. (한 개발자에게 코드가 종속되지 않게 됨)
코드는 한번 만드는 것으로 끝나는게 아니기 때문에 유지보수가 중요하다.

iBatis에서 parameter가 들어오는 경우 java에서 넣어준 그 datatype을 이용하여 parameterClass를 유추해준다.
-> parameterClass를 명시해주지 않아도 실행가능하다.

iBatis에서 넣어준 인자가 하나일 경우/##에서 사용하는 변수가 하나인 경우는
자동적으로 넘어온 인자를 사용한다. 이때 ##안에서 사용하는 변수명은 아무거나 다 된다.
