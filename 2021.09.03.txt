2021.09.03
<이론>
/*
 * 람다식 => 익명함수를 생성하기 위한 식,
 *      자바에서는 '매개변수를 가진 코드블럭' => 런탐임시 익명구현객체로 생성됨.
 * 형식) 인터페이스명 객체변수명 = 람다식;
 *
 * 람다식의 형식) (매개변수들...) -> {처리할 코드들; ...}
 *
 * => 람다식으로 변환할 수 있는 인터페이스는 추상메서드가 1개인 인터페이스만 가능함.
 *    이런 인터페이스를 '함수적 인터페이스(Functional Interface)'라고 한다.
 *    이 함수적 인터페이스를 만들 때는 @FunctionalInterface로 지정한다.
 */
/*
 * 람다식의 작성 방법
 *
 * 기본형식) (자료형이름 매개변수명, ...) -> {실행문들;...}
 *
 * 1) 매개변수의 '자료형이름'은 생략할 수 있다.
 * 예) (int a)-> {System.out.println(a);}
 * (a)->{System.out.println(a);}
 *
 * 2) 매개변수가 1개일 경우에는 괄호'()'를 생략할 수 있다.
 * (단, '자료형이름'을 지정할 경우에는 괄호를 생략할 수 없다.)
 * 예) a->{System.out.println(a);}
 *
 * 3) '실행문'이 1개일 경우에는 '{ }'를 생략할 수 있다.
 * (이때 문장의 끝을 나타내는 세미콜론(;)도 생략한다.)
 * 예) a->System.out.println(a)
 *
 * 4) 매개변수가 하나도 없으면 괄호 '( )'를 생략할 수 없다.
 * 예) ()->System.out.println("안녕")
 * 
 * 5) 반환 값이 있을 경우에는 return명령을 사용한다.
 * 예) (a,b)->{ return a+b;}
 *     (a,b)-> return a+b;
 *
 * 6) 실행문에 return문만 있을 경우 return명령과 '{ }'를 생략할 수 있다.
 * 예) (a, b) -> a + b
 *
 */
  // File객체 만들기 연습
  //
  // 1. new File(String 파일 또는 경로명)
  //    => 디렉토리와 디렉토리 사이 또는 디렉토리와 파일명 사이의
  //       구분문자는 '/'를 사용하거나 '\'를 사용할 수 있다.
  // 2. new File(File parent, String child)
  // => 'parent'디렉토리 안에 있는 'child'파일 또는 디렉토리
  // 3. new File(String parent, String child)
  /*
   * 디렉토리(폴더) 만들기
   *
   * 1. mkdir() => File객체의 경로 중 마지막 위치의 디렉토리를 만든다.
   *               중간의 경로가 모두 미리 만들어져 있어야 한다.
   * 2. mkdirs() => 중간의 경로가 없으면 중간의 경로도 새롭게 만든 후
   *                마지막 위치의 디렉토리를 만들어 준다.
   *
   * => 위 두 메서드 모두 만들기를 성공하면 true, 실패하면 false를 반환함.
   */
  // read()메서드 => byte단위로 자료를 읽어와 int형으로 반환한다.
  //                 더 이상 읽어올 자료가 없으면 -1을 반환한다.
  // fileIO는 OS의 영역, os Call(system Call?)을 해서 이루어진다.

  // 사용자가 입력한 내용을 그대로 파일로 저장하기
  //
  // 콘솔(표준입력장치)과 연결된 입력용 문자기반 스트림 생성
  // InputStreamReader => 바이트 기반 스트림을 문자기반 스트림으로 
  //                      변환해주는 보조스트림이다.
//	보조스트림은 일반스트림을 보조하는 역할을 한다.
// 따라서 일반스트림 없이는 보조스트림은 존재할 수 없다(Daemon Thread 같은 존재)
// 그래서 보조스트림의 생성자에는 일반스트림을 파라미터로 받는다.
// 콘솔입력을 처리하기 위한 인풋스트림이 System.in이다.
// Try-with-resources!

/*
 * InputStreamReader는 파일의 인코딩 방식을 지정할 수 있다.
 * 
 * 예) new InputStreamReader(바이트기반 스트림객체, 인코딩방식);
 *
 * 인코딩 방식에 대하여...
 *
 * 한글 인코딩 방식은 크게 UTF-8과 EUC-KR로 나뉜다.
 * 원래 한글윈도우는 CP949방식을 사용했는데 윈도우를 개발한 마이크로소프트에서
 * EUC-KR방식에서 확장하였기 때문에 MS949라고도 부른다.
 * 한글 윈도우의 메모장에서 말하는 ANSI 인코딩이란, CP949(Code Page 949)를
 * 말한다. CP949는 EUC-KR의 확장이며, 하위호환성이 있다.
 *  - MS949 => 윈도우의 기본 한글 인코딩 방식(ANSI계열)
 *  - UTF-8 => 유니코드 UTF-8 인코딩 방식(영문자 및 숫자: 1byte, 한글: 3byte)
 *  - US-ASCII => 영문 전용 인코딩 방식
 * ANSI는 영어를 표기하기 위해 만든 코드로 규격 자체에 한글이 없었다가 나중에
 * 여기에 EUC-KR, CP949 등이 도입되며 한길이 포함되었음.
 *
 * 참고) 
 * ASCII => extended ASCII(ISO 8859-1) => 조합형(초성,중성,종성),완성형(KSC 5601)
 * ------------------------------------------------------------------------------
 *       => 유닉스 계열: EUC-KR(확장 유닉스 코드)
 *       => 윈도우 계열: CP949(확장 완성형) - 일부 문자(8822자)를 추가함
 * ------------------------------------------------------------------------------
 *       => ANSI계열 : EUC-KR
 *       => 유니코드(UTF-8)
 */
  /*
   * OutputStreamWriter => OutputStream(바이트기반 출력용 객체)를
   *                       Writer(문자기반 출력용 객체)로 변환하기 위한 클래스
   *      => 이 객체도 출력할 때 '인코딩 방식'을 지정해서 출력할 수 있다.
   */
  // 키보드로 입력한 내용을 파일로 저장하는데 out_utf8.txt파일은
  // 'utf-8'인코딩 방식으로 out_ansi.txt파일은 'ms949'인코딩 방식으로 저장한다.
<실습>
@FunctionalInterface
public interface T02_LambdaTestInterface1 {
    // 반환값이 없고 매개변수도 없는 추상메서드 선언
    public void test();
}
@FunctionalInterface
interface T02_LambdaTestInterface2 {
    // 반환값이 없고 매개변수는 있는 추상메서드 선언
    public void test(int a);
}
@FunctionalInterface
interface T02_LambdaTestInterface3 {
    // 반환값이 있고 매개변수도 있는 추상메서드 선언
    public int test2(int a, int b);
//    public void test(int a);
}
        // 람다식을 사용하지 않았을 경우
    	T02_LambdaTestInterface1 lam1 = new T02_LambdaTestInterface1(){

            @Override
            public void test(){
                System.out.println("안녕하세요");
                System.out.println("익명 구현 객체 방식입니다.");
            }
        };
        lam1.test();

        T02_LambdaTestInterface1 lam2 =
            ()->System.out.println("반가워요\n람다식으로 처리하는 방식입니다.");
        lam2.test();
        
        T02_LambdaTestInterface2 lamTest2 = a->System.out.println(a);
        
        lamTest2.test(10);
        
        T02_LambdaTestInterface3 lamTest3 = (a,b)-> a + b;
        T02_LambdaTestInterface3 lamTest4 = (a,b)-> {return a + b;};
//        T02_LambdaTestInterface3 lamTest5 = (a,b)-> return (a + b);
        
        System.out.println(lamTest3.test2(10, 20));
        T02_LambdaTestInterface2 lam3 =
        		(int z) -> {
        			int result = z + 100;
        			System.out.println("result = " + result);
        		};
        		
		lam3.test(30);
		
		T02_LambdaTestInterface2 lam4 = z->{ int result = z + 300; System.out.println("result = " + result);};
		lam4.test(20);
		
		T02_LambdaTestInterface2 lam5 = 
				z->System.out.println("result = " + (z+500)); 
				
		lam5.test(60);
		
		
		T02_LambdaTestInterface3 lam6 =
				(int x, int y)->{
					int r= x+y;
					return r;
				};
		int k = lam6.test2(20,50);
		System.out.println("k = " + k);
		
		T02_LambdaTestInterface3 lam7 =
				(x,y) -> {
					return x+y;
				};
		k= lam7.test2(30,50);
		System.out.println("k = " + k);
		
		T02_LambdaTestInterface3 lam8 = (x,y)-> x+y;
		k= lam8.test2(100,150);
		System.out.println("k = " + k);
		
		T02_LambdaTestInterface3 lam9 = (x,y) -> x >y ? x:y;
		k = lam9.test2(100,200);
		System.out.println("k = " + k);
Thread th1 = new Thread(new Runnable(){

    @Override
    public void run(){
        for(int i=1; i<=10; i++){
            System.out.println(i);
        }
    }
});
th1.start();

// 람다식을 사용하는 경우
Thread th2 = new Thread(
        ()->{
            for(int i=1; i<=10; i++){
                System.out.println("람다 - " + i);
            }
        }
        );
th2.start();

        List<String> list = Arrays.asList("홍길동", "이순신", "변학도");
        list.forEach(name -> System.out.println(name));

===
        File file = new File("d:/D_Other/test.txt");
        System.out.println("파일명 : " + file.getName());
        System.out.println("파일여부 : " + file.isFile());
        System.out.println("디렉토리(폴더) 여부 : " + file.isDirectory());
        System.out.println("----------------------------------------");

        File file2 = new File("d://D_Other");
        System.out.print(file2.getName() + "은 ");

        if(file2.isFile()){
            System.out.println("파일");
        }else if(file2.isDirectory()){
            System.out.println("디렉토리(폴더)");
        }
        System.out.println("----------------------------------------");

        File file3 = new File(file2, "test.txt");
        System.out.println(file3.getName() + "의 용량 크기 : " + file3.length() + "bytes");

        File file4 = new File("./D_Other/test/..", "test.txt");
        System.out.println("절대 경로 : " + file4.getAbsolutePath());
        System.out.println("경로 : " + file4.getPath());
        System.out.println("표준경로 : " + file4.getCanonicalPath());
        System.out.println("----------------------------------------");

        File file5 = new File("d:/D_Other/연습용");
        if(file5.mkdir()){
            System.out.println(file5.getName() + "만들기 성공!");
        }else{
            System.out.println(file5.getName() + "만들기 실패!!");
        }
        System.out.println();
        File file6 = new File("d:/D_Other/test/java/src");
        if(file6.mkdirs()){
            System.out.println(file6.getName() + "만들기 성공!");
        }else{
            System.out.println(file6.getName() + "만들기 실패!!");
        }
        System.out.println();
    }


===
        //File f1 = new File("d:/D_Other" + File.separator + "sample.txt");
        File f1 = new File("d:/D_Other/sample.txt");
        File f2 = new File("d:/D_Other/test.txt");

        if(f1.exists()){
            System.out.println(f1.getAbsolutePath()
                    + "은 존재합니다.");
        }else{
            System.out.println(f1.getAbsolutePath()
                    + "은 없는 파일입니다.");
        }
        try{
            if(f1.createNewFile()){
                System.out.println(f1.getAbsolutePath()
                        + "파일을 새로 만들었습니다.");
            }

        }catch(IOException ex){
            ex.printStackTrace();
        }

        if(f2.exists()){
            System.out.println(f2.getAbsolutePath()
                    + "은 존재합니다.");
        }else{
            System.out.println(f2.getAbsolutePath()
                    + "은 없는 파일입니다.");
        }
        System.out.println("=========================================");

        File f3 = new File("d:/D_Other");
        File[] files = f3.listFiles();
        for(File f : files){
            System.out.print(f.getName() + " => ");
            if(f.isFile()){
                System.out.println("파일");
            }else if(f.isDirectory()){
                System.out.println("디렉토리");
            }
        }

        System.out.println("=========================================");
        String[] strFiles = f3.list();
        for(String str : strFiles){
            System.out.println(str);
        }
        System.out.println("=========================================");
        System.out.println();

        //=============================================================
        //
        //출력할 디렉토리 정보를 갖는 File객체 생성

        File f4 = new File("D:/D_Other");

        displayFileList(f4);
    }
    
    /*
     * 지정된 디렉토리(폴더)에 포함된 파일과 디렉토리 목록을 보여주는 메서드
     */
    private static void displayFileList(File dir){
        System.out.println("[" + dir.getAbsolutePath() + "] 디렉토리의 내용");

        // 디렉토리 안의 모든 파일 목록을 가져온다.
        File[] files = dir.listFiles();

        // 하위 디렉토리 정보를 저장할 ArrayList 생성(File배열의 첨자 지정)
        List<Integer> subDirList = new ArrayList<Integer>();

        // 날짜를 출력하기 위한 형식 지정
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd a hh:mm");

        for(int i=0; i<files.length; i++){
            // 파일의 속성(읽기, 쓰기, 히든, 디렉토리 구분)
            String attr = "";
            String size = ""; // 파일 용량

            if(files[i].isDirectory()){
                attr = "<DIR>";
                subDirList.add(i); // 첨자를 List에 추가함.
            }else{
                size = files[i].length() + "";
                attr = files[i].canRead() ? "R" : " ";
                attr += files[i].canWrite() ? "W" : " ";
                attr += files[i].isHidden() ? "H" : " ";
            }
            System.out.printf("%s|%-5s|%-12s|%s\n",
                    sdf.format(new Date(files[i].lastModified())),
                        attr, size, files[i].getName());
            // %5s는 기본적으로 우측정렬
            // %-5s는 좌측정렬
        }

        int dirCount = subDirList.size(); // 폴더 안의 하위폴더 수
        int fileCount = files.length - dirCount; // 폴더 안 파일 수 

        System.out.println(fileCount + "개의 파일, " + dirCount + "개의 디렉토리");
        System.out.println();
        
        for(int i=0; i<subDirList.size(); i++) {
        	// 하위 폴더의 내용들도 출력하기 위해 현재 메서드를 재귀호출하여 처리한다.
        	displayFileList(files[subDirList.get(i)]);
        }
    }

    ===

    public static void main(String[] args) throws IOException {
        byte[] inSrc = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, -1, 15};
        byte[] outSrc = null;


        // arraycopy를 이용한 배열 복사하기
        outSrc = new byte[inSrc.length];
        System.arraycopy(inSrc, 0, outSrc, 0 , inSrc.length);

        System.out.println("arraycopy이용... outSrc => ");
        System.out.println(outSrc);
        // 스트림 선언 및 객체 생성
        ByteArrayInputStream bais = null; // 스트림 객체 선언
        bais = new ByteArrayInputStream(inSrc); // 객체 생성

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        int data; // 읽어온 자료를 저장할 변수

        System.out.println("읽기 시작");
        while((data = bais.read()) != -1){
            // 읽는 족족 data에 대입하고 그 값이 -1과 다르다면 반복문 실행
            baos.write(data); // 출력하기
            System.out.println(data);
        }
        System.out.println("읽기 종료");

        outSrc = baos.toByteArray();

        System.out.println("inSrc => " + Arrays.toString(inSrc));
        System.out.println("outSrc => " + Arrays.toString(outSrc));

        // 스트림 객체 닫기
        // 스트림은 생성한 후에 닫는다.
        bais.close();
        baos.close();
    }

    ===

        byte[] inSrc = {0,1,2,3,4,5,6,7,8,9};
        byte[] outSrc = null;

        byte[] temp = new byte[4]; // 자료 읽을 때 사용할 배열

        ByteArrayInputStream bais = new ByteArrayInputStream(inSrc);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try{

            // available() => 읽어 올 수 있는 byte수를 반환
            while(bais.available() > 0){
                // temp배열 크기만큼 자료를 읽어와 temp배열에 저장한다.
            	//bais.read(temp);
//
                //baos.write(temp); // temp배열의 내용을 출력한다.

                // 버퍼로 읽어들인 byte수를 반환한다.
                int len = bais.read(temp);

                // temp배열의 내용 중에서 0번째 부터 len개수만큼 출력한다.
                baos.write(temp, 0, len);

                System.out.println("temp : " + Arrays.toString(temp));

            }
            outSrc = baos.toByteArray();

            System.out.println("inSrc => " + Arrays.toString(inSrc));
            System.out.println("outSrc => " + Arrays.toString(outSrc));
        }catch(IOException ex){
            ex.printStackTrace();
        }finally{
            try{
                bais.close();
                baos.close();
            }catch(IOException ex){
                ex.printStackTrace();
        }
    }

    ===

        // FileInputStream객체를 이용한 파일 내용 읽기
        FileInputStream fis = null; // 변수선언

        try{
            // 객체 생성
            File file = new File("d:/D_Other/test2.txt");
            fis = new FileInputStream(file); // 생성

            int c; // 읽어온 데이터를 저장할 변수

            // 읽어온 값이 -1이면 파일의 끝까지 읽었다는 의미이다.
            while((c=fis.read()) != -1){
                // 읽어온 자료 출력하기
                System.out.print((char)c);
            }
            System.out.println();
        }catch(IOException ex){
            ex.printStackTrace();
        }finally{
            try{
                fis.close(); // 작업 완료 후 스트림 닫기
            }catch(IOException ex){
                ex.printStackTrace();
            }
        }

        ===

        // 파일에 출력하기
        FileOutputStream fos = null;

        try{
            //출력용 OutputStram객체 생성
            fos = new FileOutputStream("d:/D_Other/out.txt");
            for(char ch='a'; ch<='z'; ch++){
                fos.write(ch);
            }
            System.out.println("파일에 쓰기 작업 완료");

            // 쓰기 작업 완료 후 스트림 닫기
            fos.close();

            //=======================================================================
            //저장된 파일의 내용을 읽어와 화면에 출력하기
            FileInputStream fis = new FileInputStream("d:/D_Other/out.txt");
            int c;
            while((c = fis.read()) != -1){
                System.out.print((char)c);
            }
            // 한글이 깨져서 나옴 : java의 char은 2바이트, char단위로 file을 읽어야 함
            // -> 문자기반 stream의 필요성
            System.out.println();
            System.out.println("출력 끝...");

            fis.close();
        }catch(IOException ex){
            ex.printStackTrace();
        }/*finally{
            try{
            }catch(IOException ex){
                ex.printStackTrace();
            }
        }*/

===

        try(
        		InputStreamReader isr = new InputStreamReader(System.in);
        		FileWriter fw = new FileWriter("d:/D_Other/testChar.txt"); // 파일 출력용 문자기반 스트림
        		)
        
        {
        	
            // 파일 출력용 문자 스트림 객체 생성
//            fw = new FileWriter("d:/D_Other/testChar.txt");

            System.out.println("아무거나 입력하세요.");
            int c;

            // 콘솔에서 입력할 때 입력의 끝 표시는 Ctrl + Z 키를 누르면 된다.

            while((c = isr.read()) != -1){
                fw.write(c); // 콘솔에서 입력받은 값을 파일에 출력하기
            }

            System.out.println("작업 끝");

//            isr.close();
//            fw.close();
        }catch(IOException ex){
            ex.printStackTrace();
        }

==

        // 문자 기반의 스트림을 이용한 파일 내용 읽기
        try(
                // 문자단위의 입력을 담당하는Reader형 객체 생성
//                FileReader fr = new FileReader("d:/D_Other/testChar.txt");
                 FileInputStream fr = new FileInputStream("d:/D_Other/testChar.txt");
                // 바이트 단위로 읽기 때문에 한글이 깨져서 나온다
                ){
            int c;
            while((c=fr.read()) != -1){
                System.out.print((char)c);
            }
        }catch(IOException ex){
            ex.printStackTrace();
        }

        ===

        // 파일 인코딩을 이용하여 읽어오기
        try( 
             FileInputStream fis = new FileInputStream("d:/D_Other/test_ansi.txt");
             //FileInputStream fis = new FileInputStream("d:/D_Other/test_utf8.txt");
             InputStreamReader isr = new InputStreamReader(fis, "euc-kr")
             //InputStreamReader isr = new InputStreamReader(fis, "cp949")
             //InputStreamReader isr = new InputStreamReader(fis, "ms949")
             //InputStreamReader isr = new InputStreamReader(fis, "utf-8")
             )
        {
            int c;
            while((c=isr.read()) != -1){
                System.out.print((char)c);
            }
            System.out.println();
            System.out.println("출력 끝");
        }catch(IOException ex){
            ex.printStackTrace();
        }

        ===


    public static void main(String[] args) {


        try(
            InputStreamReader isr = new InputStreamReader(System.in);
            // 파일 출력용
            FileOutputStream fos1 = new FileOutputStream("d:/D_Other/out_utf8.txt");
            FileOutputStream fos2 = new FileOutputStream("d:/D_Other/out_ansi.txt");
            OutputStreamWriter osw1 = new OutputStreamWriter(fos1, "utf-8");
            OutputStreamWriter osw2 = new OutputStreamWriter(fos2, "ms949");)
        {
            int c;
            System.out.println("아무거나 입력하세요");
            while((c=isr.read()) != -1){
                osw1.write(c);
                osw2.write(c);
            }
            System.out.println("작업완료");
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }
<TMI>
문자기반 스트림
문자단위로 스트림을 처리하기 위한 스트림을 말한다.
Reader는 입력용 문자기반 스트림이다.
Writer는 출력용 문자 스트림이다.
Reader나 Writer가 스트림 이름에 붙어 있다면, 문자기반 스트림이다.
문자기반 스트림은 문서(Text)파일을 입출력하기에 적합하다

FileOutputStrean(String name, boolean append);
append가 true이면 붙여넣겠다는 의미이다.

InputStreamReader : Byte기반 스트림을 문자기반 스트림으로 바꾸기 위해 사용
보조스트림, 인코딩방식 지정가능 OutputStreamWriter도 같음
