2021.07.29

<이론>
 4) MINUS
  - MINUS 연산자 앞에 위치한 쿼리의 결과에서 MINUS 뒤에 기술된 쿼리의 결과를
    차감한 결과 반환

등수계산(RANK 함수)
  - 성적, 급여, 매출 등의 순위를 구할때 사용
  - ORDER BY 절과 ROWNUM의 컬럼은 오라클의 WHERE절과 ORDER BY절의 실행 순서때문에 정확한 결과 반환이 불가능 함
  - 이를 해결하기 위해 RANK와 DENSE_RANK, ROW_NUMBER 함수 제공
  - RANK와 DENSE_RANK 함수의 차이점
   - RANK : 중복 순위가 발생하면 중복된 수 만큼 다음순위값을 증가      (EX 1,1,1,4,5,5,7,...)
   - DENSE_RANK : 중복 순위가 발생해도 다음 순위는 순차적인 값을 배정  (EX 1,1,1,2,3,3,4,...)
   - ROW_NUMBER : 중복에 관계없이 순차 순위값 배정                   (EX 1,2,3,4,5,6,7,...)
  - SELECT 절에서 사용
  (사용형식)
   SELECT 컬럼LIST
          RANK() OVER(ORDER BY 기준 컬럼명 DESC|ASC) AS 컬럼별칭
                :
     FROM 테이블명;            

오라클에서 수행되는 절들은 각각의 순서가 있기 때문에 사용자가 원하는 방법으로 제어할 수 없음
(EX ORDER BY 이후에 ROWNUM을 적용시키지 못함)

=====================================================================================

String
- 여러개의 문자를 사용하기 쉽게 만들어 놓은 클래스

String의 주요 메서드
- equals() : 문자열의 내용이 같은지 반환한다.
- length() : 문자열의 길이를 반환한다.
- charAt() : 특정 인덱스에 위치한 문자를 반환한다. 리턴타입은 char이다.
- substring() : 문자열의 특정 부분을 잘라서 반환한다.	2개의 파라미터를 받을 때 첫 번째 입력숫자는 시작 인덱스, 두 번째 입력숫자 - 1이 끝나는 인덱스
- indexOf() : 문자열 내의 특정 문자의 인덱스를 반환한다.
- contains() : 문자열이 특정 문자열을 포함하고 있는지 여부를 반환한다.
- split() : 문자열을 특정 문자를 기준으로 나누어 배열형태로 반환한다.
- trim() : 문자열 앞뒤의 공백을 제거해 반환한다.
- valueOf() : 다른 타입의 데이터를 문자열로 변환해 반환한다.

프로그램 자체가 api, 프로그램을 사용하는 방법이 라이브러리

null인 객체는 메서드를 사용할 수 없다.

형변환(문자열 -> 데이터타입)
Byte.parseByte(s);
Float.parseFloat(s);
Double.parseDouble(s);
Integer.parseInt(s);
Long.parseLong(s);
Boolean.parseBoolean(s);
Short.parseShort(s);

형변환(데이터타입 -> 문자열)
String.valueOf()

trim : 사용자의 입력실수를 방지하기 위하여 사용한다.

long end = System.currentTimeMillis();
현재시간을 ms단위로 표현해서 long타입으로 반환

String은 변경을 가하면 객체를 새로 생성한다.

정규표현식 : 문자열의 패턴을 검사하는 표현식

^	뒷 문자로 시작													^a : a로 시작해야 한다
$	앞 문자로 종료													a$ : a로 끝나야 된다
.	임의의 문자(줄바꿈 제외)
*	앞 문자가 0개 이상
+	앞 문자가 1개 이상
?	앞 문자가 없거나 1개
[]	문자의 집합이나 범위([a-z]:a부터 z까지, [^a-z]:a부터 z가 아닌 것)
{}	앞 문자의 개수({2}:2개, {2,4}:2개 이상 4개 이하)
()	그룹화(1개의 문자처럼 인식)
|	OR연산
\s	공백, 탭, 줄바꿈
\S	공백, 탭, 줄바꿈이 아닌 문자
\w	알파벳이나 숫자
\W	알파벳이나 숫자가 아닌 문자
\d	숫자
\D	숫자가 아닌 문자
(?i)	뒷 문자의 대소문자 구분 안함
\	정규표현식에서 사용되는 특수문자 표현


<실습>
사용예)장바구니테이블에서 4월과 5월에 판매된 상품 중 4월만 판매된 상품의 상품번호, 상품명, 수량합계, 판매금액합계를 구하시오
--(4월 상품별 판매 집계)
SELECT B.PROD_ID AS "상품번호",
       B.PROD_NAME AS "상품명"
--       SUM(A.CART_QTY) AS "수량합계",
--       SUM(A.CART_QTY * B.PROD_PRICE) AS "판매금액합계"
  FROM CART A, PROD B
 WHERE A.CART_PROD = B.PROD_ID
       AND SUBSTR(A.CART_NO,1,6) = '200504'
 GROUP BY B.PROD_ID, B.PROD_NAME
MINUS
--(5월 상품별 판매 집계)
--SELECT B.PROD_ID AS "상품번호",
--       B.PROD_NAME AS "상품명"
--       SUM(A.CART_QTY) AS "수량합계",
--       SUM(A.CART_QTY * B.PROD_PRICE) AS "판매금액합계"
--  FROM CART A, PROD B
-- WHERE A.CART_PROD = B.PROD_ID
--       AND SUBSTR(A.CART_NO,1,6) = '200505'
-- GROUP BY B.PROD_ID, B.PROD_NAME
--MINUS
--(7월 상품별 판매 집계)
SELECT B.PROD_ID AS "상품번호",
       B.PROD_NAME AS "상품명"
--       SUM(A.CART_QTY) AS "수량합계",
--       SUM(A.CART_QTY * B.PROD_PRICE) AS "판매금액합계"
  FROM CART A, PROD B
 WHERE A.CART_PROD = B.PROD_ID
       AND SUBSTR(A.CART_NO,1,6) = '200507'
 GROUP BY B.PROD_ID, B.PROD_NAME

사용예)회원테이블에서 마일리지가 많은 회원부터 차례대로 순위(등수)를 부여하시오
      회원번호, 회원명, 마일리지, 등수

SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_MILEAGE AS "마일리지",
       DENSE_RANK() OVER(ORDER BY MEM_MILEAGE DESC) AS "등수"
  FROM MEMBER;

RANK함수의 OVER절에 들어가는 컬럼은 수식을 취할 수 있다.
하지만 서브쿼리는 취할 수 없다.
SELECT 절에서 부여한 컬럼별칭으로 접근할 수 없다.

사용예)회원테이블에서 마일리지가 많은 회원부터 차례대로 순위(등수)를 부여하고 상위 5명의
      회원번호, 회원명, 마일리지, 등수를 출력하시오
SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_MILEAGE AS "마일리지",
       MRANK AS "등수"
  FROM (SELECT MEM_ID, MEM_NAME, MEM_MILEAGE,
               RANK() OVER(ORDER BY MEM_MILEAGE DESC) AS MRANK
          FROM MEMBER)
--  WHERE MRANK <=5;
 WHERE ROWNUM <= 5;
 
SELECT MEM_ID, MEM_NAME, MEM_MILEAGE,
       RANK() OVER(ORDER BY MEM_MILEAGE DESC) AS MRANK
  FROM MEMBER
 WHERE ROWNUM <= 5;
 
SELECT A.MID AS 회원번호,
       B.MEM_NAME AS 회원명,
       B.MEM_MILEAGE AS 마일리지,
       A.MRK AS 등수
  FROM MEMBER B,
       (SELECT MEM_ID AS MID,
               RANK() OVER(ORDER BY MEM_MILEAGE DESC) AS MRK
          FROM MEMBER) A
 WHERE A.MID = B.MEM_ID
       AND A.MRK <= 5;
       
사용예)장바구니 테이블에서 2005년 5월 구매금액이 많은 회원부터 순위를 부여하여        
      회원번호, 회원명, 구매금액, 순위를 출력하시오
SELECT A.MEM_ID AS "회원번호",
       A.MEM_NAME AS "회원명",
       B.AMT AS "구매금액",
       RANK() OVER(ORDER BY AMT DESC) AS "순위"
  FROM MEMBER A,
       (SELECT B.MEM_ID AS MID,
               SUM(A.CART_QTY * C.PROD_PRICE) AS AMT
          FROM CART A, MEMBER B, PROD C
         WHERE A.CART_MEMBER = B.MEM_ID
               AND A.CART_PROD = C.PROD_ID
               AND SUBSTR(A.CART_NO,1,6) = '200505'
         GROUP BY B.MEM_ID, B.MEM_NAME
         ORDER BY 2) B
 WHERE A.MEM_ID = B.MID;
 
SELECT B.MEM_ID AS "회원번호",
       B.MEM_NAME AS "회원명",
       SUM(A.CART_QTY * C.PROD_PRICE) AS "구매금액",
       RANK() OVER(ORDER BY SUM(A.CART_QTY * C.PROD_PRICE) DESC) AS "순위"
  FROM CART A, MEMBER B, PROD C
 WHERE A.CART_MEMBER = B.MEM_ID
       AND A.CART_PROD = C.PROD_ID
       AND SUBSTR(A.CART_NO,1,6) = '200505'
 GROUP BY B.MEM_ID, B.MEM_NAME;
 
RANK의 내부의 ORDER BY가 해당 SELECT문을 정렬시켜준다.
RANK OVER(ORDER BY 컬럼명)에서 컬럼명에 집계함수가 있으면 이 컬럼은 GROUP BY 에 기술하지 않아도 된다(집계컬럼 취급된다)
만약 여기서의 컬럼명에 집계함수가 없었다면 일반컬럼으로 취급되어 GROUP BY절에 기술해야 한다.

SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_MILEAGE AS "마일리지",
--       RANK() OVER(ORDER BY MEM_MILEAGE DESC) AS "등수"
--       DENSE_RANK() OVER(ORDER BY MEM_MILEAGE DESC) AS "등수"
       ROW_NUMBER() OVER(ORDER BY MEM_MILEAGE DESC) AS "등수"       
  FROM MEMBER;

=====================================================================================


boolean equals = "문자열".equals("문자열");
		System.out.println(equals);
		
		String str1 = "문자열";
		String str2 = null;
		System.out.println(str1.equals(str2));
//		System.out.println(str2.equals(str1));

String str = "12345";
		int length = str.length();
		for(int i = 0; i < length; i++){
			char charAt = str.charAt(i);
			System.out.println(charAt);
		}
		String rev = "";
		for(int i = length - 1; i >= 0; i--){
			rev += str.charAt(i);
		}
		System.out.println(rev);
		
		str = "0123456789";
		String sub1 = str.substring(3);
		System.out.println(sub1);
		String sub2 = str.substring(5, 8);
		System.out.println(sub2);
		
		str = "수박\n\t 오렌지 귤 블루베리";
		int index = str.indexOf("오렌지");
		System.out.println(index);

String[] menu = {
				"수박 20000원",
				"오렌지 100000원",
				"귤 500원",
				"블루베리 3000원"
		};
		
		for(int i = 0; i < menu.length; i++){
			String name = menu[i].substring(0,menu[i].indexOf(" "));
			System.out.println(name);
		}
		for(int i = 0; i < menu.length; i++){
//			String name = menu[i].substring(menu[i].indexOf(" ") + 1, menu[i].length() - 1);
			int price = Integer.parseInt(menu[i].substring(menu[i].indexOf(" ") + 1, menu[i].indexOf("원")));
//			int price = Integer.parseInt(menu[i].substring(menu[i].indexOf(" ") + 1));		//에러
			System.out.println(price);
		}
		//integer.parseint : 문자열을 숫자로 변환
		int testint = 0;
		double testdouble = 0;
		System.out.println(String.valueOf(testint));
		System.out.println(String.valueOf(testdouble).length());
		
		str = "abcd";
		boolean contains = str.contains("abcde");
		System.out.println(contains);

for(int i = 0; i < menu.length; i++){
			if(menu[i].contains("오렌지")){
				System.out.println("오렌지는 " + i + "번 인덱스에 있습니다.");
			}
		}
		
		str = "a/b/c";
		String[] split = str.split("/");
		System.out.println(Arrays.toString(split));
		
		for(int i = 0; i < menu.length; i++){
			String[] s = menu[i].split(" ");
			System.out.println("이름: " + s[0] + " / 가격: " + s[1]);
		}
		str = "  문자열   ";
		String trim = str.trim();
		System.out.println("[" + str + "] -> [" + trim + "]");
		
		//trim : 사용자의 입력실수를 방지하기 위하여 사용한다.
		
		String id = " myid";
		String password = "mypassword ";
		System.out.println(id);
		System.out.println(password);
		System.out.println(id.trim());
		System.out.println(password.trim());
		
		int num = 10;
		str = num + "";
		str = String.valueOf(num);
		
		String[][] test = new String[menu.length][2];
		for(int i = 0; i < menu.length; i++){
			test[i] = menu[i].split(" ");
			System.out.println(Arrays.toString(test[i]));

String str = "a";
		long start = System.currentTimeMillis();
		for(int i = 0; i < 200000; i++){
			str += "a";
		}
		long end = System.currentTimeMillis();
		//현재시간을 ms단위로 표현해서 long타입으로 반환
		System.out.println(end - start + "ms");

StringBuffer sb = new StringBuffer("a");
long start = System.currentTimeMillis();
		for(int i = 0; i < 200000; i++){
			sb.append("a");
		}
		long end = System.currentTimeMillis();
System.out.println(end - start + "ms");

package i_api;

import java.util.Scanner;


		/*
		 * 숫자를 입력받아 입력받은 숫자에 3자리마다 콤마(,)를 붙여 출력해주세요.
		 * 1,234,567
		 * 
		 */
		Scanner sc = new Scanner(System.in);
		System.out.print("숫자를 입력해주세요: ");
		String input = sc.nextLine();
		System.out.println(input);
		String temp = "";
		String temp2 = "";
		int j = 0;
		for(int i = input.length() - 1; i >= 0; i--){
			if(j > 0 && j % 3 == 0){
				temp += ",";
			}
			temp += input.charAt(i);
			j++;
		}
		for(int i = temp.length() - 1; i >= 0; i--){
			temp2 += temp.charAt(i);
		}
		System.out.println(temp2);
		System.out.println(addComma(input));
		
		/*
		 * int count = 0;
		 * for(int i = num.length() - 1; i >=0; i--){
		 * 		num2 = num.charAt(i) + num2;
		 * 		count++;
		 * 		if(count % 3 == 0 && count != num.length()){
		 * 			num2 = "," + num2;
		 * 		}
		 * }
		 */
	}
	static String addComma(String input){
		if(input.length() <= 3)
			return input;
		String tempstr = input.substring(0, input.length() - 3);
		String remainder = input.substring(input.length() - 3, input.length());
		String temp = "";
		switch(input.length() % 3){
		case 0:
			for(int i = 0; i < tempstr.length(); i++){
				temp += tempstr.charAt(i);
				if(i % 3 == 2)					temp += ",";
			}
			break;
		case 1:
			for(int i = 0; i < tempstr.length(); i++){
				temp += tempstr.charAt(i);
				if(i % 3 == 0)					temp += ",";
			}
			break;
		case 2:
			for(int i = 0; i < tempstr.length(); i++){
				temp += tempstr.charAt(i);
				if(i % 3 == 1)					temp += ",";
			}
			break;
		}
		temp += remainder;
		return temp;
	}
}

String str = "Abcccc";
//		String regex = "abc123";
//		String regex = "[a-z]{3}[0-9]{1,3}";
//		String regex = "[a-z0-9]+";
//		String regex = "\\w{20}*";
		String regex1 = "[a-zA-Z0-9_-]{5,20}";
		String regex2 = "[0-9-]{9,13}";
		String regex3 = "\\w{1,20}[@]+\\w{1,20}[.]+\\w{3}";
//		String regex3 = "\\w{1,20}[@]+";
		
//		System.out.println("이메일 입력");
		System.out.println("전화번호 입력");
//		System.out.println("이메일 입력");
		str = ScanUtil.nextLine();
		
		//아이디 : [a-z0-9_-]{5,20}
		//전화번호 : ^0\\d{1,3}-\\d{3,4}-||d{4}
		//이메일주소 : [a-z0-9_-]{5,20}@[a-zA-Z]+\\.(?i)(com|net|org|([a-z]{2}\\.kr))$
		
		Pattern p = Pattern.compile(regex3);
		Matcher m = p.matcher(str);
		System.out.println(m.matches());
		
		//아이디, 전화번호, 이메일주소의 유효성을 검사하는 정규표현식을 만들어주세요.

<TMI>

쿼리의 궁극적 목적 : 의사결정의 기초자료 제공
연습해야 하는 쿼리는 실생활에서 조회할 쿼리, 연습을 위한 쿼리는 의미가 없다.

디자인 패턴 - 클래스를 만드는 규칙
싱글톤 패턴 : 가장 간단한 디자인패턴, 객체생성은 한번만 하고 이후 참조만 하는 형식
MVC(TWO) 패턴 : 가장 널리 사용하는 패턴, 자바의 근간이 되는 패턴, 데이터베이스를 연결할 때 반드시 적용됨

침체기 상승곡선 

명수를 기준으로 할 때와 순위를 기준으로 할 때에 따라서 결과의 개수가 달라질 수 있다.
영업실적별로 상위 5개의 부서를 포상한다고 하면 DENSE_RANK()를 쓰는 것이 자연스럽다
상위 5명만 포상을 한다면 RANK를 써야 한다.
단, 1등이 6명이면 업무규칙에 따라서 처리하게 된다(명수를 기준으로 할 때)
ROW_NUMBER는 소팅해 놓고 행번호를 부여하는 방식
