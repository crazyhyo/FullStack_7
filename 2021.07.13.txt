2021.07.13

<이론>
2021-0713-01)
  3. 날짜 자료
   - DATE, TIMESTAMP 타입제공
   - 덧셈과 뺄셈의 대상
   1)DATE
    - 기본 날짜형
   (사용형식)
    컬럼명 DATE
     - 년월일시분초 정보를 저장관리
     - 날짜형 자료의 뺄셈 : 두 날짜사이의 일수 반환                   -- 시분초까지 나옴, 날짜만 지정시 0시 0분 0초부터 지금 9시 26분을 빼면 1/4보다 조금 큰 수 반환 // NUMBER TYPE
     - 날짜형 + 정수 : '날짜'에서 '정수' 만큼 경과된 후의 날짜 반환
     - 날짜형 - 정수 : '날짜'에서 '정수' 만큼 과거의 날짜 반환

   2)TIMESTAMP
    - 시간대 정보와 정교한 시간(10억분의 1초) 제공
   (사용형식)
    컬럼명 TIMESTAMP;                          - 시간대 정보 없는 날짜 정보
    컬럼명 TIMESTAMP WITH TIME ZONE;           - 시간대 정보(도시명/대륙명)와 날짜 정보
    컬럼명 TIMESTAMP WITH LOCAL TIME ZONE;     - 서버가 설치된 지역의 시간대 정보(도시명/대륙명)와 날짜 정보

  4. 기타 자료
   - 2진 자료를 저장
   - RAW, LONG RAW, BLOB, BFILE
   
  1) BFILE
   - 2진 자료 저장
   - 원본자료를 데이터베이스 외부에 저장하고 데이터베이스에는 경로정보만 보관
   - 4GB 까지 저장
  (사용형식)
   컬럼명 BFILE;
    - 오라클에서는 원본자료(2진자료)에 대하여 해석하거나 변환하지 않음.
    - 2진자료 저장을 위해 DIRECTORY 객체가 필요

  2) BLOB
   - 2진 자료저장
   - 4GB 까지 저장 가능
   - 원본자료를 데이터베이스 내부에 저장
  (사용형식)
   ** BLOB 사용순서
     (1)테이블 생성
     (2)디렉토리객체 생성
     (3)익명블록 생성

2021-0713-02)함수(FUNCTION)
  - 특정 결과를 반환하기 위하여 미리 작성하여 컴파일된 모듈
  - 반환값이 존재
  - 서버와 네트워크 성능 개선에 기여
  - 단일행 함수와 복수행 함수(집계함수:SUM,AVG,COUNT,MAX,MIN)로 구분
  - 문자열, 숫자, 날짜, 형변환, NULL처리, 집계함수 등이 있음
  - 중첩사용 할 수 있음
  
  1. 문자열 함수
   1) || (문자열 결합 연산자)
    - 자바의 문자열에서 사용되는 '+'와 같음            -- 같은 기능인 CONCAT, APPEND 메서드 있음, 근데 잘 안씀
    - 두 문자열을 결합하여 새로운 문자열을 반환

   2) CONCAT(C1, C2)
    - 주어진 문자열 자료 C1과 C2를 결합하여 반환 (파라미터는 2개 뿐임)

   3) ASCII(C1), CHR(N1)
    - ASCII(C1) : C1에 해당하는 문자를 반환
    - CHR(N1) : 숫자 N1에 해당하는 ASCII 코드값 반환

======================================================================================

<실습>
사용예)    CREATE  TABLE   T_DATE(
            COL1    DATE,
            COL2    DATE,
            COL3    TIMESTAMP,
            COL4    TIMESTAMP WITH TIME ZONE,
            COL5    TIMESTAMP WITH LOCAL TIME ZONE
            );

INSERT INTO T_DATE    VALUES(SYSDATE, TO_DATE('20201015')+30,SYSDATE,SYSDATE,SYSDATE);
SELECT * FROM T_DATE;

SELECT  TO_CHAR(COL1, 'YYYY-MM-DD PM HH24:MI:SS'),
        TRUNC(COL1-COL2)
FROM    T_DATE;

사용예)
    CREATE TABLE    T_BFILE(
        COL1 BFILE
    );
   
   1.디렉토리 객체 생성
    CREATE DIRECTORY 디렉토리명 AS 절대경로명;
    
    CREATE DIRECTORY TEMP_DIR AS 'D:\A_TeachingMaterial\2.Oracle';
    
    2.이미지 자료 저장
     INSERT INTO 테이블명
        VALUES(BFILENAME(디렉토리 별칭, '파일명'));
        
    INSERT INTO T_BFILE
        VALUES(BFILENAME('TEMP_DIR', 'sample.jpeg'));
        
    SELECT * FROM T_BFILE;

사용예)
    a)테이블 생성
    1)CREATE TABLE T_BLOB(
        COL1 BLOB);
        
    b)디렉토리 생성
        TEMP_DIR 사용
        
    c)익명블록 생성
    
    DECLARE
        L_DIR VARCHAR2(20) := 'TEMP_DIR';
        L_FILE VARCHAR2(30) := 'sample.jpeg';
        L_BFILE BFILE;
        L_BLOB BLOB;
    BEGIN
        INSERT INTO T_BLOB(COL1) VALUES(EMPTY_BLOB())
            RETURN COL1 INTO L_BLOB;
        L_BFILE := BFILENAME(L_DIR, L_FILE);
        DBMS_LOB.FILEOPEN(L_BFILE, DBMS_LOB.FILE_READONLY);
        DBMS_LOB.LOADFROMFILE(L_BLOB,L_BFILE,DBMS_LOB.GETLENGTH(L_BFILE));
        DBMS_LOB.FILECLOSE(L_BFILE);
        
        COMMIT;
    END;
    
    SELECT  *   FROM    T_BLOB;

DECLARE
    (선언영역)
        변수  /   상수  /   커서가 나옴
        할당연산자가 := 임
        디렉토리 명은 20바이트까지 사용가능
        파일명은 30바이트까지 사용가능
BEGIN

        INSERT INTO T_BLOB(COL1) VALUES(EMPTY_BLOB())       --초기화, 빈 BLOB를 넣음
            RETURN COL1 INTO L_BLOB;
            
        SELECT INTO FROM WHERE  PL/SQL의 실행순서
            RETURN COL1 INTO L_BLOB;    --COL1을 L_BLOB에다가 넣어준다, BLOB는 COL1으로 배정되었음
        파일에서 데이터 읽는 법:
            파일을 연다                                    여는 권한 선택   
            얼마나 읽을지 크기를 지정하여 그 크기만큼 읽는다    <- 2진자료를 BFILE의 길이만큼 잘라서 그만큼을 읽어서 L_BLOB에다가 가져다둔다.
            파일을 닫는다                                   

END;

사용예)회원테이블에서 충남에 거주하는 회원정보를 조회하시오.
        Alias는 회원번호, 회원명, 주민번호, 주소이며 주민번호는 'XXXXXX-XXXXXXX'형식으로 출력
SELECT      MEM_ID                              AS  회원번호,
            MEM_NAME                            AS  회원명,
            MEM_REGNO1  ||'-'||     MEM_REGNO2  AS  주민번호,
            MEM_ADD1    ||' '||     MEM_ADD2    AS  주소
FROM        MEMBER
WHERE       SUBSTR(MEM_ADD1,1,2) = '충남'
ORDER BY    1;
--      WHERE   MEM_ADD1    LIKE    '충남%'

사용예)회원테이블에서 충남에 거주하는 회원정보를 조회하시오.
        Alias는 회원번호, 회원명, 주민번호, 주소이며 주민번호는 'XXXXXX-XXXXXXX'형식으로 출력
SELECT      MEM_ID                                      AS  회원번호,
            MEM_NAME                                    AS  회원명,
            CONCAT(CONCAT(MEM_REGNO1,'-'),MEM_REGNO2)   AS  주민번호,
            CONCAT(CONCAT(MEM_ADD1,' '),MEM_ADD2)       AS  주소,
            CONCAT(MEM_ID,MEM_REGNO1)                   AS  TEST        --  CHAR랑 VARCHAR2도 합칠 수 있음
FROM        MEMBER
WHERE       SUBSTR(MEM_ADD1,1,2) = '충남'
ORDER BY    1;    

사용예)
    SELECT ASCII(PROD_ID), CHR(65) FROM PROD;
    SELECT ASCII(MEM_ID), CHR(65) FROM MEMBER;
사용예)
DECLARE

BEGIN
    FOR I IN 1..255 LOOP
        DBMS_OUTPUT.PUT_LINE(I||'='||CHR(I));               --CHR(37)은 %임!
    END LOOP;
END;

======================================================================================

<TMI>
통신사에서 요금은 1원단위는 절삭함(반올림시 컴플레인 대상)
이유 : 1원단위 처리비용 > 절삭비용
LOCAL SERVER는 가상의 서버, 

실무에서 사용할 데이터베이스의 DATE TYPE 형식이 어떻게 설정되어 있을지는 모르는 경우가 많음
그렇기 때문에 실무에서는 데이터베이스의 날짜를 고급언어에서 문자열로 가져와서 필요시 날짜로 변환하여 사용한다.

JPG, BMP, PNG는 사진의 압축방법을 의미한다.

RWX
-R : READABLE
-w : writerable
-x : excutable

. : 나의 위치
.. : 나의 상위 위치
cd : change directory
cd .. : 나의 위로 감

한글로 파일명을 쓰면 인식을 못함

범위가 지정된 날짜는 BETWEEN을 사용하고 그렇지 않은 경우도 문자열로 사용하지 마라. 에러가 안떠서 더 문제인거다.
D가 하나면 주차(N주차), DD는 그 월의 경과된 일수, DDD는 그 년도의 경과된 일수
AM을 썼다고 해서 오전이 나오고 PM을 썼다고 해서 오후가 나오지 않음. 둘 모두 같은 기능으로 오전 오후를 구분해 주겠다는 이야기.
RAW, LONG RAW는 너무 사이즈가 작아서 요즘 안씀.
BLOB(Binary Large Object)
BLOB, BFILE은 모두 4GB까지
BLOB는 테이블의 컬럼 안에 2진자료를 저장, BFILE은 데이터베이스 외부에 저장
저장된 2진자료를 사진으로 보고 싶다면 데이터베이스 영역은 아님. 보려면 고급언어에서 처리해야 함.
2진 자료 뿐 아니라 16진수 자료도 저장가능
경로 : 드라이브명부터 자료가 저장되어 있는 폴더까지의 경로를 절대경로라고 함
윈도우의 폴더를 도스/리눅스/유닉스에서는 디렉토리라고 함.
DIR(cmd) = LS(unix/linux)  -A(all)
DOS = DISK OPERATOR SYSTEM
객체는 CREATE로 생성, DROP으로 제거
다른 응용프로그램에서도 많이 사용하고 자주 사용하는 파일은 따로 저장하는것이 좋음

사용자 뿐만 아니라 데이터베이스 관리자의 기능을 공부하고 싶다면 :
<그림으로 공부하는 오라클 구조>	책추천

2번째 프로젝트~마지막 프로젝트는 서버에 있는 데이터베이스 사용

DB에는 객체지향이 적합X

객체지향의 특징
1. 상속지원
2. 다형성			POLYMORPHISM
3. 정보의 은닉화(캡슐화)	

이것을 지원하지 않는 언어 : 비주얼 베이직 <- 객체기반언어

자바/jsp 등에서 연동하여 처리하기 위하여 데이터베이스 배움   
자바에서 취급하는 날짜자료 타입과 오라클에서 취급하는 날짜자료 타입이 다름       <-  이게 핵심문제
그래서 오라클에서 날짜를 문자열로 저장하고 자바에서 그 문자열을 날짜로 변환하여 사용하는 경우 많음.
일정한 형식에 맞추어 날짜 표현 위해서는 그레고리안 캘린더, 심플
날짜를 표시해주는 경우는 CSS나 HTML, JAVA SCRIPT 등에서 지원되는 api 사용.
순수자바의 날짜처리 클래스 보다 다른 좋은 API를 많이 쓴다.
DATE 타입은 DATE 타입끼리 뺄 수 있음, DATE 타입을 정수와 더하고 뺄 수 있음
날짜: 년, 월, 일, 시, 분, 초로 구성.   날짜를 문자열로 바꾸어 format으로 출력하여 시, 분, 초 접근. (일반적 방법으론 시분초 접근 어려움)
TIMESTAMP는 TIME ZONE 정보를 가지고 있음(지구 지역에 따라 시간이 다름, 타임존 정보 필요) WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE
날짜형 + 정수의 경우 그냥 30만 더하면 윤년, 평년까지 계산해줌 -> 회원권 마지막 날은 그냥 그 날짜에 회원권 기간 날짜만큼 더하면 된다는 얘기
가산세, 벌금 등에 날짜형
TIMESTAMP도 차이계산 가능, 이것을 이용하여 시차 계산 가능

범위가 지정된 날짜는 BETWEEN을 사용하고 그렇지 않은 경우도 문자열로 사용하지 마라. 에러가 안떠서 더 문제인거다.
D가 하나면 주차(N주차), DD는 그 월의 경과된 일수, DDD는 그 년도의 경과된 일수
AM을 썼다고 해서 오전이 나오고 PM을 썼다고 해서 오후가 나오지 않음. 둘 모두 같은 기능으로 오전 오후를 구분해 주겠다는 이야기.
RAW, LONG RAW는 너무 사이즈가 작아서 요즘 안씀.
BLOB(Binary Large Object)
BLOB, BFILE은 모두 4GB까지
BLOB는 테이블의 컬럼 안에 2진자료를 저장, BFILE은 데이터베이스 외부에 저장
저장된 2진자료를 사진으로 보고 싶다면 데이터베이스 영역은 아님. 보려면 고급언어에서 처리해야 함.
2진 자료 뿐 아니라 16진수 자료도 저장가능
경로 : 드라이브명부터 자료가 저장되어 있는 폴더까지의 경로를 절대경로라고 함
윈도우의 폴더를 도스/리눅스/유닉스에서는 디렉토리라고 함.
DIR(cmd) = LS(unix/linux)  -A(all)
DOS = DISK OPERATOR SYSTEM
객체는 CREATE로 생성, DROP으로 제거
다른 응용프로그램에서도 많이 사용하고 자주 사용하는 파일은 따로 저장하는것이 좋음

함수도 객체임
사용자 정의 함수는 PL/SQL의 서브루틴
함수와 프로시저 : 함수는 반환값 / 반환타입이 있고 프로시저는 반환값이 없음(자바의 VOID와 대응)
반환타입이 있으면 메서드 명 앞에 반환타입 설정
분류1 : 취급하는 데이터 타입
분류2 : 반환하는 값의 개수(집계함수, 여러 값을 반환하는 함수)
        EX) 각 반의 인원수 : 401호, 402호,... 에 몇명, 사람수가 6개가 나옴
        EX2) 남자와 여자의 인원수 - 반환값이 2개
왼편에는 컬럼명 1개 기술
오른편에는 여러 자료가 나올 수 있는 

CONCAT은 잘 안씀 <- 오류발생 위험 및 코드가독성, 코드 작성용이성

C: 문자열타입
N: 숫자타입
D: 날짜타입

함수의 종류에 따라서 사용되는 연산자도 변경되어야 한다
    =   함수의 반환값이 복수행인 경우 도메인 비교오류가 발생하기 때문에

SELECT  EMP_NAME, SALARY
FROM    HR.EMPLOYEES
WHERE   DEPARTMENT_ID    IN(SELECT A.DID
                            FROM    (SELECT         DEPARTMENT_ID   AS  DID,
                                                    COUNT(*)
                                    FROM            HR.EMPLOYEES
                                    GROUP BY        DEPARTMENT_ID
                                    HAVING          COUNT(*) >= 5) A);

======================================================================================











5	7	3	6	8
walk : 7
i: 1	j: 0
5	7	3	6	8
walk : 3
i: 2	j: 1
5	3	7	6	8

5	5	7	6	8

3	5	7	6	8


package d_array;

import java.util.Scanner;
import java.util.Arrays;

public class quickSort {
	
	public static void Swap(int[] arr, int idx1, int idx2){
		int temp = arr[idx1];
		arr[idx1] = arr[idx2];
		arr[idx2] = temp;
	}
	
	public static int Partition(int[] arr, int left, int right){
		int pivot = arr[left];
		int low = left + 1;
		int high = right;
		
		while(true){
			if(high == left || high <= low)	break;
			while(arr[low] <= pivot && low < right){
				low++;
			}
			while(arr[high] >= pivot && high >= (left + 1)){
				high--;
			}
			if(low <= high){
				Swap(arr, low, high);
				System.out.println(Arrays.toString(arr));			}
				
		}
		Swap(arr, left, high);
		System.out.println(Arrays.toString(arr));
		return high;
	}
	
	public static void QuickSort(int[] arr, int left, int right){
		
		if( left < right){
			int pivot = Partition(arr, left, right);
			QuickSort(arr, left, pivot - 1);
			QuickSort(arr, pivot + 1, right);
		}
	}
	
	public static void main(String[] args) {
		
/*		Scanner sc = new Scanner(System.in);
		System.out.print("배열의 크기를 입력하세요: ");
		int len = Integer.parseInt(sc.nextLine());*/
		int len = 10;
		int count = 0;
		int decision = 0;
		int rand;
		int[] arr = new int[len];
		
		while(count != len){
			decision = 0;
			rand = (int)(Math.random() * 100) + 1;
			for(int i = 0; i < count; i++){
				if(arr[i] == rand){
					decision++;
				}
			}
			if(decision == 0){
				arr[count] = rand;
				count++;
			}
			
		}
		
		System.out.println(Arrays.toString(arr));
		
		System.out.println();
		
		QuickSort(arr, 0, len - 1);

		

	}

}

package d_array;

import java.util.Arrays;

public class Sort {

	public static void Swap(int[] arr, int idx1, int idx2){
		int temp = arr[idx1];
		arr[idx1] = arr[idx2];
		arr[idx2] = temp;
	}
	public static int Partition(int[] arr, int left, int right){
		int pivot = arr[left];
		int low = left + 1;
		int high = right;
		
		while(high >= low){
			while(arr[low] < pivot){
				low++;
			}
			while(arr[high] > pivot){
				high--;
			}
			if(high >= low)			Swap(arr, low, high);
		}
		Swap(arr, left, high);
		return high;
	}
	
	public static void QuickSort(int[] arr, int left, int right){
		
		if(left <= right){
			int pivot = Partition(arr, left, right);
			System.out.println(Arrays.toString(arr));
			QuickSort(arr, left, pivot - 1);
			QuickSort(arr, pivot + 1, right);
		}
	
	}
	

	
	public static void main(String[] args) {
		/*
		 * - 석차구하기 : 점수를 비교해 작은 점수의 등수를 증가시키는 방식
		 * - 선택정렬 : 가장 작은 숫자를 찾아서 앞으로 보내는 방식
		 * - 버블정렬 : 바로 뒤의 숫자와 비교해서 큰 수를 뒤로 보내는 방식
		 * - 삽입정렬 : 두번째 숫자부터 앞의 숫자들과 비교해서 큰 수는 뒤로 밀고 중간에 삽입하는 방식
		 */
		int[] arr = new int[8];
		int len = arr.length;
		
		for(int i = 0; i < len; i++){
			arr[i] = (int)(Math.random() * 100) + 1;
		}
		
		System.out.println(Arrays.toString(arr));
		
/*		int[] rank = new int[len];
		for(int i = 0; i < len; i++)	rank[i] = 1;
		
		for(int i = 0; i < len; i++){
			for(int j = 0; j < len; j++){
				if(arr[i] < arr[j]){
					rank[i]++;
				}
			}
		}
		
		System.out.println(Arrays.toString(rank));
*/		
/*		for(int i = 0; i< len - 1; i++){
			for(int j = i + 1; j < len; j++){
				if(arr[i] > arr[j]){
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		
		System.out.println(Arrays.toString(arr));*/
		
/*		for(int i = 0; i < len - 1; i++){
			int min = arr[i];
			int index = i;
			for(int j = i + 1; j < len; j++){
				if(arr[j] < min){
					min = arr[j];
					index = j;
				}
			}
			arr[index] = arr[i];
			arr[i] = min;
		}
		System.out.println(Arrays.toString(arr));*/			//셀렉션 소트
		
/*		for(int i = 0; i < len - 1; i++){
			for(int j = i + 1; j < len; j++){
				if(arr[j - 1] > arr[j]){
					int temp = arr[j - 1];
					arr[j - 1] = arr[j];
					arr[j] = temp;
				}
			}
		}*/
/*		for(int i = 0; i < len - 1; i++){
			for(int j = i; j >= 0; j--){
				if(arr[j + 1] < arr[j]){
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}*/							//버블소트
/*		for(int i = len; i > 0; i--){
			boolean flag = true;
			for(int j = 0; j < i - 1; j++){
				if(arr[j] > arr[j + 1]){
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
					flag = false;
				}
			}
			if(flag)	break;
		}
		System.out.println(Arrays.toString(arr));*/
//		System.out.println(Arrays.toString(arr));
/*		{
			int i = 0;
			int j = 0;
			int walk = 0;
			
			for(i = 1; i < len; i++){
				walk = arr[i];
				for(j = i - 1; j >= 0; j--){
					if(arr[j] > walk){
						arr[j + 1] = arr[j];
					}
					else		break;
				}
				arr[j + 1] = walk;
			}
			System.out.println(Arrays.toString(arr));
		}				//	인섹트 소트
*/		
		/*
		 * for(int i = 1; i < len; i++){
		 * 		int temp = arr[i];
		 * 		int j = 0;
		 * 		for(j = i - 1; j >= 0; j--){
		 * 			if(temp < arr[j]){
		 * 				arr[j + 1] = arr[j];
		 * 			}else{
		 * 				break;
		 * 			}
		 * 		}
		 * 		arr[j + 1] = temp;
		 * }
		 */
		
		
		//선택정렬
		/*
		 * 0,1	0,2	0,3	0,4	0,5	0,6	0,7	0,8	0,9
		 * 1,2	1,3	1,4	1,5	1,6	1,7	1,8	1,9
		 * 2,3	2,4	2,5	2,6	2,7	2,8	2,9
		 * 3,4	3,5	3,6	3,7	3,8	3,9
		 * 4,5	4,6	4,7	4,8	4,9
		 * 5,6	5,7	5,8	5,9
		 * 6,7	6,8	6,9
		 * 7,8	7,9
		 * 8,9		
		 */
		System.out.println();
		
		QuickSort(arr, 0, len - 1);
	
	}
	
	

}


