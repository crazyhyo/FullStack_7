2021.07.27

<이론>
  ** 재고 수불처리를 위한 테이블을 생성하시오
  1) 테이블 명 : REMAIN
  2) 컬럼명
  -----------------------------------------------------------
  컬럼명         데이터타입       NULLABLE        제약사항
  -----------------------------------------------------------
  REMAIN_YEAR   CAHR(4)         N.N             PK
  PROD_ID       VARCHAR2(10)    N.N             PK/FK
  REMAIN_J_00   NUMBER(5)                       DEFAULT 0
  REMAIN_I      NUMBER(5)                       DEFAULT 0
  REMAIN_O      NUMBER(5)                       DEFAULT 0
  REMAIN_J_99   NUMBER(5)                       DEFAULT 0
  REMAIN_DATE   DATE
  -----------------------------------------------------------

REMAIN_YEAR
REMAIN_J_00 : 기초재고, 전년도 12월 31일날 파악한 재고의 양 / 기 시작 시점의 재고 1기,2기,...
REMAIN_J_99 : 기말재고, 전산상 재고, 현재고
REMAIN_I : 입고
REMAIN_O : 출고
REMAIN_DATE : 최신변경날짜


매출발생이후
(카트테이블에 한줄 입력후
재고테이블의 PROD_ID를 찾고
REMAIN_O를 +하고
REMAIN_J_99을 -하고
REMAIN_DATE를 오늘 날짜로 업데이트)

 4)DML 명령에 서브쿼리 사용
  (1) INSERT 문에 서브쿼리 사용
   - '()'를 사용하지 않고 서브쿼리 기술
   - INSERT 문의 VALUES절도 생략

한번에 입력할 수 있음!

  (2) UPDATE 문에 서브쿼리 사용
   - 복수개의 컬럼을 갱신하는 경우 '()'안에 변경할 컬럼을 기술하여 하나의 SET절로 처리

  (3) DELETE 문에 서브쿼리 사용
   - WHERE 조건절에 IN이나 EXISTS 연산자를 사용하여 삭제할 자료를 좀 더 세밀하게 선택 할 수 있음
   - 조건에 맞는 자료가 행 단위로 삭제된다.

SELECT 절의 서브쿼리 실행수 : WHERE절에서 조건이 참인 행의 개수
WHERE절의 서브쿼리 실행 수 : 참조 테이블별 행의 수의 곱만큼 실행
FROM절의 서브쿼리 실행 수 : 한번 실행 후 메인쿼리의 실행기간동안 뷰로 생존

========================================================================

public abstract class SampleAbstractParent {
	//추상메서드 : 선언부만 있고 구현부는 없는 메서드
	//추상클래스 : 적어도 하나의 추상메서드를 가지는 클래스
	//추상클래스는 객체생성이 불가능하다.
	//추상클래스는 부모의 역할만 한다. 자식클래스는 상속받은 메서드의 내용을 만들어주어야 한다.
	//추상클래스를 상속받은 자식 클래스는 반드시 추상메서드를 오버라이드해야 한다. 
	abstract void abstractMethod();
	
}

class SampleAbstractChild extends SampleAbstractParent{

	@Override
	void abstractMethod() {
		
	}
	
}

public String publicVar = "public : 접근제한이 없음";
protected String protectedVar = "protected : 같은 패키지 + 상속받은 클래스에서 접근 가능";
String defaultVar = "default : 같은 패키지에서만 접근 가능";
private String privateVar = "private : 클래스 내에서만 접근 가능";


AccessModifier am = new AccessModifier();
//하위 패키지로 생성해도 다른 패키지로 인식된다.
		//하위 패키지에서 상위 패키지는 그냥 별개의 패키지다

System.out.println(am.protectedVar);
//		am.protectedMethod();
		//상속을 받았으면 자신의 메서드와 변수를 사용해야 함
//		System.out.println(super.protectedVar);
//		super.protectedMethod();
		//static이 아니라서 사용할 수 없음
		
//		System.out.println(am.defaultVar);
//		am.defaultMethod();
		//
//		System.out.println(am.privateVar);
//		am.privateMethod();
		//같은 패키지 안에서도 접근 불가

//인터페이스 : 멤버로 상수와 추상메서드만 가질 수 있는 객체
	//인터페이스의 모든 멤버변수는 public static final 제어자를 사용해야 한다.
	public static final int NUM1 = 1;

	//모든 멤버변수의 제어자가 같기 때문에 생략이 가능하다.
	int NUM2 = 3;
	
	//인터페이스의 모든 메서드는 public abstract 제어자를 사용해야 한다.
	public abstract void method1();
	
	//모든 메서드의 제어자가 같기 때문에 생략이 가능하다.
	void method2();
//다중상속이 가능하다

//두 추상메서드를 implements한 클래스가 같은 이름의 추상메서드를 상속받는다면
	//하나만 오버라이딩 해서 사용해도 된다. 어차피 추상메서드라서 내가 쓸 것만 정의하면 됨 그게 누구한테서 왔는지 상관없음
	//클래스의 틀을 잡아주는 용도로 사용함
	//자식 클래스가 추상메서드 오버라이딩 하지 않으면 컴파일에러이므로
	//관계가 없는 클래스들에게 관계를 주기 위해서도 사용함
//interface의 멤버변수는 static이 붙어있기 때문에 interface명.상수 로 접근을 하는 것이 바람직하다
		//interface는 interface를 상속받을 수 있지만 class는 상속받을 수 없다.
		//interface와 추상클래스는 리턴타입이 될 수 있다. 그러나 이러한 경우 작성자의 의도는
		//이를 상속받는 자식으로 리턴하는 것이다.

void repair(Repairable r){	//Tank와 Dropship만이 공유하는 타입이 없다
		if (r instanceof Unit) {	//Unit으로 형변환이 가능한지 확인
			Unit u = (Unit) r;

			while (u.hp < u.MAX_HP) {
				u.hp++;
			}
		}
	}

<실습>
CREATE TABLE REMAIN(
  REMAIN_YEAR CHAR(4) NOT NULL,
  PROD_ID VARCHAR2(10) NOT NULL,
  REMAIN_J_00 NUMBER(5) DEFAULT 0,
  REMAIN_I NUMBER(5) DEFAULT 0,
  REMAIN_O NUMBER(5) DEFAULT 0,
  REMAIN_J_99 NUMBER(5) DEFAULT 0,
  REMAIN_DATE DATE,
  
  CONSTRAINT pk_remain PRIMARY KEY(REMAIN_YEAR, PROD_ID),
  CONSTRAINT fk_remain_prod FOREIGN KEY(PROD_ID) REFERENCES PROD(PROD_ID)
);

사용예) 재고수불테이블(REMAIN)에 PROD 테이블의 자료를 이용하여 기초데이터를 입력하시오
       년도 : '2005'
       상품코드 : PROD테이블의 상품코드(PROD_ID)
       기초재고수량 : PROD테이블의 PROD_PROPERSTOCK
       입고 및 출고 수량 : 없음
       기말재고수량 : PROD테이블의 PROD_PROPERSTOCK
       날짜 : '2004-12-31'
;
INSERT INTO REMAIN(REMAIN_YEAR, PROD_ID, REMAIN_J_00, REMAIN_J_99, REMAIN_DATE)
  SELECT '2005', PROD_ID, PROD_PROPERSTOCK, PROD_PROPERSTOCK, TO_DATE('20041231') FROM PROD;
SELECT * FROM REMAIN;
COMMIT;

사용예)2005년 1월 상품별 매입정보를 이용하여 REMAIN테이블을 변경하시오
메인쿼리 : UPDATE문
UPDATE REMAIN
   SET REMAIN_I = (서브쿼리),
       REMAIN_J_99 = (서브쿼리),
       REMAIN_DATE = TO_DATE('20050131')
 WHERE 조건;
 
UPDATE REMAIN
   SET (REMAIN_I, REMAIN_J_99, REMAIN_DATE) = (서브쿼리),
 WHERE 조건;

서브쿼리:2005년 1월 상품별 매입정보

--SELECT B.PROD_ID,
--       NVL(SUM(A.BUY_QTY),0),
--       TO_DATE('20050131')
--  FROM BUYPROD A
-- RIGHT OUTER JOIN PROD B ON(A.BUY_PROD = B.PROD_ID
--       AND A.BUY_DATE BETWEEN TO_DATE('20050101') AND LAST_DAY(TO_DATE('20050101')))
-- GROUP BY B.PROD_ID;

SELECT BUY_PROD,
       SUM(BUY_QTY)
  FROM BUYPROD
 WHERE BUY_DATE BETWEEN TO_DATE('20050101') AND LAST_DAY(TO_DATE('20050101'))
 GROUP BY BUY_PROD;

COMMIT;
 
 (결합)
UPDATE REMAIN B
   SET (B.REMAIN_I, B.REMAIN_J_99, B.REMAIN_DATE) =
       (SELECT B.REMAIN_I + A.AMT, B.REMAIN_J_99 + A.AMT, TO_DATE('20050131')
          FROM (SELECT BUY_PROD AS BID,
                       SUM(BUY_QTY) AS AMT
                  FROM BUYPROD
                 WHERE BUY_DATE BETWEEN TO_DATE('20050101') AND LAST_DAY(TO_DATE('20050101'))
                 GROUP BY BUY_PROD) A
         WHERE B.PROD_ID = A.BID)
 WHERE B.REMAIN_YEAR = '2005'
       AND B.PROD_ID IN (SELECT DISTINCT BUY_PROD AS BID
                                    FROM BUYPROD
                                   WHERE BUY_DATE BETWEEN TO_DATE('20050101')
                                                  AND LAST_DAY(TO_DATE('20050101')));
                                                  
UPDATE REMAIN B
   SET B.REMAIN_O = (SELECT 3 AS T FROM DUAL)C
 WHERE B.REMAIN_YEAR = '2005'
       AND TO_NUMBER(B.REMAIN_YEAR) > C.T
 
 ROLLBACK;
 SELECT * FROM REMAIN;

복수개의 컬럼으로 기본키가 설정되어진 경우 기본키를 구성하는 모든 복합키에 조건을 주는 것이 가장 효율적인 검색방법
업데이트 할 때 B.REMAIN_I + A.AMT, B.REMAIN_J_99 + A.AMT처럼 실제 로직을 생각해 주어야 한다.
최종결과에 필요한 정보와 내가 중간에 구한 쿼리의 컬럼의 형태가 다르다면 서브쿼리로 사용하여 컬럼을 일치시켜줘야 한다.
FROM절로 이용해야 한다!

사용예)장바구니테이블에서 2005년 5월 회원번호가 'p001'인 자료를 삭제하시오.

DELETE CART
WHERE CART_NO IN (SELECT CART_NO
  FROM CART
 WHERE CART_MEMBER = 'p001'
       AND SUBSTR(CART_NO, 1, 6) = '200505')
       
(서브쿼리: 2005년 5월 회원번호가 'p001'인 자료 조회)
SELECT A.CART_MEMBER,
       B.MEM_NAME
  FROM CART A, MEMBER B
 WHERE A.CART_MEMBER = B.MEM_ID
       AND SUBSTR(A.CART_NO,1,6) = '200505'
       AND B.MEM_ID = 'p001'

(메인쿼리: 서브쿼리의 자료 삭제)
DELETE CART C
 WHERE C.CART_MEMBER = 'p001'
       AND SUBSTR(C.CART_NO,1,6) = '200505'

SELECT * FROM CART;

사용예)2005년 6월 상품 'P302000001'의 매출자료 중 판매 수량이 5개 이상인 자료만 삭제하시오.  
SELECT CART_MEMBER
  FROM CART
 WHERE UPPER(CART_PROD) = 'P302000001'
       AND SUBSTR(CART_NO,1,6) = '200506'
       AND CART_QTY >= 5
       
사용예)2005년 4월 판매자료 중 판매 금액이 5만원 이하의 자료만 삭제하시오
(서브쿼리:2005년 4월 판매자료 중 판매 금액이 5만원 이하의 자료 검색)
SELECT CART_PROD
       CART_QTY * PROD_PRICE
  FROM CART, PROD
 WHERE CART_PROD = PROD_ID
       AND SUBSTR(CART_NO,1,6) = '200504'
       AND CART_QTY * PROD_PRICE >= 50000;
       
(메인쿼리: 장바구니테이블에서 자료 삭제)
DELETE CART A
 WHERE EXISTS (SELECT 1
                 FROM PROD
                WHERE A.CART_PROD = PROD_ID
                      AND A.CART_QTY * PROD_PRICE <= 50000
                      AND A.CART_NO LIKE '200504%');

DELETE FROM CART A
 WHERE EXISTS(SELECT 1
                FROM PROD
               WHERE A.CART_PROD=PROD_ID
                 AND A.CART_QTY*PROD_PRICE<=50000)
       AND A.CART_NO LIKE '200504%'

ROLLBACK;

DELETE CART
 WHERE CART_NO IN (SELECT CART_NO
                     FROM CART A, PROD B
                    WHERE A.CART_PROD = B.PROD_ID
                          AND SUBSTR(A.CART_NO,1,6) = '200504'
                          AND A.CART_QTY * B.PROD_PRICE <= 50000)

사용예)회원테이블에서 평균마일리지보다 많은 마일리지를 보유한 회원의 회원번호, 회원명, 마일리지를 출력하시오
SELECT B.MEM_ID AS "회원번호",
       B.MEM_NAME AS "회원명",
       B.MEM_MILEAGE AS "마일리지",
       ROUND(A.MIL) AS "평균마일리지"
  FROM (SELECT AVG(MEM_MILEAGE) AS MIL
          FROM MEMBER) A, MEMBER B
 WHERE B.MEM_MILEAGE > A.MIL
 
SELECT MEM_ID AS "회원번호",
       MEM_NAME AS "회원명",
       MEM_MILEAGE AS "마일리지",
       (SELECT ROUND(AVG(MEM_MILEAGE))
          FROM MEMBER) AS "평균마일리지"
  FROM MEMBER
 WHERE MEM_MILEAGE > (SELECT AVG(MEM_MILEAGE) AS MIL
                        FROM MEMBER)

사용예)회원들의 자료에서 성별 평균마일리지를 구하고 자신의 성별 평균마일리지보다 적은 마일리지를 보유한 회원의
      2005년 4~6월 구매현황을 조회하시오.
      ALIAS회원번호, 회원명, 구매금액합계
1)회원들의 자료에서 성별 평균 마일리지를 구하고 성별 평균마일리지보다 적은 마일리지를 보유한 회원정보
메인쿼리 : 회원테이블에서 (서브쿼리)조건을 만족하는 회원정보 출력      

SELECT MEM_ID, MEM_NAME
  FROM MEMBER
 WHERE MEM_MILEAGE < (서브쿼리)

서브쿼리 : 성별 평균 마일리지
SELECT TBLA.AMILE
  FROM (SELECT CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN
                         '남성회원'
               ELSE      '여성회원' END,
               SUBSTR(MEM_REGNO2,1,1) AS GEN,
               AVG(MEM_MILEAGE) AS AMILE
          FROM MEMBER
         GROUP BY CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN
                            '남성회원'
                  ELSE      '여성회원' END) TBLA.AMILE, MEMBER B
 WHERE B.MEM_REGNO2 LIKE TBLA.GEN || '%'
2)2005년 4~6월 구매현황

SELECT TBLA.MID AS "회원번호",
       TBLA.MNAME AS "회원명",
       SUM(A.CART_QTY * B.PROD_PRICE) AS "구매금액 합계"
  FROM (SELECT B.MEM_ID AS MID,
               B.MEM_NAME AS MNAME,
               A.AVGMIL AS AAVG,
               B.MEM_MILEAGE AS BMIL
          FROM (SELECT CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN '남자'
                            WHEN SUBSTR(MEM_REGNO2,1,1) IN('2','4') THEN '여자'
                       END AS GENDER,
                       ROUND(AVG(MEM_MILEAGE)) AS AVGMIL
                  FROM MEMBER
                 GROUP BY CASE WHEN SUBSTR(MEM_REGNO2,1,1) IN('1','3') THEN '남자'
                               WHEN SUBSTR(MEM_REGNO2,1,1) IN('2','4') THEN '여자'
                          END) A, MEMBER B
        WHERE B.MEM_MILEAGE < A.AVGMIL) TBLA, CART A, PROD B
 WHERE TBLA.MID = A.CART_MEMBER
       AND A.CART_PROD = B.PROD_ID
       AND SUBSTR(A.CART_NO,1,6) BETWEEN '200504' AND '200506'
 GROUP BY TBLA.MID, TBLA.MNAME
 ORDER BY 1;
 
SELECT MEN.MID AS MID,
       MEN.MNAME AS MNAME,
       SUM(B.CART_QTY * C.PROD_PRICE) AS AMT
  FROM (SELECT A.MEM_ID AS MID,
               A.MEM_NAME AS MNAME,
               A.MEM_MILEAGE AS MIL,
               B.MAVG AS MAVG
          FROM MEMBER A, (SELECT AVG(MEM_MILEAGE) AS MAVG
                            FROM MEMBER
                           WHERE SUBSTR(MEM_REGNO2,1,1) IN('1','3')) B
         WHERE SUBSTR(A.MEM_REGNO2,1,1) IN('1','3')
               AND A.MEM_MILEAGE < B.MAVG) MEN,
       CART B, PROD C
 WHERE MEN.MID = B.CART_MEMBER
       AND SUBSTR(B.CART_NO,1,6) BETWEEN '200504' AND '200506'
       AND B.CART_PROD = C.PROD_ID
 GROUP BY MEN.MID, MEN.MNAME     
UNION
SELECT WOMEN.MID AS MID,
       WOMEN.MNAME AS MNAME,
       SUM(B.CART_QTY * C.PROD_PRICE) AS AMT
  FROM (SELECT A.MEM_ID AS MID,
               A.MEM_NAME AS MNAME,
               A.MEM_MILEAGE AS MIL,
               B.MAVG AS MAVG
          FROM MEMBER A, (SELECT AVG(MEM_MILEAGE) AS MAVG
                            FROM MEMBER
                           WHERE SUBSTR(MEM_REGNO2,1,1) IN('2','4')) B
         WHERE SUBSTR(A.MEM_REGNO2,1,1) IN('2','4')
               AND A.MEM_MILEAGE < B.MAVG) WOMEN,
       CART B, PROD C
 WHERE WOMEN.MID = B.CART_MEMBER
       AND SUBSTR(B.CART_NO,1,6) BETWEEN '200504' AND '200506'
       AND B.CART_PROD = C.PROD_ID
 GROUP BY WOMEN.MID, WOMEN.MNAME;

========================================================================
package g_oop2;

public class AccessModifier {
	
	public String publicVar = "public : 접근제한이 없음";
	protected String protectedVar = "protected : 같은 패키지 + 상속받은 클래스에서 접근 가능";
	String defaultVar = "default : 같은 패키지에서만 접근 가능";
	private String privateVar = "private : 클래스 내에서만 접근 가능";
	
	public void publicMethod(){
		System.out.println(publicVar);
	}
	protected void protectedMethod(){
		System.out.println(protectedVar);
	}
	void defaultMethod(){
		System.out.println(defaultVar);
	}
	private void privateMethod(){
		System.out.println(privateVar);
	}
	
	public static void main(String[] args) {
		Time t = new Time();
		
//		t.hour = 14;
//		t.minute = 2;
//		t.second = 99;
		
		t.setHour(23);
		t.setMinute(59);
		t.setSecond(55);
		
		
		System.out.println(t.getTime());
		//사용자의 부적합한 입력문제 -> 직접 접근하지 못하게 그리고 메서드를 통해 간접적으로 접근할 수 있도록
		
		//접근제어자 사용 이유
		//데이터를 보호하기 위해
		//사용하는데 불필요한 멤버를 숨기기 위해
		t.clock();
	}
}
package g_oop2.test;

import g_oop2.AccessModifier;

public class AccessTest extends AccessModifier{

	public static void main(String[] args) {
		AccessModifier am = new AccessModifier();
		//하위 패키지로 생성해도 다른 패키지로 인식된다.
		//하위 패키지에서 상위 패키지는 그냥 별개의 패키지다
		
		System.out.println(am.publicVar);
		am.publicMethod();
		
//		System.out.println(am.protectedVar);
//		am.protectedMethod();
		//상속을 받았으면 자신의 메서드와 변수를 사용해야 함
//		System.out.println(super.protectedVar);
//		super.protectedMethod();
		//static이 아니라서 사용할 수 없음
		
//		System.out.println(am.defaultVar);
//		am.defaultMethod();
		//
//		System.out.println(am.privateVar);
//		am.privateMethod();
		//같은 패키지 안에서도 접근 불가
		
		AccessTest at = new AccessTest();
		System.out.println(at.protectedVar);
		at.protectedMethod();

	}

	void asdfMethod(){
		System.out.println(protectedVar);
		protectedMethod();
	}
}

package g_oop2;

public class AccessTest {

	public static void main(String[] args) {
		AccessModifier am = new AccessModifier();
		
		System.out.println(am.publicVar);
		am.publicMethod();
		
		System.out.println(am.protectedVar);
		am.protectedMethod();
		
		System.out.println(am.defaultVar);
		am.defaultMethod();
		
//		System.out.println(am.privateVar);
//		am.privateMethod();

	}

}

package g_oop2;

public class Time {
	private int hour;
	private int minute;
	private int second;
	
	public int getHour() {
		return hour;
	}
	
	public void setHour(int hour) {
		
		this.hour = hour % 24;
	}
	
	public int getMinute() {
		return minute;
	}
	
	public void setMinute(int minute) {
		if(minute >= 60)	setHour(hour + 1);
		this.minute = minute % 60;
	}

	public int getSecond() {
		return second;
	}
	
	public void setSecond(int second) {
		if(second >= 60)	setMinute(minute + 1);
		this.second = second % 60;
	}
	
	//getter : get으로 시작하는 메서드, 변수의 값을 읽어오는 역할
	//setter : set으로 시작하는 메서드, 변수에 값을 저장하는 역할
	
	String getTime(){
		return hour + ":" + minute + ":" + second;
	}
	void clock(){
		while(true){
			System.out.println(getTime());
			stop(10);
			setSecond(second + 1);
		}
	}
	private void stop(int interval){
		try {
			Thread.sleep(interval);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}

package g_oop2;

public abstract class SampleAbstractParent {
	//추상메서드 : 선언부만 있고 구현부는 없는 메서드
	//추상클래스 : 적어도 하나의 추상메서드를 가지는 클래스
	//추상클래스는 객체생성이 불가능하다.
	//추상클래스는 부모의 역할만 한다. 자식클래스는 상속받은 메서드의 내용을 만들어주어야 한다.
	//추상클래스를 상속받은 자식 클래스는 반드시 추상메서드를 오버라이드해야 한다. 
	abstract void abstractMethod();
	
}

package g_oop2;

public abstract class Aniamal {

	abstract void sound(int a);
}

class Dog extends Aniamal{

	@Override
	void sound(int a) {
		System.out.println("asdf!!");
	}
	
}

class Cat extends Aniamal{

	@Override
	void sound(int a) {
		System.out.println("qwer!!");
	}
	
}
class Duck extends Aniamal{

	@Override
	void sound(int a) {
		System.out.println("zxcv!!");
	}
	
}

class SampleAbstractChild extends SampleAbstractParent{

	@Override
	void abstractMethod() {
		
	}
	
}

package g_oop2;

public interface SampleInterface {
	//인터페이스 : 멤버로 상수와 추상메서드만 가질 수 있는 객체
	//인터페이스의 모든 멤버변수는 public static final 제어자를 사용해야 한다.
	public static final int NUM1 = 1;

	//모든 멤버변수의 제어자가 같기 때문에 생략이 가능하다.
	int NUM2 = 3;
	
	//인터페이스의 모든 메서드는 public abstract 제어자를 사용해야 한다.
	public abstract void method1();
	
	//모든 메서드의 제어자가 같기 때문에 생략이 가능하다.
	void method2();
}

class sampleImplement implements SampleInterface, SampleInterface2{

	@Override
	public void method1() {
		
	}
	//두 추상메서드를 implements한 클래스가 같은 이름의 추상메서드를 상속받는다면
	//하나만 오버라이딩 해서 사용해도 된다. 어차피 추상메서드라서 내가 쓸 것만 정의하면 됨 그게 누구한테서 왔는지 상관없음
	//클래스의 틀을 잡아주는 용도로 사용함
	//자식 클래스가 추상메서드 오버라이딩 하지 않으면 컴파일에러이므로
	//관계가 없는 클래스들에게 관계를 주기 위해서도 사용함

	@Override
	public void method2() {
		
	}

	@Override
	public void method3() {
		
	}
	
}

interface SampleInterface2{
	void method1();
	void method3();
}

package g_oop2;



public class Starcraft {
	
	public static void main(String[] args) {
		Marine marine = new Marine();
		Tank tank = new Tank();
		Dropship dropship = new Dropship();
		SCV scv = new SCV();
		
//		scv.repair(marine);
		scv.repair(tank);
		scv.repair(dropship);
		scv.repair(scv);
		
		System.out.println(SampleInterface.NUM1);
		//interface의 멤버변수는 static이 붙어있기 때문에 interface명.상수 로 접근을 하는 것이 바람직하다
		//interface는 interface를 상속받을 수 있지만 class는 상속받을 수 없다.
		//interface와 추상클래스는 리턴타입이 될 수 있다. 그러나 이러한 경우 작성자의 의도는
		//이를 상속받는 자식으로 리턴하는 것이다.
	}
	
}

class Unit{
	int hp;
	final int MAX_HP;
	
	Unit(int hp){
		MAX_HP = hp;
		this.hp = MAX_HP;
	}
}

class Marine extends Unit{
	Marine(){
		super(40);
	}
}

class Tank extends Unit implements Repairable{
	Tank() {
		super(150);
	}
}

class Dropship extends Unit implements Repairable{
	Dropship() {
		super(125);
	}
}

class SCV extends Unit implements Repairable{
	SCV() {
		super(60);
	}
	
	void repair(Repairable r){	//Tank와 Dropship만이 공유하는 타입이 없다
		if (r instanceof Unit) {	//Unit으로 형변환이 가능한지 확인
			Unit u = (Unit) r;

			while (u.hp < u.MAX_HP) {
				u.hp++;
			}
		}
	}
}

interface Repairable{
	
}


<TMI>

휴대폰필름 회사 : 수급과 재고파악의 문제로 단명하는 경우가 많음, 현재고와 전산상 재고의 차이가 문제임
해결방법 : RFID를 이용해서 위치를 파악(매미채 리더기)

========================================================================


























