2021.07.07

<이론>
review: CREATE 로 객체 생성
테이블명은 적절한 이름을 가지도록 생성	/	적절한 이름이 없다면 TBL로 시작
첫글자는 영문자, 숫자는 2번째 글자부터 / 특수문자는 '_' 혹은 '$'만 사용가능하나 시스템에서 주로 사용하니 가능하면 쓰지마라
오라클의 데이터타입:
java의 char에 해당하는 데이터 타입이 없음.
오라클의 모든 글자는 문자열로 취급함.
단, 고정길이 가변길이는 구분함. 가변길이는 char빼고 모두, 고정길이는 메모리에 특정 공간을 고정적으로 생성, 반납하지 않음
보통 VARCHAR2로 데이터타입 사용
기억공간보다 저장할 데이터가 큰 경우 오류발생

테이블스페이스 안에서 

PK_해당테이블명			<-	기본키설정명
FK_해당테이블명_참조테이블명	<-	외래키설정명
외래키가 여러일 때 

기본키랑 외래키에 설정명을 쓰는 이유 : 재사용해야하기 때문에
그리고 기본키랑 외래키를 설정할 때 하나의 컬럼만으로 정의하지 않고 복수의 컬럼을 통해 기본키를 설정하는 경우도 있음
그런 경우에는 기본키를 하나 생성해서 그 정보를 포함하도록 해야 하는데 그때 만들어진 기본키를 사용하려면 이름이 필요
해당테이블이 다른 테이블을 참조하는 경우 참조하고 있는 테이블이 먼저 생성되어야 함, 데이터를 입력할 때도 각 부모테이블에
데이터가 필요함
오라클에서 날짜형식

오라클에서
TO_CHAR,TO_NUMBER,TO-DATE,TO_
TO DATE를 사용
오라클에서 DATE 형식은 연산(덧셈, 뺄셈)의 대상이 될 수 있음

<실습>

기본키로 설정하면 자동으로 not null 조건이 부여된다.
생략할 수 있는 것은 생략한다. (오류발생 위험 감소위해)


        [사업장 테이블]
        1)테이블명 : SITE
        2)컬럼
        -------------------------------------------------
        컬럼명          데이터타입(크기)    N.N     PK/FK
        -------------------------------------------------
        SITE_ID         CHAR(4)                  PK
        SITE_NAME       VARCHAR2(30)     N.N
        SITE_ADDR       VARCHAR2(80)
        REMARKS         VARCHAR2(255)
        -------------------------------------------------
        
CREATE TABLE SITE(
        SITE_ID         CHAR(4),        
        SITE_NAME       VARCHAR2(30)     NOT NULL,
        SITE_ADDR       VARCHAR2(80),
        REMARKS         VARCHAR2(255),
        
        CONSTRAINT pk_site PRIMARY KEY(SITE_ID)
);

        [근무 테이블]
        1)테이블명 : WORK
        2)컬럼
        -------------------------------------------------
        컬럼명          데이터타입(크기)    N.N     PK/FK
        -------------------------------------------------
        EMP_ID         CHAR(4)           N.N,    PK & FK
        SITE_ID        CHAR(4)           N.N,    PK & FK
        DEPART         DATE
        -------------------------------------------------

CREATE TABLE WORK(
        EMP_ID         CHAR(4)           NOT NULL,
        SITE_ID        CHAR(4)           NOT NULL,
        DEPART         DATE,
        
        CONSTRAINT pk_work PRIMARY KEY(EMP_ID,SITE_ID),
        CONSTRAINT fk_work_emp FOREIGN KEY(EMP_ID)
            REFERENCES EMPLOYEE(EMP_ID),
        CONSTRAINT fk_work_site FOREIGN KEY(SITE_ID)
            REFERENCES SITE(SITE_ID)
);

drop table work;
DROP TABLE WORK;
DROP TABLE SITE;
DROP TABLE EMPLOYEE;

2021-0707-01)
1)자료 삽입 명령(INSERT)
 - 생성된 테이블에 새로운 자료를 삽입함
 (사용형식)
 INSERT INTO 테이블명[(컬럼명1[,컬럼명2,...])]
    VALUES(값1[,값2,,,]);
    - '테이블명' : 자료 삽입 대상 테이블명
    - '컬럼명1,..' : 이 옵션을 생략하면 테이블에 기술된 모든 컬럼에 기술된 순서에 맞도록 VALUES절에 값을 기술해야 함
    - '컬럼명1,..' : 이 옵션이 사용되면 필요한 컬럼에만 값(데이터)을 지정하여 자료르를 삽입할 수 있음.
                    기술된 '컬럼명'의 갯수 및 순서와 VALUES절의 값의 갯수 및 순서가 일치해야하고, NOT NULL항목은 반드시 기술(생략X)
                    
    주의) 특정 컬럼에만 값을 넣고 싶을 때 어떤 컬럼에 어떤 값을 넣을지 명시해주면 된다. 당연히 일치시켜야함.
    오라클은 모든 디폴트값이 NULL값임. NULL은 계산결과가 항상 NULL이 됨, 그래서 오라클에서는 널처리 함수가 있음
    INSERT의 철학: 입력할 값만 넣겠다. 아닌 것들은 모두 NULL
    NULL IF, IS NOT NULL 등
    거의 이미 고정된 길이를 가지거나 기본키를 설정할 때만 CHAR 타입을 쓴다

사용예) 사원테이블 (EMPLOYEE)에 다음 자료를 입력하시오.
    -------------------------------------------------------------------------------
    사원번호    이름     주소                   전화번호           직위      부서
    -------------------------------------------------------------------------------
    a101       홍길동   대전시 중구 대홍동       042-222-8202      사원      공공 개발부
    a104       강감찬                                            대리      기술영업부
    a105       이순신                                            부장
    -------------------------------------------------------------------------------
    
    INSERT INTO EMPLOYEE(EMP_ID,EMP_NAME,E_ADDR,E_TEL,E_DEPT,E_POSITION)
        VALUES('a101','홍길동','대전시 중구 대홍동','042-222-8202','공공 개발부','사원');
    INSERT INTO EMPLOYEE(EMP_ID,EMP_NAME,E_DEPT,E_POSITION)
        VALUES('a104','강감찬','기술영업부','대리');
    INSERT INTO EMPLOYEE(EMP_ID,EMP_NAME,E_POSITION,E_TEL)
        VALUES('a105','이순신','부장','010-1111-2222');
    
    INSERT INTO EMPLOYEE
        VALUES('a104','강감찬','','','대리','기술영업부');
    
    UPDATE EMPLOYEE SET E_TEL = '' WHERE EMP_ID = 'a104';
    
    INSERT INTO EMPLOYEE(EMP_ID,EMP_NAME,E_POSITION)
        VALUES('a105','이순신','부장');
    
    SELECT * FROM EMPLOYEE;
    
    
사용예) 사업장 테이블(SITE)에 다음 자료를 입력하시오.
    -------------------------------------------------------------------------------
    사업장번호       사업장명                주소                   비고
    -------------------------------------------------------------------------------
    S101           대홍초등학교보수공사      대전시 중구 대홍동
    S200           건물신축                
    -------------------------------------------------------------------------------
    INSERT INTO SITE(SITE_ID,SITE_NAME,SITE_ADDR)
        VALUES('S101','대홍초등학교보수공사','대전시 중구 대홍동');
    INSERT INTO SITE(SITE_ID,SITE_NAME)
        VALUES('S200','건물신축');
    
    INSERT INTO SITE
        VALUES('S200','건물신축',NULL,'');

사용예) 근무 테이블(WORK)에 다음 자료를 입력하시오.
    (1)홍길동사원이 오늘부터 'S200'사업장에서 근무
    (2)이순신부장이 2020년 10월 1일부터 'S200'사업장에서 근무
    (3)강감찬대리가 S100사업장에 근무
    INSERT INTO WORK(EMP_ID,SITE_ID,DEPART)
        VALUES('a101','S200','2021/07/07');
    INSERT INTO WORK(EMP_ID,SITE_ID,DEPART)
        VALUES('a105','S200','2020/10/01');
    INSERT INTO WORK(EMP_ID,SITE_ID,DEPART)
        VALUES('a104','S200','2021/01/01');
        
    INSERT INTO WORK VALUES('a105','S200',TO_DATE('20201001'));
    
    SELECT MOD((TRUNC(SYSDATE)-TO_DATE('00010101'))-1,7) FROM DUAL;
    
    INSERT INTO WORK VALUES('a101','S200',SYSDATE);
    INSERT INTO WORK(EMP_ID,SITE_ID) VALUES('a104','S101');
    
    SELECT * FROM EMPLOYEE;
    SELECT * FROM SITE;
    SELECT * FROM WORK;
    
    **S200에 근무하는 사원정보를 조회하시오
      Alias는 사업장명, 사원번호, 사원명, 직위, 전화번호이다.
      
    SELECT  A.SITE_NAME AS 사업장명,
            B.EMP_ID AS 사원번호,
            B.EMP_NAME AS 사원명,
            B.E_POSITION AS 직위,
            B.E_TEL AS 전화번호
    FROM SITE A, EMPLOYEE B, WORK C
    WHERE A.SITE_ID = C.SITE_ID
        AND B.EMP_ID = C.EMP_ID
        AND A.SITE_ID = UPPER('S200');
    
/*
    SELECT  SITE.SITE_NAME AS 사업장명,
            EMPLOYEE.EMP_ID AS 사원번호,
            EMPLOYEE.EMP_NAME AS 사원명,
            EMPLOYEE.E_POSITION AS 직위,
            EMPLOYEE.E_TEL AS 전화번호
    FROM SITE, EMPLOYEE, WORK
    WHERE SITE.SITE_ID = WORK.SITE_ID
        AND EMPLOYEE.EMP_ID = WORK.EMP_ID
        AND SITE.SITE_ID = UPPER('S200');

코드 동작 확인
*/

조인을 이용한 조회시 컬럼을 어디에 속하는지 그 테이블을 반드시 명시해주어야 한다.
조인은 두 개 이상의 테이블을 참조하기 때문에 어떤 컬럼이 어느 테이블에 속하는지
알아서 찾아주지 않는다.

단항연산자의 예) ~, NOT
관계연산자 : 크다, 작다, 같다, 크거나 같다, 작거나 같다, 같지 않다.
이항연산자
삼항연산자 : ( ? ; )

=========================

오답노트 : 	1. println -> print(입력을 한 줄로 입력받기 위해서)
		2. 숫자4자리 비밀번호 : int 형 선언
		3. 출력화면에서 string 더해서 원하는 단위 출력
class 인스턴스를 명명할 때 보통 클래스명을 앞에다가 써준다. 여러 단어면 첫문자들을 앞에 써준다

복합연산자 : 변수에 저장되어 있는 값에 연산을 수행할 때 수행할 연산자와 대입연산자를 결합해 사용할 수 있다.

i++;	//후위형 : 변수의 값을 읽어온 후에 1 증가된다.
++i;	//전위형 : 변수의 값을 읽어오기 전에 1 증가된다.

package b_operator;

public class ArithmeticOperator {

	public static void main(String[] args) {
		/*
		 * 산술연산자
		 * - 사칙연산자 : +, -, *, /, %(나머지)
		 * - 복합연산자 : += -=, *=, /=, %=
		 * - 증감연산자 : ++, --
		 */
		
		/*int result = 10 + 20 - 30 * 40 / 50 % 60;*/

		// 나머지 연산도 *, /랑 같은 실행우선순위를 가짐
		// 나머지 연산
		
		/*result = 10 / 3;	//3.3333
		System.out.println(result);
		result = 10 % 3;
		System.out.println(result);*/
		
		//5개의 산술연산자를 사용해 5개의 연산을 수행후 결과를 출력해주세요.
		
		
		/*System.out.print("3 + 5 = ");
		System.out.println(3 + 5);
		System.out.print("3 - 5 = ");
		System.out.println(3 - 5);
		System.out.print("3 * 5 = ");
		System.out.println(3 * 5);
		System.out.print("3 / 5 = ");
		System.out.println(3.0 / 5.0);
		System.out.print("5 % 3 = ");
		System.out.println(5 % 3);*/
		
		//복합연산자
		//변수에 저장되어 있는 값에 연산을 수행할 때 수행할 연산자와 대입연산자를 결합해 사용할 수 있다.
		/*result = result + 3;
		System.out.println(result);
		
		result += 3;
		System.out.println(result);
		
		result -= 5;
		System.out.println(result);
		
		result *= 2;
		System.out.println(result);*/
		
		//아래의 문장을 복합연산자를 사용한 문장으로 만들어주세요.
		//result = result + 10;
		//result = result % 5;
		//result = result - 2 * 3;
		
		/*result += 10;
		result %= 5;
		result -= 2 * 3;*/
		
		//증감연산자
		//증감연산자(++) : 변수의 값을 1 증가시킨다.
		//감소연산자(--) : 변수의 값을 1 감소시킨다.
		int i = 0;
		
		i++;	//후위형 : 변수의 값을 읽어온 후에 1 증가된다.
		++i;	//전위형 : 변수의 값을 읽어오기 전에 1 증가된다.
		i--;	//후위형 : 변수의 값을 읽어온 후에 1 감소된다.
		--i;	//전위형 : 변수의 값을 읽어오기 전에 1 감소된다.
		
		i = 0;
		System.out.println("++i = " + ++i);
		i = 0;
		System.out.println("i++ = " + i++);
		System.out.println(i);
		
		//산술연산자의 경우 : 피연산자의 타입이 서로 같아야만 연산이 가능하다. / 사칙 + % 연산은 피연산자가 2개인 이항연산자
		int _int = 10;
		double _double = 3.14;
		double result2 = _int + _double;	//표현범위가 더 큰 타입으로 형변환된다. : 작은 타입에서 큰 타입으로 형변환하여 생략됨. 풀어쓰면 (double)_int + _double;
		System.out.println(result2);
		
		byte _byte = 5;
		short _short = 10;
		_int = _byte + _short;			//int보다 작은 타입은 int로 형변환된다. 컴퓨터의 연산 정의역은 4바이트 이상인 자료형, 우변의 값은 int 타입이다.
										//단, 컴퓨터는 기본적으로 4바이트 이상인 자료만 연산함. 1바이트와 2바이트 자료형은 4바이트인 int로 형변환하여 연산을 수행한다.
		System.out.println(_int);
		
		char _char = 'a';				//char 타입은 2바이트 연산시 4바이트인 int로 형변환 되어서 연산됨
		char _char2 = 'b';
		_int = _char + _char2;			//자바에서는 유니코드를 사용함 a: 97, b: 98
		System.out.println(_int);
		
		//오버플로우, 언더플로우
		//표현범위를 벗어나는값을 표현할 때 발생하는 현상
		byte b = 127;				//범위 : -128 ~ 127
		b++;
		System.out.println(b);		//-128로 출력
		b = -128;
		b--;
		System.out.println(b);		//127로 출력
		//Q: b = b-4;를 수행하면 어떻게 되느냐? int를 byte로 변환할 수 없다는 에러 발생
		
		
		
		//다음을 한줄씩 계산해서 최종 결과값을 출력해주세요.
		//1. 123456 + 654321
		//2. 1번의 결과값 * 123456
		//3. 2번의 결과값 / 123456
		//4. 3번의 결과값 - 654321
		//5. 4번의 결과값 % 123456
		
		double x = 123456 + 654321;
		x *= 123456;
		x /= 123456;
		x -= 654321;
		x %= 123456;
		System.out.println(x);
		
		//3개의 int형 변수를 선언 및 초기화 후 합계와 평균을 구해주세요.
		int var1 = 3;
		int var2 = 6;
		int var3 = 5;
		
		double sum;
		double average;
		sum = var1 + var2 + var3;
		average = sum / 3;			//이게 제대로 안되는 경우 1) sum이 int type인 경우 : 둘 모두 int라서 int값 계산됨 -> 해결1. sum을 double로 설정. 해결2. / 3을 / 3.0으로 변경
		// average = (double) (var1 + var2 + var3) / 3; 주의) 여기서 형변환(double)하지 않으면 제대로 계산 안됨
		System.out.println(sum);
		System.out.println(average);
		
		//반올림	Math.round는 항상 소수점 첫번째 자리에서 반올림하기 때문에 다른 자리수에서 반올림하기 위해서는 자리수를 맞춰서 곱하고 나누어 계산한다.
		average = Math.round(average * 100) / 100.0;
		System.out.println(average);
		
		//랜덤
		int random = (int)(Math.random() * 100) + 1;
		System.out.println(random);
		
		//Math.random() : 0.0 ~ 1.0미만(0.999...) / Math.random()의 출력값은 double 타입
	}

}

package b_operator;

import java.util.Scanner;

public class ComparingOperator {

	public static void main(String[] args) {
		/*
		 * 비교연산자
		 * - <, >, <=, >=, ==, !=
		 * - 문자열 비교 : equals()
		 * 
		 */
		
		int x = 10;
		int y = 20;
		boolean b = x < y; //비교연산자의 연산결과는 boolean이다.
		System.out.println(b);
		b = x <= y - 15;
		System.out.println(b);	//산술연산자가 비교연산자보다 우선순위가 높다
		
		String str1 = "abc";
		String str2 = new String("abc");	//이제 새로운 주소를 참조형(클래스)를 초기화하는 경우에는 new로 초기화를 해줌
		//그런데 String 타입은 생략해도 되도록 만들어 둠.
		//String str1 = "abc"; String str2 = "abc";
		//위의 경우 두 스트링이 같은 내용을 담고 있다면 str1과 str2는 같은 주소를 갖는다
		//내용을 하나 저장공간에 만들고 그 주소를 str1과 str2가 같이 쓴다
		b = str1 == str2; //문자열의 내용이 아닌 주소를 비교한 것이다.
		System.out.println(b);
		
		//String의 내용을 비교하기 위해서는 equals()메서드를 사용한다. equals는 String class안의 메서드이다.
		b = str1.equals(str2);
		System.out.println(b);
		
		Scanner s = new Scanner(System.in);
		System.out.println(s);
		
		//다음의 문장들을 코드로 작성해주세요.
		//x는 y보다 작거나 같다.
		b = x <= y;
		System.out.println(b);
		//x + 5 와 y는 같다.
		b = x + 5 == y;
		System.out.println(b);
		//y는 홀수이다.
		b = y % 2 == 1;
		System.out.println(b);
		//"기본형"과 "참조형"은 다르다.
		b = !"기본형".equals("참조형");	//주의	(문자열 비교)
		b = "기본형" != "참조형";
		System.out.println(b);
		
		

	}

}

package b_operator;

public class LogicalOperator {

	public static void main(String[] args) {
		/*
		 * 논리연산자
		 * - &&(and) , ||(or), !(NOT)
		 * - 피연산자로 boolean만 허용한다.
		 */
		
		int x = 10;
		int y = 20;
		boolean b = 0 < x && x < 10 || x < y;
		//주의) 한 문장에서 and와 or이 동시에 사용된 경우에는 and연산이 우선순위를 가진다
		
		b = !(x < y);
		//주의 !은 boolean타입 앞에만 붙여야 함. 예를 들어 !x<y는 컴파일 에러 인트타입 앞에 ! 못붙임
		System.out.println(b);
		//효율적 연산
		b = true && true;	//true
		b = true && false;	//false
		b = false && true;	//false
		b = false && false;	//false
		
		b = true || true;	//true
		b = true || false;	//true
		b = false || true;	//true
		b = false || false;	//false
		//왼쪽의 피연산자에서 결과가 정해지면 오른쪽은 수행하지 않는다.
		
		//효율적 연산으로 인해 내가 의도한 결과가 나오지 않을 수 있다.
		int a = 10;
		b = a < 5 && 0 < a++;
		System.out.println(a);
		
		//다음의 문장들을 코드로 작성해주세요.
		//x가 y보다 크고 x가 10보다 작다.
		b = x > y && x < 10;
		System.out.println(b);
		//x가 짝수이고 y보다 작거나 같다.
		b = x % 2 == 0 && x <= y;
		System.out.println(b);
		//x가 3의 배수이거나 5의 배수이다.
		b = x % 3 == 0 || x % 5 == 0;
		System.out.println(b);
	}

}

package b_operator;

import java.util.Scanner;

public class Etc {

	public static void main(String[] args) {
		/*
		 * 비트 연산자
		 * - |, &, *, ~ , <<, >>
		 * - 비트 단위로 연산한다.
		 * 
		 * 기타 연산자
		 * - .(참조연산자) : 특정 범위 내에 속해 있는 멤버를 지정할 때 사용한다.
		 * - ?:(삼항연산자) : 조건식 ? 조건식이 참일 경우 수행할 문장 : 저건식이 거짓일 경우 수행할 문장
		 */
		
		//1byte : 8개의 비트로 이루어짐, 1bit : 컴퓨터가 인식할 수 있는 가장 작은 단위
		System.out.println(10 | 15); //|: 둘다 0인 경우 0 그외 1
		// 10 = 00001010
		// 15 = 00001111
		// 10 | 15 = 00001111 = 15
		
		//비트연산은 실제상황에서 거의 사용하지 않음
		//특수한 분야에서 사용
		
		int x = 10;
		int y = 20;
		int result = x < y? x : y;
		System.out.println(result);
		
		//주민등록번호 뒷자리의 첫번째 숫자가 1이면 남자 2면 여자
		int regNo = 1;
		String gender = regNo % 2 == 1 ? "남자" : "여자";
		System.out.println("당신의 성별은 " + gender + " 입니다.");
		
		gender = regNo == 1 ? "남자" : (regNo == 2 ? "여자" : "확인불가");
		
		//2개의 숫자를 입력받고, 둘 중 더 큰 숫자를 출력해주세요.
		Scanner sc = new Scanner(System.in);
		/*System.out.print("첫 번째 숫자를 입력하세요: ");
		int a = Integer.parseInt(sc.nextLine());
		System.out.print("두 번째 숫자를 입력하세요: ");
		int b = Integer.parseInt(sc.nextLine());
		int largeNum = a > b ? a : b;
		System.out.println("작지 않은 숫자는 " + largeNum + "입니다.");*/
		
		//숫자를 입력받고, 그 숫자가 1이나 3이면 남자를 2나 4면 여자를 출력해주세요.
		//그외의 숫자를 입력하면 확인불가를 출력해주세요.
		
		System.out.print("주민등록번호 뒷자리 첫번째 숫자를 입력하세요: ");
		int regNoInput = Integer.parseInt(sc.nextLine());
		gender = regNoInput == 1 || regNoInput == 3 ? "남자" : (regNoInput == 2 || regNoInput == 4 ? "여자" : "확인불가");
		System.out.println("당신의 성별은 " + gender + " 입니다.");

	}

}

package b_operator;

import java.util.Scanner;

public class SimpleCalculator {

	public static void main(String[] args) {
		/*
		 * 두개의 숫자와 연산자를 입력받아 연산결과를 알려주는 프로그램을 만들어주세요.
		 */
		Scanner sc = new Scanner(System.in);
		double firstNum, secondNum, result;
		String operator;
		System.out.print("첫 번째 숫자를 입력하세요: ");
		firstNum = Double.parseDouble(sc.nextLine());
		System.out.print("연산자를 입력하세요: ");
		operator = sc.nextLine();
		System.out.print("두 번째 숫자를 입력하세요: ");
		secondNum = Double.parseDouble(sc.nextLine());
		
		result = operator.equals("+") ? firstNum + secondNum :
				 (operator.equals("-") ? firstNum - secondNum :
				 (operator.equals("*") ? firstNum * secondNum :
				 (operator.equals("/") ? firstNum / secondNum :
				 (operator.equals("%") ? firstNum % secondNum: -65536.0))));
				
		System.out.print("입력하신 식은 " + firstNum + " " + operator + " " + secondNum + "입니다.");
		
		System.out.print("계산결과는 " + result + "입니다.");

	}

}



===========================================

i++;	//후위형 : 변수의 값을 읽어온 후에 1 증가된다.
++i;	//전위형 : 변수의 값을 읽어오기 전에 1 증가된다.
i--;	//후위형 : 변수의 값을 읽어온 후에 1 감소된다.
--i;	//전위형 : 변수의 값을 읽어오기 전에 1 감소된다.

double result2 = _int + _double;	//표현범위가 더 큰 타입으로 형변환된다. : 작은 타입에서 큰 타입으로 형변환하여 생략됨. 풀어쓰면 (double)_int + _double;
_int = _byte + _short;			//int보다 작은 타입은 int로 형변환된다. 컴퓨터의 연산 정의역은 4바이트 이상인 자료형, 우변의 값은 int 타입이다.
					//단, 컴퓨터는 기본적으로 4바이트 이상인 자료만 연산함. 1바이트와 2바이트 자료형은 4바이트인 int로 형변환하여 연산을 수행한다.
//자바에서는 유니코드를 사용함 a: 97, b: 98
byte b = 127;				//범위 : -128 ~ 127
b++;
System.out.println(b);		//-128로 출력
b = -128;
b--;
System.out.println(b);		//127로 출력
//Q: b = b-4;를 수행하면 어떻게 되느냐? int를 byte로 변환할 수 없다는 에러 발생

average = sum / 3;		//이게 제대로 안되는 경우 1) sum이 int type인 경우 : 둘 모두 int라서 int값 계산됨 -> 해결1. sum을 double로 설정. 해결2. / 3을 / 3.0으로 변경
			// average = (double) (var1 + var2 + var3) / 3; 주의) 여기서 형변환(double)하지 않으면 제대로 계산 안됨
//반올림	Math.round는 항상 소수점 첫번째 자리에서 반올림하기 때문에 다른 자리수에서 반올림하기 위해서는 자리수를 맞춰서 곱하고 나누어 계산한다.
//Math.random() : 0.0 ~ 1.0미만(0.999...) / Math.random()의 출력값은 double 타입

String str1 = "abc";
String str2 = new String("abc");	//이제 새로운 주소를 참조형(클래스)를 초기화하는 경우에는 new로 초기화를 해줌
//그런데 String 타입은 생략해도 되도록 만들어 둠.
//String str1 = "abc"; String str2 = "abc";
//위의 경우 두 스트링이 같은 내용을 담고 있다면 str1과 str2는 같은 주소를 갖는다
//내용을 하나 저장공간에 만들고 그 주소를 str1과 str2가 같이 쓴다
b = str1 == str2; //문자열의 내용이 아닌 주소를 비교한 것이다.
b = str1.equals(str2);//문자열의 내용 비교, equals는 String class안의 메서드이다.

//주의) 한 문장에서 and와 or이 동시에 사용된 경우에는 and연산이 우선순위를 가진다
//b = "기본형" != "참조형";	오답
b = !"기본형".equals("참조형");	//문자열 비교 주의

<TMI>
윤년: 4의 배수 이면서 100의 배수가 아니거나 400의 배수인 해

서기 1년 1월 1일은 월요일
나머지가 0이면 일요일

오늘은 달력만들면 되겠다.

오늘날짜까지 계산하는 방법은 윤년 계산해서 더하면 된다

