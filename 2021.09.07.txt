2021.09.07
<이론>
/*
 *  ResourceBundle객체 => 확장자가 properties인 파일 정보를 읽어와
 *                        key값과 value값을 분리한 정보를 갖는 객체
 *      => 읽어온 파일은 'key값=value값' 형태로 되어 있어야 한다.
 */

static {	// static블록 : JDBCUtil이 로딩되는 시점(다른 클래스에서 JDBCUtil을 실행하는 시점)에 한번 실행됨
    try {
        Class.forName("oracle.jdbc.driver.OracleDriver");	// 해당 클래스가 있는지 체크, 있다면 아무일도 없음, 없다면 예외발생

 * db.properties파일의 내용으로 DB 정보를 설정하는 방법
 * 방법1) Properties객체 이용하기

 * dp.properties파일의 내용으로 DB정보를 설정하는 방법
 * 방법2) ResourceBundle 객체 이용하기
<실습>
	private Connection conn;
	private Statement stmt;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	private Scanner scan = new Scanner(System.in); 
	
	/**
	 * 메뉴를 출력하는 메서드
	 */
	public void displayMenu(){
		System.out.println();
		System.out.println("----------------------");
		System.out.println("  === 작 업 선 택 ===");
		System.out.println("  1. 자료 입력");
		System.out.println("  2. 자료 삭제");
		System.out.println("  3. 자료 수정");
		System.out.println("  4. 전체 자료 출력");
		System.out.println("  5. 작업 끝.");
		System.out.println("----------------------");
		System.out.print("원하는 작업 선택 >> ");
	}
	
	/**
	 * 프로그램 시작메서드
	 */
	public void start(){
		int choice;
		do{
			displayMenu(); //메뉴 출력
			choice = scan.nextInt(); // 메뉴번호 입력받기
			switch(choice){
				case 1 :  // 자료 입력
					insertMember();
					break;
				case 2 :  // 자료 삭제
                    deleteMember();
					break;
				case 3 :  // 자료 수정
					updateMember();
					break;
				case 4 :  // 전체 자료 출력
		            displayMemberAll();	
					break;
				case 5 :  // 작업 끝
					System.out.println("작업을 마칩니다.");
					break;
				default :
					System.out.println("번호를 잘못 입력했습니다. 다시입력하세요");
			}
		}while(choice!=5);
	}


    /*
     * 전체 회원정보를 출력하는 메서드
     */
    private void displayMemberAll(){
        System.out.println();
        System.out.println("---------------------------");
        System.out.println("ID\t이름\t전화번호\t주소");
        System.out.println("---------------------------");

        try{

            conn = JDBCUtil3.getConnection();
            String sql = "select * from mymember";

            stmt = conn.createStatement();

            rs = stmt.executeQuery(sql);

            while(rs.next()) {
                String memId = rs.getString("mem_id");
                String memName = rs.getString("mem_name");
                String memTel = rs.getString("mem_tel");
                String memAddr = rs.getString("mem_addr");

                System.out.println(memId + "\t"
                        + memName + "\t"
                        + memTel + "\t"
                        + memAddr);
            }
            System.out.println("---------------------------");
            System.out.println("출력 작업 끝...");
        }catch(SQLException ex){
            ex.printStackTrace();
        }finally{
            JDBCUtil.disConnect(conn, stmt, pstmt, rs);
        }
    }

    /*
     * 회원정보를 삭제하기 위한 메서드
     */
    private void deleteMember(){
        System.out.println();
        System.out.println("삭제할 회원 정보를 입력하세요.");
        System.out.print("회원 ID >> ");

        String memId = scan.next();

        try{

            conn = JDBCUtil.getConnection();
            String sql = "delete from mymember where mem_id = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, memId);

            int cnt = pstmt.executeUpdate();

            if(cnt > 0){
                System.out.println("삭제되었습니다.");

            }else {
                System.out.println("삭제실패!");
            }

        }catch(SQLException ex){
            ex.printStackTrace();
        }finally{
            JDBCUtil.disConnect(conn, stmt, pstmt, rs);
        }
    }
    /*
     * 회원정보를 수정하기 위한 메서드
     */
    private void updateMember(){
        boolean chk = false; // 중복 여부(존재 여부)

        String memId = "";

        do {
            System.out.println();
            System.out.println("수정할 회원정보를 입력하세요.");
            System.out.print("회원 ID >>");

            memId = scan.next();

            chk = checkMember(memId);

            if(chk == false){
                System.out.println("회원ID가 " + memId + "인 회원이 존재하지 않습니다.");
                System.out.println("다시 입력해 주세요.");
            }
        }while(chk == false);

        System.out.print("회원 이름 >> ");
        String memName = scan.next();

        System.out.print("회원 전화번호 >> ");
        String memTel = scan.next();

        scan.nextLine(); // 입력 버퍼 비우기
        System.out.print("회원 주소 >> ");
        String memAddr = scan.nextLine();

        try{
            conn = JDBCUtil.getConnection();
            
            String sql = "update mymember "
                + "          set mem_name = ?"
                + "              ,mem_tel = ?"
                + "              ,mem_addr = ?"
                + "        where mem_id = ?";

            pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, memName);
            pstmt.setString(2, memTel);
            pstmt.setString(3, memAddr);
            pstmt.setString(4, memId);

            int cnt = pstmt.executeUpdate();
            if(cnt > 0){
                System.out.println(memId + "회원 수정 작업 성공!");
            }else {
                System.out.println(memId + "회원 수정 작업 실패!");
            }

        }catch(SQLException ex){
            System.out.println(memId + "회원 수정 작업 실패!");
            ex.printStackTrace();
        }finally{
            JDBCUtil.disConnect(conn, stmt, pstmt, rs);
        }
    }
	
	/**
	 * 회원정보 추가
	 */
	private void insertMember() {

        boolean chk = false; // 중복 여부(존재 여부)

        String memId = "";

        do {
            System.out.println();
            System.out.println("추가할 회원정보를 입력하세요.");
            System.out.print("회원 ID >>");

            memId = scan.next();

            chk = checkMember(memId);

            if(chk == true){
                System.out.println("회원ID가 " + memId + "인 회원이 존재합니다.");
                System.out.println("다시 입력해 주세요.");
            }
        }while(chk == true);

        System.out.print("회원 이름 >> ");
        String memName = scan.next();

        System.out.print("회원 전화번호 >> ");
        String memTel = scan.next();

        scan.nextLine(); // 입력 버퍼 비우기
        System.out.print("회원 주소 >> ");
        String memAddr = scan.nextLine();

        try{
            conn = JDBCUtil.getConnection();
            
            String sql = "insert into mymember "
                + " (mem_id, mem_name, mem_tel, mem_addr)"
                + " values (?, ?, ?, ?)";

            pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, memId);
            pstmt.setString(2, memName);
            pstmt.setString(3, memTel);
            pstmt.setString(4, memAddr);

            int cnt = pstmt.executeUpdate();
            if(cnt > 0){
                System.out.println(memId + "회원 추가 작업 성공!");
            }else {
                System.out.println(memId + "회원 추가 작업 실패!");
            }

        }catch(SQLException ex){
            System.out.println(memId + "회원 추가 작업 실패!");
            ex.printStackTrace();
        }finally{
            JDBCUtil.disConnect(conn, stmt, pstmt, rs);
        }
	}

    /**
     * 회원ID를 이용하여 회원이 있는지 알려주는 메서드
     * @param memId 회원ID
     * @return 회원이 존재하면 true, 존재하지 않으면  false
     */
    private boolean checkMember(String memId){

        boolean chk = false;

        try{
            conn = JDBCUtil.getConnection();

            String sql = "select count(*) cnt from mymember "
                + "        where mem_id = ? ";

            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, memId);

            rs = pstmt.executeQuery();

            int cnt = 0;
            while(rs.next()) {
                cnt = rs.getInt("cnt"); // getInt(1);
            }

            if(cnt >0) {
                chk = true;
            }

        }catch(SQLException ex){
            ex.printStackTrace();
        }finally{
            JDBCUtil.disConnect(conn, stmt, pstmt, rs);
        }

        return chk;
    }
	public static void main(String[] args) {
		T01_MemberInfoTest memObj = new T01_MemberInfoTest();
		memObj.start();
	}

    // 읽어온 정보를 저장할 Properties객체 생성
    Properties prop = new Properties();

    // 읽어올 파일명을 이용한 File객체 생성
    File file = new File("res/db.properties");

    try(
            FileInputStream fis = new FileInputStream(file);
       ){
        // 파일 읽기를 수행할 FileInputStream객체 생성
        prop.load(fis); // 파일 내용을 읽어와 key와 value값으로 분류한 후
                        // Properties객체에 담아준ㄷ나.
        
        // 읽어온 자료 출력하기
        // key값만 읽어와 Enumeration객체로 변환하기
        Enumeration<String> keys = (Enumeration<String>)prop.propertyNames();

        // key개수만큼 반복해서 값 출력하기
        while(keys.hasMoreElements()){
            String key = keys.nextElement();
            String value = prop.getProperty(key);
            System.out.println(key + " : " + value);
        }

        System.out.println("출력 끝...");

    }catch(IOException ex){
        ex.printStackTrace();
    }
}
        // ResourceBundle 객체를 이용하여 파일 읽어오기
        // ResourceBundle객체 생성하기
        // => 파일을 지정할 때는 '파일명'만 지정하고 확장자는 지정하지 않는다.
        //    (확장자는 항상 properties이기 때문에)
//    	System.out.println(Locale.getDefault());	// 기본 로케일 설정값
        ResourceBundle bundle = ResourceBundle.getBundle("db", Locale.JAPANESE);

        // key값들만 읽어오기
        Enumeration<String> keys = bundle.getKeys();

        // key값 개수만큼 반복해서 value값 가져오기
        while(keys.hasMoreElements()){
            String key = keys.nextElement();

            // key값을 이용하여 value값 가져오기
            String value = bundle.getString(key);

            System.out.println(key + " => " + value);
        }

        System.out.println("출력 끝");
    }
	static {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");	
			System.out.println("드라이버 로딩 완료!");
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패!");
			e.printStackTrace();
		}
	}
	
	public static Connection getConnection() {
		
		try {
			return DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"LKH96",
					"java");
		}catch(SQLException ex) {
			System.out.println("DB 연결 실패!");
			ex.printStackTrace();
			
			return null;
		}
	}
	
	public static void disConnect(
			Connection conn,
			Statement stmt,
			PreparedStatement pstmt,
			ResultSet rs
			) {
		if(rs != null) 		try { rs.close(); } 	catch(SQLException ex) {}
		if(pstmt != null) 	try { pstmt.close(); } 	catch(SQLException ex) {}
		if(stmt != null) 	try { stmt.close(); } 	catch(SQLException ex) {}
		if(conn != null) 	try { conn.close(); } 	catch(SQLException ex) {}
		
	}
	static Properties prop;	// Properties 객체변수 선언
	
	static {
		prop = new Properties(); // 객체 생성
		
		try {
			prop.load(new FileInputStream("res/db.properties"));
			
			Class.forName(prop.getProperty("driver"));
		}catch(IOException ex) {
			System.out.println("파일이 없거나 입출력 오류입니다.");
			ex.printStackTrace();
		}catch(ClassNotFoundException ex) {
			System.out.println("드라이버 로딩 실패!");
			ex.printStackTrace();
		}
	}
	
	public static Connection getConnection() {
		try {
			return DriverManager.getConnection(
					prop.getProperty("url"),
					prop.getProperty("user"),
					prop.getProperty("pass"));
		}catch(SQLException ex) {
			System.out.println("DB 연결 실패!");
			ex.printStackTrace();
			
			return null;
		}
	}
static ResourceBundle bundle;	// ResouceBundle객체변수 선언

static {
    bundle = ResourceBundle.getBundle("db");
    
    try {
        Class.forName(bundle.getString("driver"));
    }catch(ClassNotFoundException ex) {
        System.out.println("드라이버 로딩 실패!");
        ex.printStackTrace();
    }
}
public static Connection getConnection() {
    try {
        return DriverManager.getConnection(
                bundle.getString("url"),
                bundle.getString("user"),
                bundle.getString("pass"));
    }catch(SQLException ex) {
        System.out.println("DB 연결 실패!");
        ex.printStackTrace();
        
        return null;
    }
}

driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:xe
user=LKH96
pass=java
greeting=Hello
<TMI>
jdbc코딩을 할 때 반응이 없다? -> commit문제를 확인하라.

Model : 데이터 관련
View : UI단, 엔드유저단, 사용자가 보는 것
Controller : 사용자의 요청을 받아서 요청작업을 처리하는 기능을 호출

