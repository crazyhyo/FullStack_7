2021.12.27

화면설계 기본은 1280 & 4:3
<div class="wrapper" style="max-width:1280px;">

기능적 제한의 구현은 interceptor를 이용한다.
interceptor는 controller를 감싸며 xml등록되니까.
정확히는 interceptor의 pre method를 이용한다.
controller에서 기능제한을 구현하려면 결합도가 높아진다.

인증은 security를 이용하여
인허가(부분적 기능제한)은 interceptor를 이용하여 구현

interceptor를 사용하려면 메서드명에 대한 규칙을 먼저 정해야 한다.
쓸거면 메서드 작성 전에 합의해야 함.
interceptor사용을 위한 환경설정도 해야하고


<interceptor>

interceptor는 url을 대상으로 하는 controller를 감싸고 있는 녀석이라고 생각하자.

브라우저에서 특정 url을 요청하고 controller는 해당 request를 받을 method를 가지고 있다고 하자.
개발자는 interceptor를 이용하여 특정 url을 담당하는 @(Rest)Controller의 @RequestMapping("url") 메서드에 대하여
해당 메서드가 실행되기 직전 시점과 해당 메서드가 실행된 직후 시점에 자신이 바라는 작업을 수행하도록 할 수 있다.

개발자가 원하는 작업의 실행시점이 매핑된 메서드를 기준으로 직전이냐 직후냐에 따라(aftercomplete도 있는데 그건
어느 시점인지 모르겠음. 확인결과는 pre -> after -> afterComplete의 순서로 실행되긴 함) 해당하는 메서드를 작성한
클래스를 만든다. 이 클래스는 HandlerInterceptorAdapter class를 extends하여 만든다(interface가 아닌 이유는
모든 메서드를 @override해야하는 interface와는 다르게 class는 해당 메서드의 구현이 선택적이기 때문이다.
그리고 개발자가 부여하고자 하는 추가적인 작업시점은 선택적이기 때문에 class를 상속받는다.)
이후 해당 class를 <mvc:interceptors>에 bean등록하여 실행한다.
<mvc:interceptors>
    <interceptor>
        <mapping path="url pattern"/>
        <mapping path="url pattern2"/>
        <beans:bean class="classFullName" />
    </interceptor>
</mvc:interceptors>

이 interceptor는 특정 url의 실행시점 이후에 작업이 제대로 완료되었는지 확인하기 위해(loginUserLog남기기) 이용하거나
[interceptor사용 이유 : 해당 메서드 직후 시점에 제대로 작업이 이루어졌는지 판단해야 함]
특정 url실행 이전에 권한을 체크하는 방식으로 사용한다.

interceptor를 효율적으로 사용하기 위해서는 interceptor를 적용할 url의 패턴을 정규화 가능하도록 설계해야 한다.

<security>
pom.xml에 maven dependency를 추가하는 것을 제외하면
security의 시작은 web.xml에 security Filter를 다는 것 부터 시작한다.
이후 root-context.xml에서 읽을 수 있는 형태로 <security:authentication-manager>와 <security:http>를 통하여 인증과
인허가 세부사항을 결정한다.

먼저 요청된 url을 http에서 authentication비교할 url인지 확인하고 
<http pattern="/resources/**" security="none" />
<http use-expressions="true" pattern="/**"></http>
[resources를 제외한 모든 url에 대하여 security를 적용하겠다.]
security가 적용된 모든 url에 대하여 권한확인 절차가 없었다면 loginpage로 보낸다.
기본 loginpage는 쓸 일이 없으니 <form-login login-page="loginFormUrl">을 익혀두자.
<form-login>은 반드시 기재해야 하는 attribute는 username과 password이다. 
우리가 지정하는 jsp파일에는 로그인 폼이 구현되어 있고 id에 해당하는 input tag name과 username-parameter를 맞춘다
같은 방식으로 비밀번호에 해당하는 input tag name과 password-parameter를 맞춘다.
해당form의 action과 login-processing-url을 맞춘다. default-targer-url은 선택

이렇게 지정된 loginform을 제출하게 되면 인증절차를 진행한다.
<security:authentication-manager>태그의 <authentication-provider ref="customProviderClass"/>
를 통해 개발자가 지정한 방식으로 인증절차를 진행한다.
해당하는 provider는 form-login에서 넘어온 username과 password를 getPrincipal과 getCredentials()
로 꺼내고 인증절차를 진행한다. 인증 실패로 처리하기 위해서는 throw new BadCredentialsException("msg")에
메시지를 담아 보내고, 인증 성공으로 처리하기 위해서는 Authentication interface를 return하면 된다.
단, 인증 성공했을 때의 인증수단이 너무 많기 때문에 public boolean supports(Class<?> clz)를 이용하여
어떤 클래스 타입으로 Authentication interface를 리턴할 것인지 지정해 준다.

이렇게 return 타입을 지정하게 되면 해당 타입의 class를 만들어 return하게 되는데 new 해당클래스타입 시점에서
해당 Authentication의 getPrincipal(), getCredentials()에서 무엇을 줄지 지정할 수 있다.

UserDetail interface를 implements 하여 User를 커스텀하긴 했는데 왜했는진 모르겠음



