2021.09.24
<이론>
/*
 * 서블릿 동작 방식에 대하여...
 *
 * 1. 사용자(클라이언트)가 URL을 클릭하면 HTTP Request를 서블릿 컨테이너로 전송(요청)함.
 * 2. 컨테이너는 web.xml에 정의된 url패턴을 확인하여 어느 서블릿을 통해 처리해야 할지를 검색함.
 *    (로딩이 안 된 경우에는 로딩함. 로딩시 init()메서드 호출됨.)
 * 3. Servlet Container는 요청을 처리할 개별 스레드 객체를 생성하여 서블릿 객체의 service()메서드를 호출한다.
 *    (HttpServletRequest 및 HttpServletResponse 객체를 생성하여 파라미터로 넘겨준다.)
 * 4. service()메서드는 메서드 타입을 체크하여 적절한 메서드를 호출한다.
 *    (doGet, doPost, doPut, doDelete 등) // 웹 브라우저 상에서는 doGet이나 doPost만 호출가능
 * 5. 요청 처리가 완료되면, HttpServletRequest 및 HttpServletResponse객체는 소멸함
 * 6. 컨테이너로부터 서블릿이 제거되는 경우에 destroy()메서드가 호출된다.
 */

/*
 * 요청 객체로부터 파라미터 데이터를 가져오는 방법
 *
 * - getParameter() - 파라미터값이 한개인 경우에 사용됨.
 * - getParameterValues() - 파라미터값이 여러개인 경우에 사용함. ex)checkbox
 * - getParameterNames() - request에 존재하는 모든 파라미터 정보를 가져올 때 사용함
 */
<실습>

public class T01_ServletLifeCycle extends HttpServlet{

	@Override
	public void init() throws ServletException {
		// 초기화 코드 작성..
		System.out.println("init() 호출 됨");
	}
	
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 실제적인 작업수행이 시작되는 지점...(자바의 메인베서드 역할)
		System.out.println("service() 호출됨...");
		super.service(req, resp);
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 메서드 방식이 GET 방식인 경우 호출됨...
		System.out.println("doGet() 호출됨...");
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 메서드 방식이 POST 방식인 경우 호출됨...
		System.out.println("doPost() 호출됨...");
	}
	
	@Override
	public void destroy() {
		// 객체 소멸시(컨테이너로부터 서블릿객체 제거시) 필요한 코드 작성...
		System.out.println("destroy() 호출됨...");
	}
}

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // Post방식으로 넘어오는 Body데이터를 인코딩 처리함.
        // Get방식은 톰캣의 URLEncoding 설정을 이용함.
        // 반드시 request에서 값을 가져오기 전에 먼저 설정해야 적용됨.
        req.setCharacterEncoding("UTF-8");

        // request로부터 name 값을 가져옴
        String name = req.getParameter("name");
        System.out.println("name => " + name);

        // 응답메시지 인코딩설정(Content-Type의 charset=UTF-8과 동일)
        resp.setCharacterEncoding("UTF-8");
        resp.setContentType("text/plain");

        // 실제 수행할 로직(기능)이 시작되는 부분...
        PrintWriter out = resp.getWriter();

        out.println("name => " + name);
        out.println("서블릿 경로 : " + req.getServletPath());
        out.println("컨텍스트 경로 : " + req.getContextPath());

    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }
}

/**
 * 서블릿을 이용한 파라미터 데이터 처리 예제
 */
public class T03_ServletParameterTest extends HttpServlet{

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        req.setCharacterEncoding("utf-8");

        String username = req.getParameter("username");
        String password = req.getParameter("password");
        String gender = req.getParameter("gender");
        String hobby = req.getParameter("hobby");
        String rlgn = req.getParameter("rlgn");
        String[] foods = req.getParameterValues("food");

        //resp.setCharacterEncoding("utf-8");
        resp.setContentType("text/html;charset=utf-8");

        PrintWriter out = resp.getWriter();
        out.println("<html>");
        out.println("<body>");
        out.println("<p>username : " + username + "</p>");
        out.println("<p>password : " + password + "</p>");
        out.println("<p>gender : " + gender + "</p>");
        out.println("<p>hobby : " + hobby + "</p>");
        out.println("<p>rlgn : " + rlgn + "</p>");

        if(foods != null) {
            for(String food : foods){
                out.println("<p>food : " + food + "</p>");
            }
        }

        Enumeration<String> params = req.getParameterNames();

        while(params.hasMoreElements()){
            String param = params.nextElement();
            out.println("<p>파라미터 이름 : " + param + "</p>");
        }

        out.println("</body>");
        out.println("</html>");

    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }

}


<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="../css/mystyle.css">
<meta charset="UTF-8">
<title>POST방식 테스트</title>
</head>
<body>
<form action="/servletTest/T01_ServletLifeCycle" method="post">
	<input type="submit" value="전송">
</form>
</body>
</html>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>입력폼 예제</title>
</head>
<body>
   <form method="post" action="./T03_ServletParameterTest">
    <label for="username">유저명:</label><br>
    <input type="text" name="username" id="username"><br>
    <label for="password">패스워드:</label><br>
    <input type="password" name="password" id="password"><br>
    <hr>
    <input type="radio" id="male" name="gender" value="male">
    <label for="male">Male</label><br>
    <input type="radio" id="female" name="gender" value="female">
    <label for="female">Female</label><br>
    <input type="radio" id="other" name="gender" value="other">
    <label for="other">Other</label><br>
    <hr>
    <input type="checkbox" id="cb01" name="hobby" value="ch01">
    <label for="cb01">낚시</label>
    <input type="checkbox" id="cb02" name="hobby" value="ch02">
    <label for="cb02">등산</label>
    <input type="checkbox" id="cb03" name="hobby" value="ch03">
    <label for="cb03">하이킹</label>
    <input type="checkbox" id="cb04" name="hobby" value="ch04">
    <label for="cb04">독서</label><br>
    <hr>
    <label for="rlgn">종교</label>
    <select id="rlgn" name="rlgn">
    	<option value="01">불교</option>
    	<option value="02">기독교</option>
    	<option value="03">힌두교</option>
    	<option value="04">기타</option>
    </select>
    
    <hr>
    <label for="food">좋아하는 음식</label>
    <select id="food" name="food" multiple="multiple">
    	<option value="01">소고기</option>
    	<option value="02">돼지고기</option>
    	<option value="03">물고기</option>
    	<option value="04">채식</option>
    </select>
    
	<br>
	<br>
    <input type="submit" value="Submit">
   </form> 
</body>
</html>

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>ServletTest</display-name>
	<servlet>
        <servlet-name>T01_ServletLifeCycle</servlet-name> <!--Alias 설정, 정식명칭(클래스)kr.or.ddit.basic.T01~을 이렇게 부르겠다. 이 이름을 tomcat에게 알려주고 있는 부분-->
		<servlet-class>kr.or.ddit.basic.T01_ServletLifeCycle</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
    <servlet-mapping><!--만약 url 상에서 T01_ServletLifeCycle을 찾으면 위에서 설정한 서블릿 네임인(alias) T01_~으로 매핑한다
    결국 축약어의 원본인 kr.or.ddit.basic.~인 클래스가 연결되게 됨-->
		<servlet-name>T01_ServletLifeCycle</servlet-name>
		<url-pattern>/T01_ServletLifeCycle</url-pattern>
	</servlet-mapping>  

	<servlet>
        <servlet-name>T02_ServletTest</servlet-name>
		<servlet-class>kr.or.ddit.basic.T02_ServletTest</servlet-class>
	</servlet>

    <servlet-mapping>
		<servlet-name>T02_ServletTest</servlet-name>
		<url-pattern>/T02_ServletTest</url-pattern>
	</servlet-mapping>  

	<servlet>
        <servlet-name>T03_ServletParameterTest</servlet-name>
		<servlet-class>kr.or.ddit.basic.T03_ServletParameterTest</servlet-class>
	</servlet>

    <servlet-mapping>
		<servlet-name>T03_ServletParameterTest</servlet-name>
		<url-pattern>/T03_ServletParameterTest</url-pattern>
	</servlet-mapping>  

</web-app>

<TMI>
get방식은 한정된 url을 통해서만 정보를 전달할 수 있음.
get방식으로 전달한 정보는 url에 노출된다.
get방식요청 -> doGet()호출
post방식요청 -> doPost()호출[form의 method="post"인 경우]
init()의 호출시점 = 객체가 만들어지는 시점
사용자가 url로 요청하는 순간 init()이 호출되었다 = url요청시 객체를 생성함
destroy()가 호출되는 시점 = 객체가 소멸되는 시점

만약 init()을 즉, 객체생성시점을 서버시작시로 바꾸기 위해서는 
<load-on-startup></load-on-startup> 태그 내부에 우선순위 정수값을 넣어주면 된다.
