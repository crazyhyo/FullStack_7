2021.07.08

<이론>
review : SELECT문 - 검색시 사용, 가장 많이 사용되는 SQL 명령어
FROM -> WHERE -> SELECT -> ORDER BY절 순으로 실행, WHERE 조건이 거짓인 경우 SELECT실행 안함
SELECT 절 : 보여줄 항목 선택
FROM 절 : 어떤 테이블에서 가져올 것인지
WHERE 절 : 조회할 조건 설정

ORDER BY [컬럼명/컬럼인덱스/별칭] <- 컬럼명을 그대로 쓸수도 있으나 컬럼의 인덱스(SELECT에서 참조하고자 하는 컬럼명들의 인덱스가 차례로 1,2,3,...부여됨)
복잡한 수식이 사용되어 있는 경우 ORDER BY에서 다시 그 수식을 돌리지 않기 위해서 컬럼인덱스로 접근한다.
"오름차순이 DEFAULT"로 설정되어있음, 그래서 내림차순 DESC로 정렬하고자 하면 생략할 수 없다.

컬럼인덱스가 가장 권고되는 방법, 별칭은 쓰지 말자.
ORDER BY절에서는 참조하고 있는 테이블의 어떤 컬럼에도 접근할 수 있다.
ORDER BY MEM_ID DESC, MEM_HP DESC;
뜻 : 제일 먼저 회원번호 순으로 내림차순 정렬하되,
	같은 회원번호이면 핸드폰 번호를 기준으로 내림차순으로 정렬하라.
	또한 첫번째 정렬기준으로 정렬이 끝났다면 ( 같은 회원번호를 가지고 있는 회원이 없다면 ) 두번째 정렬은 시행하지 않음
ORDER BY MEM_ID "DESC"<- 각 행에 대해 정렬할 거면 각 행별로 정렬순서를 지정해 주어라. 안그러면 DEFAULT ASC로 정렬한다, MEM_HP DESC;

내가 원하는 데이터가 들어있는 테이블이 없는 경우
FROM절에서 어떤 테이블을 가져와야하는지 모른다(사실 그런 테이블은 없다)
그렇다면 SELECT문으로 어떻게 가져와야 하는가? FROM 테이블명은 필수문법인데
그래서 오라클에서는 가상 테이블인 DUAL을 지원한다.
SELECT A
FROM DUAL;

SELECT절에서 별칭에 띄어쓰기를 하면 오류가 나오는 이유:
SELECT 절의 종료는 띄어쓰기로 인식, 띄어쓰기 이후에는 반드시 FROM이 나와야 하는데
띄어쓰기를 했다는 건 실 사용에서 다음 문자가 나온다는 의미이므로 FROM이 나올리가 없음
그래서 FROM을 찾지 못했다는 오류메세지 출력


논리연산자의 우선순위는 NOT AND OR 순임

IN, ANY, SOME, ALL, EXISTS는 데이터가 하나 이상 존재할 때
BETWEEN 범위지정
LIKE 패턴지정

SUBSTR(문자열, 시작글자번호, 가져올 문자수)
TO_NUMBER(문자열)

ALTER USER HR ACCOUNT UNLOCK;
HR이라는계정은 있음. 다만 락되어 있어서 안보일 뿐
기본 비밀번호는 설정되어 있지 않음
ALTER U

모든 프로그래밍 언어는 연산시 가장 먼저 연산 대상의 데이터 타입을 변경한다(데이터 타입을 같도록 한다)
자바에서 "75" + 20	실행
-> "75" + "20"	숫자 20이 문자열 "20"으로 변환
-> "7520"	연산자 오버라이딩 발생

자바에서는 문자열이 가장 우선순위가 높다.

오라클에서 "75" + 20 실행
-> 75 + 20	문자열 75가 숫자 20으로 변환
-> 95		출력

오라클에서는 숫자가 가장 우선순위가 높다.
이런 이유로 "AB" + 20 은 자바에서는 "AB20"으로, 오라클에서는 에러가 발생한다

오라클의 문자열 더하기 기호 : ||

CASE WHEN (조건) 
THEN
	참일 때 수행코드
ELSE
	거짓일 때 수행코드
END

exclusive or : 배타적 논리합
자바나 오라클에서는 이를 구현할 수 있는 방법이 없음.(명령어 없나봐)

[PROD TABLE]
매출(판매)단가는 PRICE
매입단가는 COST
할인판매단가는 SALE이 붙음

[BUYPROD TABLE]
BUY_PROD: 상품번호
BUY_QTY: 수량
BUY_COST: 매입단가

[MEMBER TABLE]
MEM_ID
MEM_NAME
MEM_REGNO1	<-	데이터타입이 CHAR(6)
MEM_REGNO2	<-	데이터타입이 CHAR(7)
MEM_ADD1
MEM_ADD2
MEM_JOB
MEM_MILEAGE

[CART TABLE]
CART_MEMBER : 회원번호 MEM_ID
CART_NO : 날짜 8자리와 로그인순서로 부여된 5자리 숫자

[LPROD TABLE]
LPROD_GU : 분류코드

[PROD TABLE]
PROD_IMG		VARCHAR2(40)	<-이미지가 저장된 경로만 가지고 있음
PROD_TOTALSTOCK	<-	현재 매장의 재고량
PROD_PROPERSTOCK	<-	상품의 적정재고량
이 두개를 사용하면 자동발주시스템을 만들 수 있음

ID, NAME, LGU, BUYER, COST, PRICE

==================================================================

if문에서 여러 조건이 참이더라도 가장 먼저 참이라고 판단한 코드만 실행한다. <- 같은 if문에 여러 블럭이 있을 때
참조형 타입의 기본값이 null임
직접초기화를 하지 않아도 알아서 초기화되는 경우 기본값으로 초기화된다.
기본형 타입은 기본값이 보통 0임
boolean 기본값은 false


<실습>

       SELECT       MEM_ID      AS  회원번호,
                    MEM_NAME    AS  회원명,
                    MEM_BIR     AS  생년월일,
                    MEM_MILEAGE AS  마일리지,
/*                    CASE WHEN   SUBSTR(MEM_REGNO2,1,1) = '2'    OR
                                SUBSTR(MEM_REGNO2,1,1) = '4'    THEN
                                '여성회원'
                    ELSE
                                '남성회원'
                    END
                                AS  비고*/
                    '여성회원'  AS  비고
       FROM         MEMBER
       WHERE        SUBSTR(MEM_REGNO2,1,1) = '2'
                    OR  SUBSTR(MEM_REGNO2,1,1) = '4';

2021-0708-01)
1)SELECT 절 구성
  SELECT [DISTINCT] 컬럼명(수식|데이터) [AS] ["][별칭]["]
    - 'DISTINCT' : 중복된 값 배제
    - '[AS]["][별칭]["]' : 컬럼에 부여된 또다른 이름으로 특수문자 사용시 " "로 묶어 사용
        -출력시 컬럼의 제목
사용예)  회원테이블(MEMBER)의 주민번호(MEM_REGNO1)을 사용하여 회원의 나이를 조회하시오.
        단, Alias는 회원번호, 회원명, 주민번호, 나이이다.
    
    SELECT  MEM_ID                                                                  AS  "회원번호",
            MEM_NAME                                                                AS  "회원명",
            MEM_REGNO1 || '-' || MEM_REGNO2                                         AS  "주민 번호",
            EXTRACT(YEAR FROM SYSDATE) - (TO_NUMBER(SUBSTR(MEM_REGNO1,1,2)) + 1900) AS  "나이"
    FROM    MEMBER;
    
    (1)연산자(operator)
    - 산술연산자 : +, -, *, /
사용예) HR계정의 사원테이블(EMPLOYEES)에서 보너스를 계산하여 급여의 지급액을 조회하시오
       보너스 = 급여 * 영업실적코드(COMMISION_PCT)의 35%
       지급액 = 급여 + 보너스
       출력 : 사원번호, 사원명, 급여, 보너스, 지급액

       SELECT   A.EMPLOYEE_ID                                                   AS      "사원번호",
                A.FIRST_NAME || ' ' || A.LAST_NAME                              AS      "사원명",
                A.SALARY                                                        AS      "급여",
                A.SALARY * NVL(A.COMMISSION_PCT,0) * 0.35                       AS      "보너스",
                A.SALARY + A.SALARY * NVL(A.COMMISSION_PCT,0) * 0.35            AS      "지급액"
       FROM HR.EMPLOYEES A;

       SELECT   EMPLOYEE_ID                                     AS  사원번호,
                FIRST_NAME || ' ' || LAST_NAME                  AS  사원명,
                SALARY                                          AS  급여,
                SALARY * NVL(COMMISSION_PCT,0) * 0.35           AS  보너스,
                SALARY + SALARY * NVL(COMMISSION_PCT,0) * 0.35  AS  지급액
       FROM     HR.EMPLOYEES;
                
    - 관계연산자 : 대소비교, TRUE/FALSE 를 결과로 반환, <, >, <=, >=, =, !=, <>
                조건문 구성에 주로 사용 (WHERE 절)
사용예) 회원테이블에서 마일리지가 4000이상인 회원의 회원번호, 회원명, 직업, 마일리지를 조회하시오.
       마일리지가 많은 회원부터 조회
    SELECT      MEM_ID      AS  회원번호,
                MEM_NAME    AS  회원명,
                MEM_JOB     AS  직업,
                MEM_MILEAGE AS  마일리지
    FROM        MEMBER
    WHERE       MEM_MILEAGE >= 200
    ORDER BY    MEM_MILEAGE DESC, MEM_ID DESC;


**회원테이블 정보 변경
    1) d001회원의 주민등록번호 460409-2000000, 생년월일이 1946/04/09
       ->        주민등록번호 010409-4000000, 생년월일이 2001/04/09
    2) n001회원의 주민등록번호 750323-1011014, 생년월일이 1975/03/23
       ->        주민등록번호 000323-3011014, 생년월일이 2000/03/23
    2) v001회원의 주민등록번호 520131-2402712, 생년월일이 1952/01/31
       ->        주민등록번호 020131-4402712, 생년월일이 2002/01/31

**정보변경 : UPDATE문
    UPDATE  테이블명
    SET     컬럼명 = 값[,
            컬럼명 = 값 ,
                :
    [WHERE 조건]; 
       
       UPDATE   MEMBER
       SET      MEM_REGNO1 = '010409',
                MEM_REGNO2 = '4000000',
                MEM_BIR = TO_DATE('20010409')
       WHERE    MEM_ID = 'd001';
       UPDATE   MEMBER
       SET      MEM_REGNO1 = '000323',
                MEM_REGNO2 = '3011014',
                MEM_BIR = TO_DATE('20000323')
       WHERE    MEM_ID = 'n001';
       UPDATE   MEMBER
       SET      MEM_REGNO1 = '020131',
                MEM_REGNO2 = '4402712',
                MEM_BIR = TO_DATE('20020131')
       WHERE    MEM_ID = 'v001';
       
    SELECT      MEM_ID,  MEM_REGNO1, MEM_REGNO2, MEM_BIR
    FROM        MEMBER
    WHERE       MEM_ID IN('d001','v001','n001');

사용예) 회원테이블에서 여성회원정보를 조회하시오.
       Alias 회원번호, 학원명, 생년월일, 마일리지, 비고    
    
       SELECT       MEM_ID      AS  회원번호,
                    MEM_NAME    AS  회원명,
                    MEM_BIR     AS  생년월일,
                    MEM_MILEAGE AS  마일리지,
                    CASE WHEN   SUBSTR(MEM_REGNO2,1,1) = ANY('2','4')   THEN
                                '여성회원'
                    ELSE
                                '남성회원'
                    END
                                AS  비고
--                  '여성회원'  AS  비고
       FROM         MEMBER
       WHERE        SUBSTR(MEM_REGNO2,1,1) = ANY('2','4');

    - 논리연산자 : NOT, AND, OR
        NOT : 논리부정
        AND OR 은 진리표대로
        ----------------------------
        입력1 입력2 출력
                   OR   AND (EX-OR)
        ----------------------------
        0     0    0    0   0
        0     1    1    0   1
        1     0    1    0   1
        1     1    1    1   0
        ----------------------------
        MEM_MILEAGE >= 2000 OR  EXTRACT(YEAR FROM MEM_BIR) <= 2000
사용예)  사원테이블에서 평균급여 이상 급여를 받는 사원을 조회하시오.
        Alias는 사원번호, 사원명, 급여, 부서번호
        
        SELECT      EMPLOYEE_ID     AS  사원번호,
                    FIRST_NAME      AS  사원명,
                    SALARY          AS  급여,
                    DEPARTMENT_ID   AS  부서번호,
                    ROUND((SELECT AVG(SALARY)
                    FROM    HR.EMPLOYEES),0)    AS  평균급여
        FROM        HR.EMPLOYEES
        WHERE       NOT SALARY  < (SELECT    AVG(SALARY)
                                  FROM  HR.EMPLOYEES);
                                  
    - 기타연산자 : IN, ANY, SOME, ALL, EXISTS, BETWEEN, LIKE 등 제공
                IN은 OR로 연결된 것과 똑같음


        
    SELECT * FROM HR.EMPLOYEES;

==================================================================

package c_statement;

import java.util.Scanner;

public class ConditionalStatement {

	public static void main(String[] args) {
		/*
		 * 조건문 
		 * - if문 
		 * - switch문
		 * 
		 * if문 
		 * - if(조건식){} : 조건식의 결과가 true이면 블럭안의 문장을 수행한다. 
		 * - else if(조건식){} : 다수의 조건이 필요할 때 if 뒤에 추가한다. 
		 * - else{} : 조건식 이외의 경우를 위해 추가한다.
		 */

		int a = 4;

		if (a == 1) {
			System.out.println("a == 1");
		} else if (a == 2) {
			System.out.println("a == 2");
		} else if (a == 3) {
			System.out.println("a == 3");
		} else {
			System.out.println("else");
		}

		if (a < 10) {
			System.out.println("a가 10보다 작다.");
		} else if (a < 20) {
			System.out.println("a가 20보다 작다.");
		}

		// 점수가 60점 이상이면 합격 그렇지 않으면 불합격
		int score = 80;
		if (score >= 60) {
			System.out.println("합격");
		} else {
			System.out.println("불합격");
		}

		// 성적에 등급을 부여하는 프로그램
		score = 80;
		String grade = null;

		if (score >= 90) {
			grade = "A";
		} else if (score >= 80) {
			grade = "B";
		} else if (score >= 70) {
			grade = "C";
		} else if (score >= 60) {
			grade = "D";
		} else {
			grade = "F";
		}
		System.out.println(score + "점수에 해당하는 등급은 " + grade + " 입니다.");

		// 기본값 : 자동으로 초기화 될때 저장되는 값
		// 참조형타입 : null
		// boolean : false
		// 그외 : 0

		score = 90;
		grade = null;

		if (score >= 90) {
			grade = "A";
			if (score >= 97) {
				grade += "+";
			} else if (score <= 93) {
				grade += "-";
			} else {
				grade += "0";
			}
		} else if (score >= 70) {
			grade = "C";
			if (score >= 77) {
				grade += "+";
			} else if (score <= 73) {
				grade += "-";
			} else {
				grade += "0";
			}
		} else if (score >= 60) {
			grade = "D";
			if (score >= 67) {
				grade += "+";
			} else if (score <= 63) {
				grade += "-";
			} else {
				grade += "0";
			}
		} else {
			grade = "F";
		}
		System.out.println(score + "점수에 해당하는 등급은 " + grade + " 입니다.");

		//줄맞추기 단축키 : Ctrl + shift + f
		
		/*
		 * switch문
		 * - switch(int/String){ case 1: break; }
		 * - 조건식의 결과는 정수와 문자열만(jDK 1.7부터 문자열 허용) 허용한다.
		 * - 조건식과 일치하는 case문 이후의 문장을 수행한다.
		 */
		
		a = 10;
		
		switch (a) {
		case 10:
			System.out.println("a == 10");			break;
		case 20:
			System.out.println("a == 20");			break;
		default:
			System.out.println("default");			break;
		}
		//특별히 의도하지 않았다면 case사이사이에 break문을 넣어줘야 함.
		
		String b = "a";
		switch (b){
		case "a":
			System.out.println("b == \"a\"");			break;
		case "b":
			System.out.println("b == \"b\"");			break;
		default:
			System.out.println("default");				break;
		}
		
		//주어진 월에 해당하는 계절을 출력해봅시다.
		int month = 1;
		String season = null;
		
		switch ( month ){
		case 12:		case 1:		case 2:
			season = "겨울";			break;
		case 3:		case 4:		case 5:
			season = "봄";			break;
		case 6:		case 7:		case 8:
			season = "여름";			break;
		case 9:		case 10:		case 11:
			season = "가을";			break;
		default:
			System.out.println("1에서 12에 해당하는 월을 입력하세요.");	break;
		}
		System.out.println(season);
		
		score = 50;
		grade = null;
		switch (score/10){
		case 10: case 9:
			grade = "A";	break;
		case 8:
			grade = "B";	break;
		case 7:
			grade = "C";	break;
		case 6:
			grade = "D";	break;
		default:
			grade = "F";	break;
		}
		System.out.println(grade);
		
		
		//숫자를 입력받아 그 숫자가 0인지 아닌지 출력해주세요.
		
		//int num;
		Scanner sc = new Scanner(System.in);
		//System.out.print("숫자를 입력해주세요:");
		//num = Integer.parseInt(sc.nextLine());
		/*if( num == 0 ){
			System.out.println("입력한 숫자는 0입니다.");
		}else{
			System.out.println("입력한 숫자는 0이 아닙니다.");
		}
		*/
		
		//숫자를 입력받아 그 숫자가 홀수인지 짝수인지 출력해주세요.
		/*if ( num % 2 == 0 ){
			System.out.println("입력한 숫자는 짝수입니다.");
		}else if (num % 2 == 1 ){
			System.out.println("입력한 숫자는 홀수입니다.");
		}*/
		
		//정수 3개를 입력받아 합계, 평균, 등급을 출력해주세요.
		/*int num1, num2, num3;
		int sum;
		double avg;
		
		System.out.print("첫 번째 숫자를 입력해주세요:");
		num1 = Integer.parseInt(sc.nextLine());
		System.out.print("두 번째 숫자를 입력해주세요:");
		num2 = Integer.parseInt(sc.nextLine());
		System.out.print("세 번째 숫자를 입력해주세요:");
		num3 = Integer.parseInt(sc.nextLine());
		
		sum = num1 + num2 + num3;
		System.out.println("합계는 " + sum + "입니다.");
		avg = sum / 3.0;
		System.out.println("평균은 " + Math.round(avg * 100) / 100.0 + "입니다.");

		switch ((int)avg/10){
		case 10:	case 9:
			grade = "A";	break;
		case 8:
			grade = "B";	break;
		case 7:
			grade = "C";	break;
		case 6:
			grade = "D";	break;
		default:
			grade = "F";	break;
		}
		System.out.println("등급은 " + grade + "입니다.");
		*/
		//1~100 사이의 랜덤한 수를 3개 발생시키고 오름차순으로 출력해주세요.
		
		int random1 = (int)(Math.random() * 100) + 1;
		int random2 = (int)(Math.random() * 100) + 1;
		int random3 = (int)(Math.random() * 100) + 1;
		
		int order1 = -1, order2 = -1, order3 = -1;
		
		if ( random1 < random2 ){
			if( random1 < random3){
				order1 = random1;
				if(random2 < random3){
					order2 = random2;
					order3 = random3;
				}else{
				order2 = random3;
				order3 = random2;
				}
			}else{
				order1 = random3;
				order2 = random1;
				order3 = random2;
			}
		}else{
			if( random2 < random3 ){
				order1 = random2;
				if( random3 <random1 ){
					order2 = random3;
					order3 = random1;
				}else{
					order2 = random1;
					order3 = random3;
				}
			}else{
				order1 = random3;
				order2 = random2;
				order3 = random1;
			}
		}
		
		System.out.print("가장 작은 숫자: " + order1);
		System.out.print("/ 두번째 숫자: " + order2);
		System.out.println("/ 가장 큰 숫자: " + order3);
		
		if(random1<=random2 && random2<=random3){
			order1 = random1;	order2 = random2; order3 = random3;
		}
		if(random1<=random3 && random3<=random2){
			order1 = random1;	order2 = random3; order3 = random2;
		}
		if(random2<=random1 && random1<=random3){
			order1 = random2;	order2 = random1; order3 = random3;
		}
		if(random2<=random3 && random3<=random1){
			order1 = random2;	order2 = random3; order3 = random1;
		}
		if(random3<=random1 && random1<=random2){
			order1 = random3;	order2 = random1; order3 = random2;
		}
		if(random3<=random2 && random2<=random1){
			order1 = random3;	order2 = random2; order3 = random1;
		}
		System.out.print("가장 작은 숫자: " + order1);
		System.out.print("/ 두번째 숫자: " + order2);
		System.out.println("/ 가장 큰 숫자: " + order3);
		
		
		int[] arr = new int[3];
		arr[0] = random1;
		arr[1] = random2;
		arr[2] = random3;
		int i=0;
		int j=0;
		int len = arr.length;
		int temp;
		
		for (i = 0; i < len-1; i++){
				for(j = i+1; j < len; j++){
					if (arr[i]>arr[j]){
						temp = arr[i];
						arr[i] = arr[j];
						arr[j] = temp;
					}
				}
			}
		System.out.print("가장 작은 숫자: " + order1);
		System.out.print("/ 두번째 숫자: " + order2);
		System.out.println("/ 가장 큰 숫자: " + order3);
		
		if(random1 < random2){
			order1 = random1;
			order2 = random2;
		}else{
			order1 = random2;
			order2 = random1;
		}
		if(random3<order1){
			order3 = order2;
			order2 = order1;
			order1 = random3;
		}else if(random3<order2){
			order3 = order2;
			order2 = random3;
		}
		System.out.print("가장 작은 숫자: " + order1);
		System.out.print("/ 두번째 숫자: " + order2);
		System.out.println("/ 가장 큰 숫자: " + order3);
		
		//==========================================================
		int x = random1;
		int y = random2;
		int z = random3;
		
		if(x>y){
			int tmp = y;
			y = x;
			x = tmp;
		}
		if(x>z){
			int tmp = z;
			z = x;
			x = tmp;
		}
		if(y>z){
			int tmp = z;
			z = y;
			y = tmp;
		}
		System.out.print("가장 작은 숫자: " + x);
		System.out.print("/ 두번째 숫자: " + y);
		System.out.println("/ 가장 큰 숫자: " + z);	
	}
}


<TMI>
회원가입 회원정보 관리에서 회원이 탈퇴한다고 해서 그 정보를 지우는 것이 아님
다만 회원의 활동상태를 삭제되었다고 설정할 뿐 EX) MEM_DELETE와 같은 속성으로 관리

테이블에 대한 명세는 알아두어야 함


기술면접에서 1에서 10까지 더하는 코드를 작성하라고 한다면?

FOR문으로 / WHILE문으로 / 공식으로 구현한다하면 떨어진다.
MVT MODEL VIEW TABLE로 (맞나?) 구현하라는 이야기임

MEM_REGNO1 || '-' || MEM_REGNO2                                         AS  "주민 번호",
<- 오라클에서 문자열을 CONCAT하는 방법

PL/SQL에서의 할당연산자는 ::=을 사용하는데 지금은 배우지 않을 것임

전자결제시스템 만들때

PARENT_ID<-이 부서의 부모 부서 코드와 결제자 ID를 가지고 있으면 전자결제 시스템을 만들수 있다.

오라클의 가장중요한 목적
데이터를 정확하게 기억하는 것.	연산은 오라클의 주된 목적이 아님
ex) 반올림이나 처리는 데이터베이스에서 하는 것이 아님
정확한 데이터를 전달하는 것이 주 목적이다.
처리는 데이터를 받은 프로긂에서 하라고 해.

CLOB = CHARACTER(C) LARGE(L) OBJECT(OB)
BLOB = BINARY(B) LARGE(L) OBJECT(OB)

사진을 데이터베이스 안에 저장하는 

==================================================================

줄 맞추는 단축키 : Ctrl + Shift + f

스위치문은 정확히 일치하는 경우에 대하여 명령을 수행하기 때문에
범위를 포함한 조건을 취급할 수 있는 if에 비해 제한적인 사용처를 가진다.
그러나 스위치문을 쓸 수 있는 경우에 if보다 처리속도가 빠른 특징을 가진다.

스위치문이 if문보다 빠른 이유/ 찾아봐라

math.round의 return 값은 long 타입이다. 그래서 정수로 나온다.
소수점을 계산하고 싶으면 double이나 float로 연산하거나 형변환을 시켜주자.
