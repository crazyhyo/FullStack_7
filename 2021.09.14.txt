2021.09.14
<이론>
/**
 * XML DOM을 이용한 XML문서 생성 예제
 */
public class T01_DOMCreationTest {
/*
 * W3C(World Wide Web Consortium) DOM(Document Object Model) 표준에 대하여...
 *
 * DOM은 문서에 접긍하는 표준방법으로서, 이를 이용하면 플랫폼 및 개발언어에 독립적으로 문서의
 * 내용, 구조 및 스타일 정보를 동적으로 핸들링(접근, 수정, 삭제)할 수 있다.
 *
 * W3C DOM 표준은 다음과 같이 크게 3가지로 나누어 볼 수 있다.
 *
 * Core DOM - 모든 문서타입을 위한 핵심 표준모델(API)
 * XML DOM - XML문서를 위한 표준 모델
 * HTML DOM - HTML문서를 위한 표준 모델
 *
 * 예를 들면, HTML DOM은 HTML 엘리먼트 요소 및 속성 정보를 핸들링 하기 위핸 인터페이스를 제공한다.
 */
<실습>
 public static void main(String[] args) {
    	try {
			createDoc();
		} catch (ParserConfigurationException | IOException | TransformerException e) {
			e.printStackTrace();
		}
    }

    public static void createDoc() throws ParserConfigurationException
                                    , IOException
                                    , TransformerException {
        // XML 문서를 생성하기 위한 DocumentBuilder 객체 생성하기
        DocumentBuilderFactory dbf =
            DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = dbf.newDocumentBuilder();

        // Document 객체 생성
        Document document = builder.newDocument();
        
        // root 엘리먼트 생성
        Element root = document.createElement("root");

        // bookList 엘리먼트 생성
        Element bookList = document.createElement("bookList");
        // booklist 엘리먼트 생성
        Element book = document.createElement("book");
        book.setAttribute("isbn", "B001");
        book.setAttribute("kind", "JAVA");

        // 자식 엘리먼트 생성 및 설정
        Element title = document.createElement("title");
        title.setTextContent("자바초급");
        Element author = document.createElement("author");
        author.setTextContent("이순신");
        Element price = document.createElement("price");
        price.setTextContent("25000");

        // book 엘리먼트에 자식 엘리먼트 추가하기
        book.appendChild(title);
        book.appendChild(author);
        book.appendChild(price);

        bookList.appendChild(book);
        //-----------------------------------------------

		book = document.createElement("book");
		book.setAttribute("isbn", "B002");
		book.setAttribute("kind", "JAVA");

		// 자식 엘리먼트 생성 및 설정
		title = document.createElement("title");
		title.setTextContent("자바고급");
		author = document.createElement("author");
		author.setTextContent("홍길동");
		price = document.createElement("price");
		price.setTextContent("28000");

		// book 엘리먼트에 자식 엘리먼트 추가하기
		book.appendChild(title);
		book.appendChild(author);
		book.appendChild(price);

		bookList.appendChild(book);

		book = document.createElement("book");
		book.setAttribute("isbn", "B003");
		book.setAttribute("kind", "DB");

		// 자식 엘리먼트 생성 및 설정
		title = document.createElement("title");
		title.setTextContent("디비설계");
		author = document.createElement("author");
		author.setTextContent("이몽룡");
		price = document.createElement("price");
		price.setTextContent("30000");

		// book 엘리먼트에 자식 엘리먼트 추가하기
		book.appendChild(title);
		book.appendChild(author);
		book.appendChild(price);

		bookList.appendChild(book);

		book = document.createElement("book");
		book.setAttribute("isbn", "B004");
		book.setAttribute("kind", "DB");

		// 자식 엘리먼트 생성 및 설정
		title = document.createElement("title");
		title.setTextContent("디비구현");
		author = document.createElement("author");
		author.setTextContent("일지매");
		price = document.createElement("price");
		price.setTextContent("40000");

		// book 엘리먼트에 자식 엘리먼트 추가하기
		book.appendChild(title);
		book.appendChild(author);
		book.appendChild(price);

		bookList.appendChild(book);

		// 루트 엘리먼트에 booklist 추가하기
		root.appendChild(bookList);

		// 도큐먼트에 root 엘리먼트 추가하기
		document.appendChild(root);

        // XML 문자열로 변환하기
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        DOMSource source = new DOMSource(document);
        StreamResult result = new StreamResult(baos);

        TransformerFactory transformerFactory =
            TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();

        // 출력 인코딩 설정
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");

        // 들여쓰기 설정(공백 크기: 2)
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(
                "{http://xml.apache.org/xslt}indent-amount", "2");

        transformer.transform(source, result);

        try(FileOutputStream fos = new FileOutputStream(
                    "./src/kr/or/ddit/basic/new_book.xml")) {
            fos.write(baos.toByteArray());
        }

        System.out.println(new String(baos.toByteArray(), StandardCharsets.UTF_8));
    }
<TMI>
iBatis:
1. jar file을 이용하여 build path를 잡는다.
2. xml파일로 설정정보파일(config)를 설정한다.
3. 연결한다.(Reader, ...)

클래스 다이어그램

UML(Unified Modeling Language)
연관관계
의존관계(특정 메서드에서 파라미터를 통해 연관되는 관계?)
일반화 관계(객체지향에서의 상속관계)
실체화 관계(인터페이스를 이용한 상속관계[구현관계])
집합관계 중 집약관계와 합성관계가 있음
집약관계와 합성관계는 모두 특정 클래스에서
다른 클래스를 멤버변수로 가지는 경우이지만
합성관계는 멤버변수 클래스가 그를 포함하는 클래스 내부에서 생성되고
집약관계는 멤버변수 클래스가 외부에서 생성되기 때문에
합성관계의 라이프사이클은 그를 포함하는 클래스와 같고
집약관계의 라이프사이클은 독립적이다.
-데이터베이스 관계에서 식별자관계와 비식별자 관계를 생각

클래스 다이어그램에서 밑줄은 static을 표현한다.

유즈케이스 다이어그램에서
선 : 연관관계
사람 : 액터
동그라미 : 유즈케이스
