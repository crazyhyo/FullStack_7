2021.09.17
<이론>
<실습>
	// 대화명, 클라이언트의 Socket을 저장하기 위한 Map변수 선언
	Map<String, Socket> clients;
	
	// 생성자
	public T07_MultiChatServer() {
		clients = Collections.synchronizedMap(new HashMap<String, Socket>());
	}
	
	// 서버 시작
	public void serverStart() {
		Socket socket = null;
		try(ServerSocket server = new ServerSocket(7777)){
			System.out.println("서버가 시작되었습니다.");
			
			while(true) {
				// 클라이언트의 접속을 대기한다.
				socket = server.accept();
				
				System.out.println("[" + socket.getInetAddress() + " : "
						+ socket.getPort() + "] 에서 접속하였습니다.");
				
				//메시지 전송처리를 하는 스레드 생성 및 실행
                ServerReceiver receiver = new ServerReceiver(socket);
                receiver.start();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
    // 서버에서 클라이언트로 메시지를 전송할 Thread를 Inner클래스로 정의
    // Inner클래스에서는 부모 클래스의 멤버들을 직접 사용할 수 있다.
    class ServerReceiver extends Thread {
        private Socket socket;
        private DataInputStream dis;
        private String name;

        public ServerReceiver(Socket socket) {
            this.socket = socket;

            try{
                // 수신용
                dis = new DataInputStream(socket.getInputStream());
            }catch(IOException ex) {
                ex.printStackTrace();
            }
        }

        @Override
        public void run() {
            try{
                // 서버에서는 클라이언트가 보내는 최초의 메시지 즉, 대화명을
                // 수신해야 한다.
                name = dis.readUTF();

                // 대화명을 받아서 다른 모든 클라이언트에게 대화방 참여 메시지를 보낸다.

                sendMessage("#" + name + "님이 입장했습니다.");

                // 대화명과 소켓정보를 Map에 저장한다.
                clients.put(name, socket);

                System.out.println("현재 서버 접속자 수는 " + clients.size() + "명 입니다.");

                // 이후의 메시지 처리는 반복문으로 처리한다.
                // 한 클라이언트가 보낸 메시지를 다른 모든 클라이언트에게 보내준다.
                while(dis != null){
                    sendMessage(dis.readUTF(), name);
                }

            }catch(IOException ex) {
                ex.printStackTrace();
            }finally {
                // 이 finally영역이 실행된다는 것은 클라이언트의 접속이 
                // 종료되었다는 의미이다.
                sendMessage(name + "님이 나가셨습니다.");

                // Map에서 해당 대화명을 삭제한다.
                clients.remove(name);

                System.out.println("[" + socket.getInetAddress()
                        + ":" + socket.getPort()
                        + "] 에서 접속을 종료했습니다.");
                System.out.println("현재 접속자 수는 " + clients.size()
                        + "명 입니다.");
            }
        }
    }

    /**
     * 대화방 즉, Map에 저장된 전체 유저에게 안내 메시지를 전송하는 메서드
     * @param msg 전송할 메시지
     */
    public void sendMessage(String msg) {
        // Map에 저장된 유저의 대화명 리스트 추출하기
        Iterator<String> it = clients.keySet().iterator();
        while(it.hasNext()){
            try{
                String name = it.next(); // 대화명 추출

                // 대화명에 해당하는 Socket의 OutputStream객체 가져오기
                DataOutputStream dos = new DataOutputStream(
                        clients.get(name).getOutputStream());

                dos.writeUTF(msg);  // 메시지 보내기
            }catch(IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     * 대화방 즉, Map에 저장된 전체 유저에게 대화 메시지를 전송하는 메서드
     * @param msg 대화 메시지
     * @param from 보내는 사람
     */
    public void sendMessage(String msg, String from) {
        sendMessage("[" + from + "]" + msg);
    }

    public static void main(String[] args) {
        new T07_MultiChatServer().serverStart();
    }
public class MultiChatClient {

    Scanner scan = new Scanner(System.in);
    private String nickName;    // 대화명

    public void clientStart() {

        // 대화명 입력받기
        System.out.print("대화명 >> ");
        nickName = scan.next();

        Socket socket = null;

        try{
            socket = new Socket("192.168.43.130", 7777);

            System.out.println("서버에 연결되었습니다.");

            // 송신용 스레드 생성
            ClientSender sender = new ClientSender(socket, nickName);
            // 수신용 스레드 생성
            ClientReceiver receiver = new ClientReceiver(socket);
            // 스레드 실행
            sender.start();
            receiver.start();

        }catch(IOException ex){
            ex.printStackTrace();
        }
    }

    // 메시지를 전송하는 스레드 클래스
    class ClientSender extends Thread {
        private DataOutputStream dos;
        private String name;
        private Scanner scan = new Scanner(System.in);

        public ClientSender(Socket socket, String name) {
            this.name = name;
            try{
                dos = new DataOutputStream(
                        socket.getOutputStream());
            }catch(IOException ex){
                ex.printStackTrace();
            }
        }
        @Override
        public void run(){
        	try{
        		// 시작하자 마자 자신의 대화명을 서버로 전송한다.
        		if(dos != null) {
        			dos.writeUTF(name);
        		}
        		
        		while(dos != null){
        			// 키보드로 입력받은 메시지를 서버로 전송하기
        			dos.writeUTF(scan.nextLine());
        		}
        	}catch(IOException ex){
        		ex.printStackTrace();
        	}
        }
    }

    // 수신용 Thread 클래스
    class ClientReceiver extends Thread {
        private DataInputStream dis;

        // 생성자
        public ClientReceiver(Socket socket) {
           try{
               dis = new DataInputStream(socket.getInputStream());
           }catch(IOException ex){
               ex.printStackTrace();
           }
        }

        @Override
        public void run(){
            while(dis != null) {
                try{
                    // 서버로부터 수신한 메시지 출력하기
                    System.out.println(dis.readUTF());
                }catch(IOException ex){
                    ex.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        new MultiChatClient().clientStart();
    }
}
/*
 * 서버는 클라이언트가 접속하면 서버 컴퓨터의 d:/D_Other폴더에 있는 Tulips.jpg
 * 파일을 클라이언트로 전송한다.
 */
    private ServerSocket server;
    private Socket socket;
    private OutputStream os;
    private FileInputStream fis;
    private File file = new File("d:/D_Ohter/Koala.jpg");

    public void serverStart() {
        while(true){
            try{
                server = new ServerSocket(7777);
                System.out.println("서버 준비 완료");

                socket = server.accept();
                System.out.println("파일 전송 시작");

                fis = new FileInputStream(file);
                os = socket.getOutputStream();

                BufferedInputStream bis = new BufferedInputStream(fis);
                BufferedOutputStream bos = new BufferedOutputStream(os);

                int c = 0;
                while((c = bis.read()) != -1) {
                    bos.write(c);
                }

                bis.close();
                bos.close();

                System.out.println("파일 전송 완료!");
            }catch(IOException ex){
                ex.printStackTrace();
            }finally {
                if(fis != null) {
                    try {fis.close();} catch(IOException ex) {}
                }
                if(os != null) {
                    try {fis.close();} catch(IOException ex) {}
                }
                if(socket != null) {
                    try {fis.close();} catch(IOException ex) {}
                }
                if(server != null) {
                    try {fis.close();} catch(IOException ex) {}
                }
            }
        }
    }

    public static void main(String[] args) {
        new T08_TcpFileServer().serverStart();
    }
/*
 * 클라이언트는 서버에 접속하여 서버가 보내주는 파일을 d:/C_Lib폴더에 저장한다.
 */
    private Socket socket;
    private InputStream is;
    private FileOutputStream fos;

    public void clientStart() {

        // 저장 파일 지정
        File file = new File("d:/C_lib/Koala.jpg");

        try{
            socket = new Socket("192.168.43.130", 7777);
            System.out.println("파일 다운로드 시작");

            fos = new FileOutputStream(file);

            BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());

            BufferedOutputStream bos = new BufferedOutputStream(fos);

            int c = 0;
            while((c = bis.read()) != -1) {
                bos.write(c);
            }

            bis.close();
            bos.close();

            System.out.println("파일 다운로드 완료...");
        }catch(IOException ex){
            ex.printStackTrace();
        }finally {
            if(is != null){
                try{ is.close();} catch(IOException ex) {}
            }
            if(fos != null){
                try{ is.close();} catch(IOException ex) {}
            }
            if(socket != null){
                try{ is.close();} catch(IOException ex) {}
            }
        }
    }
    public static void main(String[] args) {
        new TcpFileClient().clientStart();
    }

public class UdpServer {
    private DatagramSocket socket;

    public void start() throws IOException {

        // 포트 8888번을 사용하여 수신하는 소켓을 생성한다.
        socket = new DatagramSocket(8888);

        // 패킷 송수신을 위한 객체 변수 선언
        DatagramPacket inPacket, outPacket;

        byte[] inMsg = new byte[1]; // 패킷 수신을 위한 바이트 배열
        byte[] outMsg;

        while(true){
            // 데이터를 수신하기 위한 패킷을 생성한다.
            inPacket = new DatagramPacket(inMsg, inMsg.length);

            System.out.println("패킷 수신 대기중");

            // 패킷을 통해 데이터를 수신(receive)한다.
            // receive를 실행하면서 Thread가 block됨(다른 호스트가 
            // 해당 소켓에 패킷을 보내줄 때 까지)
            socket.receive(inPacket);
            System.out.println("패킷 수신 완료");

            // 수신한 패킷으로 부터 client의 IP주소와 Port를 얻는다.
            InetAddress address = inPacket.getAddress();
            int port = inPacket.getPort();

            // 서버의 현재 시간을 시분초 형태([hh:mm:ss])로 변환한다.
            SimpleDateFormat sdf = new SimpleDateFormat("[hh:mm:ss]");
            String time = sdf.format(new Date());
            outMsg = time.getBytes(); // 시간 문자열을 바이트 배열로 변환

            // 패킷을 생성해서 client에게 전송(send)한다.
            outPacket = new DatagramPacket(outMsg, outMsg.length, address, port);

            socket.send(outPacket); // 전송 시작
        }
    }

    public static void main(String[] args) throws IOException {
        new UdpServer().start();
    }

}

public class UdpClient {

    public void start() throws IOException {

        DatagramSocket socket = new DatagramSocket();
        InetAddress serverAddress = InetAddress.getByName("192.168.43.130");

        // 데이터가 저장될 공간으로 byte배열을 생성한다.(패킷 수신용)
        //
        byte[] msg = new byte[100];
        
        DatagramPacket outPacket = new DatagramPacket(msg, 50, serverAddress, 8888);
        DatagramPacket inPacket = new DatagramPacket(msg, msg.length);

        socket.send(outPacket); // 전송

        socket.receive(inPacket); // 수신

        System.out.println("현재 서버 시간 => " + new String(inPacket.getData()));

        socket.close();
        
    }

    public static void main(String[] args) throws IOException {
        new UdpClient().start();
    }



}

public class UdpFileSender {
    public static void main(String[] args) {
        File file = new File("d:/D_Other/dddd.jpg");

        DatagramSocket ds = null;

        if(!file.exists()){
            System.out.println("파일이 존재하지 않습니다.");
            System.exit(0);
        }

        long fileSize = file.length();
        long totalReadBytes = 0;

        long startTime = System.currentTimeMillis();

        int port = 8888;

        try{
            ds = new DatagramSocket();
            InetAddress receiveAddr = InetAddress.getByName("192.168.43.130");

            String str = "start"; // 전송 시작을 알려주기 위한 문자열
            DatagramPacket dp = new DatagramPacket(
                    str.getBytes(), str.getBytes().length,
                    receiveAddr, port);

            ds.send(dp);

            FileInputStream fis = new FileInputStream(file);
            byte[] buffer = new byte[1000];

            str = file.getName(); // 파일명
            dp = new DatagramPacket(
                    str.getBytes(), str.getBytes().length,
                    receiveAddr, port);
            ds.send(dp);

            str = String.valueOf(fileSize); // 파일크기
            dp = new DatagramPacket(
                    str.getBytes(), str.getBytes().length,
                    receiveAddr, port);
            ds.send(dp);

            while(true) {	// 버퍼단위로 읽는 메서드를 사용하기 때문에 fis.read(buffer,...); 다 읽으면 break로 빠져나옴
                Thread.sleep(10); // 패킷 전송간의 간격을 주기 위해서...
                int readBytes = fis.read(buffer, 0 ,buffer.length);
                if(readBytes == -1) {
                    break;
                }
                dp = new DatagramPacket(buffer, readBytes, receiveAddr, port);
                ds.send(dp);
                totalReadBytes += readBytes;

                System.out.println(" 진행 상태 : " + totalReadBytes
                        + "/" + fileSize + " Bytes"
                        + (totalReadBytes * 100 / fileSize) + "%)");
            }

            long endTime = System.currentTimeMillis();
            long diffTime = endTime - startTime;
            double transferSpeed = fileSize / diffTime;

            System.out.println("걸린 시간 : " + diffTime + "(ms)");
            System.out.println("평균 전송 속도 : " + transferSpeed
                    + " Bytes/ms");
            System.out.println("전송 완료");

            fis.close();
            ds.close();

        }catch(Exception ex) {
            ex.printStackTrace();
        }
    }

}

public class UdpFileReceiver {
    public static void main(String[] args) {
        int port = 8888;
        long fileSize = 0;
        long totalReadBytes = 0;
        byte[] buffer = new byte[1000];
        int readBytes = 0;

        DatagramSocket ds = new DatagramSocket(port);
        FileOutputStream fos = null;
        DatagramPacket dp = new DatagramPacket(buffer, buffer.length);
        ds.receive(dp); // start 받기

        String str = new String(dp.getData()).trim();

        if(str.equals("start")){
            // 전송 파일명 받기
            buffer = new byte[1000]; // 초기화
            dp = new DatagramPacket(buffer, buffer.length);
            ds.receive(dp);

            str = new String(dp.getData()).trim();
            fos = new FileOutputStream(buffer, buffer.length);
            ds.receive(dp);

            str = new String(dp.getData()).trim();
            fileSize = Long.parseLong(str);
        }
    }

}
<TMI>

